   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "uart.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.UART_Init,"ax",%progbits
  18              	 .align 2
  19              	 .global UART_Init
  20              	 .code 16
  21              	 .thumb_func
  23              	UART_Init:
  24              	.LFB201:
  25              	 .file 1 "../PMSM_FOC/MCUInit/uart.c"
   1:../PMSM_FOC/MCUInit/uart.c **** /**
   2:../PMSM_FOC/MCUInit/uart.c ****  * @file uart.c
   3:../PMSM_FOC/MCUInit/uart.c ****  * @date 2015-12-15
   4:../PMSM_FOC/MCUInit/uart.c ****  *
   5:../PMSM_FOC/MCUInit/uart.c ****  * @cond
   6:../PMSM_FOC/MCUInit/uart.c ****  **************************************************************************************************
   7:../PMSM_FOC/MCUInit/uart.c ****  * PMSM FOC Motor Control Library
   8:../PMSM_FOC/MCUInit/uart.c ****  *
   9:../PMSM_FOC/MCUInit/uart.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../PMSM_FOC/MCUInit/uart.c ****  * All rights reserved.
  11:../PMSM_FOC/MCUInit/uart.c ****  *
  12:../PMSM_FOC/MCUInit/uart.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../PMSM_FOC/MCUInit/uart.c ****  * following conditions are met:
  14:../PMSM_FOC/MCUInit/uart.c ****  *
  15:../PMSM_FOC/MCUInit/uart.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  16:../PMSM_FOC/MCUInit/uart.c ****  *   disclaimer.
  17:../PMSM_FOC/MCUInit/uart.c ****  *
  18:../PMSM_FOC/MCUInit/uart.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  19:../PMSM_FOC/MCUInit/uart.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  20:../PMSM_FOC/MCUInit/uart.c ****  *
  21:../PMSM_FOC/MCUInit/uart.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  22:../PMSM_FOC/MCUInit/uart.c ****  *   products derived from this software without specific prior written permission.
  23:../PMSM_FOC/MCUInit/uart.c ****  *
  24:../PMSM_FOC/MCUInit/uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../PMSM_FOC/MCUInit/uart.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../PMSM_FOC/MCUInit/uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../PMSM_FOC/MCUInit/uart.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../PMSM_FOC/MCUInit/uart.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../PMSM_FOC/MCUInit/uart.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../PMSM_FOC/MCUInit/uart.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../PMSM_FOC/MCUInit/uart.c ****  *
  32:../PMSM_FOC/MCUInit/uart.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../PMSM_FOC/MCUInit/uart.c ****  * with Infineon Technologies AG (dave@infineon.com).
  34:../PMSM_FOC/MCUInit/uart.c ****  **************************************************************************************************
  35:../PMSM_FOC/MCUInit/uart.c ****  *
  36:../PMSM_FOC/MCUInit/uart.c ****  * @file uart.c
  37:../PMSM_FOC/MCUInit/uart.c ****  * @date 15 Dec, 2015
  38:../PMSM_FOC/MCUInit/uart.c ****  * @version 1.0.0
  39:../PMSM_FOC/MCUInit/uart.c ****  *
  40:../PMSM_FOC/MCUInit/uart.c ****  * @brief ACMP low level driver API prototype definition for XMC1 <br>
  41:../PMSM_FOC/MCUInit/uart.c ****  *
  42:../PMSM_FOC/MCUInit/uart.c ****  * <b>Detailed description of file</b> <br>
  43:../PMSM_FOC/MCUInit/uart.c ****  * APIs provided in this file mainly cover the following functionality:
  44:../PMSM_FOC/MCUInit/uart.c ****  * ---- Filter, Hysterisis, Output inversion
  45:../PMSM_FOC/MCUInit/uart.c ****  *
  46:../PMSM_FOC/MCUInit/uart.c ****  * History
  47:../PMSM_FOC/MCUInit/uart.c ****  *
  48:../PMSM_FOC/MCUInit/uart.c ****  * 15 Dec 2015 Version 1.0.0 <br>:
  49:../PMSM_FOC/MCUInit/uart.c ****  *      Initial version
  50:../PMSM_FOC/MCUInit/uart.c ****  * @endcond
  51:../PMSM_FOC/MCUInit/uart.c ****  *
  52:../PMSM_FOC/MCUInit/uart.c ****  */
  53:../PMSM_FOC/MCUInit/uart.c **** 
  54:../PMSM_FOC/MCUInit/uart.c **** /**************************************************************************************************
  55:../PMSM_FOC/MCUInit/uart.c ****  * HEADER FILES
  56:../PMSM_FOC/MCUInit/uart.c ****  **************************************************************************************************
  57:../PMSM_FOC/MCUInit/uart.c **** 
  58:../PMSM_FOC/MCUInit/uart.c **** #include <XMC1300.h>              /* SFR declarations of the selected device */
  59:../PMSM_FOC/MCUInit/uart.c **** #include "uart.h"
  60:../PMSM_FOC/MCUInit/uart.c **** #include "..\ControlModules\pmsm_foc_functions.h"
  61:../PMSM_FOC/MCUInit/uart.c **** #include "..\MCUInit\gpio.h"
  62:../PMSM_FOC/MCUInit/uart.c **** #include "..\Configuration\pmsm_foc_user_mcuhwconfig.h"
  63:../PMSM_FOC/MCUInit/uart.c **** 
  64:../PMSM_FOC/MCUInit/uart.c **** /**************************************************************************************************
  65:../PMSM_FOC/MCUInit/uart.c ****  * GLOBAL DATA
  66:../PMSM_FOC/MCUInit/uart.c ****  **************************************************************************************************
  67:../PMSM_FOC/MCUInit/uart.c **** 
  68:../PMSM_FOC/MCUInit/uart.c **** extern MotorControlType Motor; /* Motor control information */
  69:../PMSM_FOC/MCUInit/uart.c **** 
  70:../PMSM_FOC/MCUInit/uart.c **** /**
  71:../PMSM_FOC/MCUInit/uart.c ****   * @brief	Initialize USIC Module
  72:../PMSM_FOC/MCUInit/uart.c ****   *
  73:../PMSM_FOC/MCUInit/uart.c ****   * @param  None
  74:../PMSM_FOC/MCUInit/uart.c ****   * @retval None
  75:../PMSM_FOC/MCUInit/uart.c ****   */
  76:../PMSM_FOC/MCUInit/uart.c **** #define XMC_SCU_GCU_PASSWD_PROT_DISABLE (0x000000C0UL)  /*
  77:../PMSM_FOC/MCUInit/uart.c ****                                                          * Password for disabling protection.
  78:../PMSM_FOC/MCUInit/uart.c ****                                                          * Access to protected bits allowed.
  79:../PMSM_FOC/MCUInit/uart.c ****                                                          */
  80:../PMSM_FOC/MCUInit/uart.c **** #define XMC_SCU_GCU_PASSWD_PROT_ENABLE  (0x000000C3UL)  /* Password for enabling protection. */
  81:../PMSM_FOC/MCUInit/uart.c **** 
  82:../PMSM_FOC/MCUInit/uart.c **** #if(UART_ENABLE == USIC0_CH1_P1_2_P1_3)
  83:../PMSM_FOC/MCUInit/uart.c **** /**
  84:../PMSM_FOC/MCUInit/uart.c ****  * @brief	Initialize USIC Module
  85:../PMSM_FOC/MCUInit/uart.c ****  *
  86:../PMSM_FOC/MCUInit/uart.c ****  * @param  None
  87:../PMSM_FOC/MCUInit/uart.c ****  * @retval None
  88:../PMSM_FOC/MCUInit/uart.c ****  */
  89:../PMSM_FOC/MCUInit/uart.c **** void UART_Init (void)
  90:../PMSM_FOC/MCUInit/uart.c **** {
  26              	 .loc 1 90 0
  27              	 .cfi_startproc
  91:../PMSM_FOC/MCUInit/uart.c ****   /* Disable clock gating to USIC0: */
  92:../PMSM_FOC/MCUInit/uart.c ****   SCU_GENERAL->PASSWD = XMC_SCU_GCU_PASSWD_PROT_DISABLE;
  28              	 .loc 1 92 0
  29 0000 C022     	 mov r2,#192
  30 0002 324B     	 ldr r3,.L5
  90:../PMSM_FOC/MCUInit/uart.c ****   /* Disable clock gating to USIC0: */
  31              	 .loc 1 90 0
  32 0004 70B5     	 push {r4,r5,r6,lr}
  33              	 .cfi_def_cfa_offset 16
  34              	 .cfi_offset 4,-16
  35              	 .cfi_offset 5,-12
  36              	 .cfi_offset 6,-8
  37              	 .cfi_offset 14,-4
  38              	 .loc 1 92 0
  39 0006 5A62     	 str r2,[r3,#36]
  93:../PMSM_FOC/MCUInit/uart.c **** 
  94:../PMSM_FOC/MCUInit/uart.c ****   /* Stop gating USIC0 */
  95:../PMSM_FOC/MCUInit/uart.c ****   SCU_CLK->CGATCLR0 = 0x00000008UL;
  40              	 .loc 1 95 0
  41 0008 314B     	 ldr r3,.L5+4
  42 000a B83A     	 sub r2,r2,#184
  43 000c 1A61     	 str r2,[r3,#16]
  96:../PMSM_FOC/MCUInit/uart.c **** 
  97:../PMSM_FOC/MCUInit/uart.c ****   /* Wait if VDDC is too low, for VDDC to stabilise */
  98:../PMSM_FOC/MCUInit/uart.c ****   while (SCU_CLK->CLKCR & 0x40000000UL)
  44              	 .loc 1 98 0
  45 000e 8022     	 mov r2,#128
  46 0010 D205     	 lsl r2,r2,#23
  47              	.L2:
  48 0012 1D68     	 ldr r5,[r3]
  49 0014 1540     	 and r5,r2
  50 0016 FCD1     	 bne .L2
  99:../PMSM_FOC/MCUInit/uart.c ****   {
 100:../PMSM_FOC/MCUInit/uart.c ****     continue;
 101:../PMSM_FOC/MCUInit/uart.c ****   }
 102:../PMSM_FOC/MCUInit/uart.c **** 
 103:../PMSM_FOC/MCUInit/uart.c ****   /* Enable bit protection */
 104:../PMSM_FOC/MCUInit/uart.c ****   SCU_GENERAL->PASSWD = XMC_SCU_GCU_PASSWD_PROT_ENABLE;
  51              	 .loc 1 104 0
  52 0018 C322     	 mov r2,#195
  53 001a 2C4B     	 ldr r3,.L5
 105:../PMSM_FOC/MCUInit/uart.c **** 
 106:../PMSM_FOC/MCUInit/uart.c ****   /* Enable the module kernel clock and the module functionality: */
 107:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->KSCFG |= USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk;
  54              	 .loc 1 107 0
  55 001c 2D4C     	 ldr r4,.L5+8
 104:../PMSM_FOC/MCUInit/uart.c **** 
  56              	 .loc 1 104 0
  57 001e 5A62     	 str r2,[r3,#36]
  58              	 .loc 1 107 0
  59 0020 0323     	 mov r3,#3
  60 0022 E268     	 ldr r2,[r4,#12]
 108:../PMSM_FOC/MCUInit/uart.c **** 
 109:../PMSM_FOC/MCUInit/uart.c ****   /* fFD = fPB. */
 110:../PMSM_FOC/MCUInit/uart.c ****   /* FDR.DM = 02b (Fractional divider mode). */
 111:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->FDR &= ~(USIC_CH_FDR_DM_Msk | USIC_CH_FDR_STEP_Msk);
 112:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->FDR |= (0x02UL << USIC_CH_FDR_DM_Pos) | (FDR_STEP << USIC_CH_FDR_STEP_Pos);
 113:../PMSM_FOC/MCUInit/uart.c **** 
 114:../PMSM_FOC/MCUInit/uart.c ****   /* Configure baud rate generator: */
 115:../PMSM_FOC/MCUInit/uart.c ****   /* BAUDRATE = fCTQIN/(BRG.PCTQ x BRG.DCTQ). */
 116:../PMSM_FOC/MCUInit/uart.c ****   /* CLKSEL = 0 (fPIN = fFD), CTQSEL = 00b (fCTQIN = fPDIV), PPPEN = 0 (fPPP=fPIN). */
 117:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->BRG &= ~(USIC_CH_BRG_PCTQ_Msk | USIC_CH_BRG_DCTQ_Msk | USIC_CH_BRG_PDIV_Msk | USIC_CH_
 118:../PMSM_FOC/MCUInit/uart.c ****                     USIC_CH_BRG_PPPEN_Msk);
 119:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->BRG |= (BRG_PCTQ << USIC_CH_BRG_PCTQ_Pos) | (BRG_DCTQ << USIC_CH_BRG_DCTQ_Pos) |
 120:../PMSM_FOC/MCUInit/uart.c ****                     (BRG_PDIV << USIC_CH_BRG_PDIV_Pos);
 121:../PMSM_FOC/MCUInit/uart.c **** 
 122:../PMSM_FOC/MCUInit/uart.c ****   /* Configuration of USIC Shift Control: */
 123:../PMSM_FOC/MCUInit/uart.c ****   /* SCTR.FLE = 8 (Frame Length). */
 124:../PMSM_FOC/MCUInit/uart.c ****   /* SCTR.WLE = 8 (Word Length). */
 125:../PMSM_FOC/MCUInit/uart.c ****   /* SCTR.TRM = 1 (Transmission Mode). */
 126:../PMSM_FOC/MCUInit/uart.c ****   /*
 127:../PMSM_FOC/MCUInit/uart.c ****    * SCTR.PDL = 1 (This bit defines the output level at the shift data output signal when no data i
 128:../PMSM_FOC/MCUInit/uart.c ****    * for transmission).
 129:../PMSM_FOC/MCUInit/uart.c ****    */
 130:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->SCTR &= ~(USIC_CH_SCTR_TRM_Msk | USIC_CH_SCTR_FLE_Msk | USIC_CH_SCTR_WLE_Msk);
 131:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->SCTR |= USIC_CH_SCTR_PDL_Msk | (0x01UL << USIC_CH_SCTR_TRM_Pos) | (0x07UL << USIC_CH_S
 132:../PMSM_FOC/MCUInit/uart.c ****                      (0x07UL << USIC_CH_SCTR_WLE_Pos);
 133:../PMSM_FOC/MCUInit/uart.c **** 
 134:../PMSM_FOC/MCUInit/uart.c ****   /* Configuration of USIC Transmit Control/Status Register: */
 135:../PMSM_FOC/MCUInit/uart.c ****   /* TBUF.TDEN = 1 (TBUF Data Enable: A transmission of the data word in TBUF can be started if TDV
 136:../PMSM_FOC/MCUInit/uart.c ****   /*
 137:../PMSM_FOC/MCUInit/uart.c ****    * TBUF.TDSSM = 1 (Data Single Shot Mode: allow word-by-word data transmission which avoid sendin
 138:../PMSM_FOC/MCUInit/uart.c ****    * several times.
 139:../PMSM_FOC/MCUInit/uart.c ****    */
 140:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TCSR &= ~(USIC_CH_TCSR_TDEN_Msk);
 141:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TCSR |= USIC_CH_TCSR_TDSSM_Msk | (0x01UL << USIC_CH_TCSR_TDEN_Pos);
 142:../PMSM_FOC/MCUInit/uart.c **** 
 143:../PMSM_FOC/MCUInit/uart.c ****   /* Configuration of Protocol Control Register: */
 144:../PMSM_FOC/MCUInit/uart.c ****   /* PCR.SMD = 1 (Sample Mode based on majority). */
 145:../PMSM_FOC/MCUInit/uart.c ****   /* PCR.STPB = 0 (1x Stop bit). */
 146:../PMSM_FOC/MCUInit/uart.c ****   /* PCR.SP = 5 (Sample Point). */
 147:../PMSM_FOC/MCUInit/uart.c ****   /* PCR.PL = 0 (Pulse Length is equal to the bit length). */
 148:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->PCR &= ~(USIC_CH_PCR_ASCMode_STPB_Msk | USIC_CH_PCR_ASCMode_SP_Msk | USIC_CH_PCR_ASCMo
 149:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->PCR |= USIC_CH_PCR_ASCMode_SMD_Msk | (9 << USIC_CH_PCR_ASCMode_SP_Pos);
 150:../PMSM_FOC/MCUInit/uart.c **** 
 151:../PMSM_FOC/MCUInit/uart.c ****   /* Configure Transmit Buffer: */
 152:../PMSM_FOC/MCUInit/uart.c ****   /* Standard transmit buffer event is enabled. */
 153:../PMSM_FOC/MCUInit/uart.c ****   /* Define start entry of Transmit Data FIFO buffer DPTR = 0. */
 154:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TBCTR &= ~(USIC_CH_TBCTR_SIZE_Msk | USIC_CH_TBCTR_DPTR_Msk);
 155:../PMSM_FOC/MCUInit/uart.c **** 
 156:../PMSM_FOC/MCUInit/uart.c ****   /* Set Transmit Data Buffer size and set data pointer to position 0. */
 157:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TBCTR |= ((UART_FIFO_SIZE << USIC_CH_TBCTR_SIZE_Pos) | (0x00 << USIC_CH_TBCTR_DPTR_Pos
  61              	 .loc 1 157 0
  62 0024 A021     	 mov r1,#160
 107:../PMSM_FOC/MCUInit/uart.c **** 
  63              	 .loc 1 107 0
  64 0026 1343     	 orr r3,r2
  65 0028 E360     	 str r3,[r4,#12]
 111:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->FDR |= (0x02UL << USIC_CH_FDR_DM_Pos) | (FDR_STEP << USIC_CH_FDR_STEP_Pos);
  66              	 .loc 1 111 0
  67 002a 2269     	 ldr r2,[r4,#16]
  68 002c 2A4B     	 ldr r3,.L5+12
 154:../PMSM_FOC/MCUInit/uart.c **** 
  69              	 .loc 1 154 0
  70 002e 2B4E     	 ldr r6,.L5+16
 111:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->FDR |= (0x02UL << USIC_CH_FDR_DM_Pos) | (FDR_STEP << USIC_CH_FDR_STEP_Pos);
  71              	 .loc 1 111 0
  72 0030 1340     	 and r3,r2
  73 0032 2361     	 str r3,[r4,#16]
 112:../PMSM_FOC/MCUInit/uart.c **** 
  74              	 .loc 1 112 0
  75 0034 2369     	 ldr r3,[r4,#16]
  76 0036 2A4A     	 ldr r2,.L5+20
  77              	 .loc 1 157 0
  78 0038 C904     	 lsl r1,r1,#19
 112:../PMSM_FOC/MCUInit/uart.c **** 
  79              	 .loc 1 112 0
  80 003a 1343     	 orr r3,r2
  81 003c 2361     	 str r3,[r4,#16]
 117:../PMSM_FOC/MCUInit/uart.c ****                     USIC_CH_BRG_PPPEN_Msk);
  82              	 .loc 1 117 0
  83 003e 6269     	 ldr r2,[r4,#20]
  84 0040 284B     	 ldr r3,.L5+24
 158:../PMSM_FOC/MCUInit/uart.c **** 
 159:../PMSM_FOC/MCUInit/uart.c ****   /* Init UART_RX (P1.3 --> DX0A, or P2.11 --> DX0E): */
 160:../PMSM_FOC/MCUInit/uart.c ****   XMC_GPIO_SetMode(P1_3, XMC_GPIO_MODE_INPUT_TRISTATE);
  85              	 .loc 1 160 0
  86 0042 2948     	 ldr r0,.L5+28
 117:../PMSM_FOC/MCUInit/uart.c ****                     USIC_CH_BRG_PPPEN_Msk);
  87              	 .loc 1 117 0
  88 0044 1340     	 and r3,r2
  89 0046 6361     	 str r3,[r4,#20]
 119:../PMSM_FOC/MCUInit/uart.c ****                     (BRG_PDIV << USIC_CH_BRG_PDIV_Pos);
  90              	 .loc 1 119 0
  91 0048 6369     	 ldr r3,[r4,#20]
  92 004a 284A     	 ldr r2,.L5+32
 161:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->DX0CR = 0x00000000; /* USIC0_CH1.DX0A <-- P1.3. */
 162:../PMSM_FOC/MCUInit/uart.c **** 
 163:../PMSM_FOC/MCUInit/uart.c ****   /* Configure Receive Buffer: */
 164:../PMSM_FOC/MCUInit/uart.c ****   /* Standard Receive buffer event is enabled. */
 165:../PMSM_FOC/MCUInit/uart.c ****   /* Define start entry of Receive Data FIFO buffer DPTR. */
 166:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->RBCTR &= ~(USIC_CH_RBCTR_SIZE_Msk | USIC_CH_RBCTR_DPTR_Msk);
 167:../PMSM_FOC/MCUInit/uart.c **** 
 168:../PMSM_FOC/MCUInit/uart.c ****   /* Set Receive Data Buffer Size and set data pointer to position max. */
 169:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->RBCTR |= ((UART_FIFO_SIZE << USIC_CH_RBCTR_SIZE_Pos) | ((1 << UART_FIFO_SIZE) << USIC_
 170:../PMSM_FOC/MCUInit/uart.c **** 
 171:../PMSM_FOC/MCUInit/uart.c ****   /* Init UART_TX (P1.2 --> DOUT): */
 172:../PMSM_FOC/MCUInit/uart.c ****   XMC_GPIO_SetMode(P1_2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT7);
 173:../PMSM_FOC/MCUInit/uart.c **** 
 174:../PMSM_FOC/MCUInit/uart.c ****   /* Configuration of Channel Control Register: */
 175:../PMSM_FOC/MCUInit/uart.c ****   /* CCR.PM = 00 ( Disable parity generation). */
 176:../PMSM_FOC/MCUInit/uart.c ****   /* CCR.MODE = 2 (ASC mode enabled). */
 177:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->CCR &= ~(USIC_CH_CCR_PM_Msk | USIC_CH_CCR_MODE_Msk);
 178:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->CCR |= 0x02UL << USIC_CH_CCR_MODE_Pos;
 179:../PMSM_FOC/MCUInit/uart.c **** 
 180:../PMSM_FOC/MCUInit/uart.c **** }
  93              	 .loc 1 180 0
  94              	 
 119:../PMSM_FOC/MCUInit/uart.c ****                     (BRG_PDIV << USIC_CH_BRG_PDIV_Pos);
  95              	 .loc 1 119 0
  96 004c 1343     	 orr r3,r2
  97 004e 6361     	 str r3,[r4,#20]
 130:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->SCTR |= USIC_CH_SCTR_PDL_Msk | (0x01UL << USIC_CH_SCTR_TRM_Pos) | (0x07UL << USIC_CH_S
  98              	 .loc 1 130 0
  99 0050 626B     	 ldr r2,[r4,#52]
 100 0052 274B     	 ldr r3,.L5+36
 101 0054 1340     	 and r3,r2
 102 0056 6363     	 str r3,[r4,#52]
 131:../PMSM_FOC/MCUInit/uart.c ****                      (0x07UL << USIC_CH_SCTR_WLE_Pos);
 103              	 .loc 1 131 0
 104 0058 636B     	 ldr r3,[r4,#52]
 105 005a 264A     	 ldr r2,.L5+40
 106 005c 1343     	 orr r3,r2
 107 005e 6363     	 str r3,[r4,#52]
 140:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TCSR |= USIC_CH_TCSR_TDSSM_Msk | (0x01UL << USIC_CH_TCSR_TDEN_Pos);
 108              	 .loc 1 140 0
 109 0060 A26B     	 ldr r2,[r4,#56]
 110 0062 254B     	 ldr r3,.L5+44
 111 0064 1340     	 and r3,r2
 141:../PMSM_FOC/MCUInit/uart.c **** 
 112              	 .loc 1 141 0
 113 0066 A022     	 mov r2,#160
 140:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->TCSR |= USIC_CH_TCSR_TDSSM_Msk | (0x01UL << USIC_CH_TCSR_TDEN_Pos);
 114              	 .loc 1 140 0
 115 0068 A363     	 str r3,[r4,#56]
 141:../PMSM_FOC/MCUInit/uart.c **** 
 116              	 .loc 1 141 0
 117 006a A36B     	 ldr r3,[r4,#56]
 118 006c D200     	 lsl r2,r2,#3
 119 006e 1343     	 orr r3,r2
 120 0070 A363     	 str r3,[r4,#56]
 148:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->PCR |= USIC_CH_PCR_ASCMode_SMD_Msk | (9 << USIC_CH_PCR_ASCMode_SP_Pos);
 121              	 .loc 1 148 0
 122 0072 E26B     	 ldr r2,[r4,#60]
 123 0074 214B     	 ldr r3,.L5+48
 124 0076 1340     	 and r3,r2
 125 0078 E363     	 str r3,[r4,#60]
 149:../PMSM_FOC/MCUInit/uart.c **** 
 126              	 .loc 1 149 0
 127 007a E36B     	 ldr r3,[r4,#60]
 128 007c 204A     	 ldr r2,.L5+52
 129 007e 1343     	 orr r3,r2
 130 0080 E363     	 str r3,[r4,#60]
 154:../PMSM_FOC/MCUInit/uart.c **** 
 131              	 .loc 1 154 0
 132 0082 8423     	 mov r3,#132
 133 0084 5B00     	 lsl r3,r3,#1
 134 0086 E258     	 ldr r2,[r4,r3]
 135 0088 3240     	 and r2,r6
 136 008a E250     	 str r2,[r4,r3]
 157:../PMSM_FOC/MCUInit/uart.c **** 
 137              	 .loc 1 157 0
 138 008c E258     	 ldr r2,[r4,r3]
 139 008e 0A43     	 orr r2,r1
 140 0090 E250     	 str r2,[r4,r3]
 160:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->DX0CR = 0x00000000; /* USIC0_CH1.DX0A <-- P1.3. */
 141              	 .loc 1 160 0
 142 0092 0321     	 mov r1,#3
 143 0094 0022     	 mov r2,#0
 144 0096 FFF7FEFF 	 bl XMC_GPIO_SetMode
 145              	.LVL0:
 166:../PMSM_FOC/MCUInit/uart.c **** 
 146              	 .loc 1 166 0
 147 009a 8623     	 mov r3,#134
 161:../PMSM_FOC/MCUInit/uart.c **** 
 148              	 .loc 1 161 0
 149 009c E561     	 str r5,[r4,#28]
 166:../PMSM_FOC/MCUInit/uart.c **** 
 150              	 .loc 1 166 0
 151 009e 5B00     	 lsl r3,r3,#1
 152 00a0 E258     	 ldr r2,[r4,r3]
 169:../PMSM_FOC/MCUInit/uart.c **** 
 153              	 .loc 1 169 0
 154 00a2 1849     	 ldr r1,.L5+56
 166:../PMSM_FOC/MCUInit/uart.c **** 
 155              	 .loc 1 166 0
 156 00a4 1640     	 and r6,r2
 157 00a6 E650     	 str r6,[r4,r3]
 169:../PMSM_FOC/MCUInit/uart.c **** 
 158              	 .loc 1 169 0
 159 00a8 E258     	 ldr r2,[r4,r3]
 172:../PMSM_FOC/MCUInit/uart.c **** 
 160              	 .loc 1 172 0
 161 00aa 0F48     	 ldr r0,.L5+28
 169:../PMSM_FOC/MCUInit/uart.c **** 
 162              	 .loc 1 169 0
 163 00ac 0A43     	 orr r2,r1
 164 00ae E250     	 str r2,[r4,r3]
 172:../PMSM_FOC/MCUInit/uart.c **** 
 165              	 .loc 1 172 0
 166 00b0 0221     	 mov r1,#2
 167 00b2 B822     	 mov r2,#184
 168 00b4 FFF7FEFF 	 bl XMC_GPIO_SetMode
 169              	.LVL1:
 177:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH1->CCR |= 0x02UL << USIC_CH_CCR_MODE_Pos;
 170              	 .loc 1 177 0
 171 00b8 226C     	 ldr r2,[r4,#64]
 172 00ba 134B     	 ldr r3,.L5+60
 173 00bc 1340     	 and r3,r2
 174 00be 2364     	 str r3,[r4,#64]
 178:../PMSM_FOC/MCUInit/uart.c **** 
 175              	 .loc 1 178 0
 176 00c0 0223     	 mov r3,#2
 177 00c2 226C     	 ldr r2,[r4,#64]
 178 00c4 1343     	 orr r3,r2
 179 00c6 2364     	 str r3,[r4,#64]
 180              	 .loc 1 180 0
 181 00c8 70BD     	 pop {r4,r5,r6,pc}
 182              	.L6:
 183 00ca C046     	 .align 2
 184              	.L5:
 185 00cc 00000140 	 .word 1073807360
 186 00d0 00030140 	 .word 1073808128
 187 00d4 00020048 	 .word 1207960064
 188 00d8 003CFFFF 	 .word -50176
 189 00dc C0FFFFF8 	 .word -117440576
 190 00e0 2B830000 	 .word 33579
 191 00e4 EC8000FC 	 .word -67075860
 192 00e8 00010440 	 .word 1074004224
 193 00ec 00241500 	 .word 1385472
 194 00f0 FFFCC0F0 	 .word -255787777
 195 00f4 02010707 	 .word 117899522
 196 00f8 FFF3FFFF 	 .word -3073
 197 00fc FD00FFFF 	 .word -65283
 198 0100 01090000 	 .word 2305
 199 0104 20000005 	 .word 83886112
 200 0108 F0FCFFFF 	 .word -784
 201              	 .cfi_endproc
 202              	.LFE201:
 204              	 .section .text.UART_TX_String,"ax",%progbits
 205              	 .align 2
 206              	 .global UART_TX_String
 207              	 .code 16
 208              	 .thumb_func
 210              	UART_TX_String:
 211              	.LFB202:
 181:../PMSM_FOC/MCUInit/uart.c **** 
 182:../PMSM_FOC/MCUInit/uart.c **** #elif(UART_ENABLE == USIC0_CH0_P1_4_P1_5)
 183:../PMSM_FOC/MCUInit/uart.c **** void UART_Init (void)
 184:../PMSM_FOC/MCUInit/uart.c **** {
 185:../PMSM_FOC/MCUInit/uart.c ****   /* Disable clock gating to USIC0: */
 186:../PMSM_FOC/MCUInit/uart.c ****   SCU_GENERAL->PASSWD = XMC_SCU_GCU_PASSWD_PROT_DISABLE;
 187:../PMSM_FOC/MCUInit/uart.c **** 
 188:../PMSM_FOC/MCUInit/uart.c ****   /* Stop gating USIC0 */
 189:../PMSM_FOC/MCUInit/uart.c ****   SCU_CLK->CGATCLR0 = 0x00000008UL;
 190:../PMSM_FOC/MCUInit/uart.c **** 
 191:../PMSM_FOC/MCUInit/uart.c ****   /* Wait if VDDC is too low, for VDDC to stabilise */
 192:../PMSM_FOC/MCUInit/uart.c ****   while (SCU_CLK->CLKCR & 0x40000000UL) continue;
 193:../PMSM_FOC/MCUInit/uart.c **** 
 194:../PMSM_FOC/MCUInit/uart.c ****   /* Enable bit protection */
 195:../PMSM_FOC/MCUInit/uart.c ****   SCU_GENERAL->PASSWD = XMC_SCU_GCU_PASSWD_PROT_ENABLE;
 196:../PMSM_FOC/MCUInit/uart.c **** 
 197:../PMSM_FOC/MCUInit/uart.c ****   /* Enable the module kernel clock and the module functionality: */
 198:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->KSCFG |= USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk;
 199:../PMSM_FOC/MCUInit/uart.c **** 
 200:../PMSM_FOC/MCUInit/uart.c ****   // fFD = fPB.
 201:../PMSM_FOC/MCUInit/uart.c ****   // FDR.DM = 02b (Fractional divider mode).
 202:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->FDR &= ~(USIC_CH_FDR_DM_Msk | USIC_CH_FDR_STEP_Msk);
 203:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->FDR |= (0x02UL << USIC_CH_FDR_DM_Pos) | (FDR_STEP << USIC_CH_FDR_STEP_Pos);
 204:../PMSM_FOC/MCUInit/uart.c **** 
 205:../PMSM_FOC/MCUInit/uart.c ****   // Configure baud rate generator:
 206:../PMSM_FOC/MCUInit/uart.c ****   // BAUDRATE = fCTQIN/(BRG.PCTQ x BRG.DCTQ).
 207:../PMSM_FOC/MCUInit/uart.c ****   // CLKSEL = 0 (fPIN = fFD), CTQSEL = 00b (fCTQIN = fPDIV), PPPEN = 0 (fPPP=fPIN).
 208:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->BRG &= ~(USIC_CH_BRG_PCTQ_Msk | USIC_CH_BRG_DCTQ_Msk | USIC_CH_BRG_PDIV_Msk | USIC_CH_
 209:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->BRG |= (BRG_PCTQ << USIC_CH_BRG_PCTQ_Pos) | (BRG_DCTQ << USIC_CH_BRG_DCTQ_Pos) | (BRG_
 210:../PMSM_FOC/MCUInit/uart.c **** 
 211:../PMSM_FOC/MCUInit/uart.c ****   // Configuration of USIC Shift Control:
 212:../PMSM_FOC/MCUInit/uart.c ****   // SCTR.FLE = 8 (Frame Length).
 213:../PMSM_FOC/MCUInit/uart.c ****   // SCTR.WLE = 8 (Word Length).
 214:../PMSM_FOC/MCUInit/uart.c ****   // SCTR.TRM = 1 (Transmission Mode).
 215:../PMSM_FOC/MCUInit/uart.c ****   // SCTR.PDL = 1 (This bit defines the output level at the shift data output signal when no data i
 216:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->SCTR &= ~(USIC_CH_SCTR_TRM_Msk | USIC_CH_SCTR_FLE_Msk | USIC_CH_SCTR_WLE_Msk);
 217:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->SCTR |= USIC_CH_SCTR_PDL_Msk | (0x01UL << USIC_CH_SCTR_TRM_Pos) | (0x07UL << USIC_CH_S
 218:../PMSM_FOC/MCUInit/uart.c **** 
 219:../PMSM_FOC/MCUInit/uart.c ****   // Configuration of USIC Transmit Control/Status Register:
 220:../PMSM_FOC/MCUInit/uart.c ****   // TBUF.TDEN = 1 (TBUF Data Enable: A transmission of the data word in TBUF can be started if TDV
 221:../PMSM_FOC/MCUInit/uart.c ****   // TBUF.TDSSM = 1 (Data Single Shot Mode: allow word-by-word data transmission which avoid sendin
 222:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->TCSR &= ~(USIC_CH_TCSR_TDEN_Msk);
 223:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->TCSR |= USIC_CH_TCSR_TDSSM_Msk | (0x01UL << USIC_CH_TCSR_TDEN_Pos);
 224:../PMSM_FOC/MCUInit/uart.c **** 
 225:../PMSM_FOC/MCUInit/uart.c ****   // Configuration of Protocol Control Register:
 226:../PMSM_FOC/MCUInit/uart.c ****   // PCR.SMD = 1 (Sample Mode based on majority).
 227:../PMSM_FOC/MCUInit/uart.c ****   // PCR.STPB = 0 (1x Stop bit).
 228:../PMSM_FOC/MCUInit/uart.c ****   // PCR.SP = 5 (Sample Point).
 229:../PMSM_FOC/MCUInit/uart.c ****   // PCR.PL = 0 (Pulse Length is equal to the bit length).
 230:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->PCR &= ~(USIC_CH_PCR_ASCMode_STPB_Msk | USIC_CH_PCR_ASCMode_SP_Msk | USIC_CH_PCR_ASCMo
 231:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->PCR |= USIC_CH_PCR_ASCMode_SMD_Msk | (9 << USIC_CH_PCR_ASCMode_SP_Pos);
 232:../PMSM_FOC/MCUInit/uart.c **** 
 233:../PMSM_FOC/MCUInit/uart.c ****   // Configure Transmit Buffer:
 234:../PMSM_FOC/MCUInit/uart.c ****   // Standard transmit buffer event is enabled.
 235:../PMSM_FOC/MCUInit/uart.c ****   // Define start entry of Transmit Data FIFO buffer DPTR = 0.
 236:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->TBCTR &= ~(USIC_CH_TBCTR_SIZE_Msk | USIC_CH_TBCTR_DPTR_Msk);
 237:../PMSM_FOC/MCUInit/uart.c **** 
 238:../PMSM_FOC/MCUInit/uart.c ****   // Set Transmit Data Buffer size and set data pointer to position 0.
 239:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->TBCTR |= ((UART_FIFO_SIZE << USIC_CH_TBCTR_SIZE_Pos)|(0x00 << USIC_CH_TBCTR_DPTR_Pos))
 240:../PMSM_FOC/MCUInit/uart.c **** 
 241:../PMSM_FOC/MCUInit/uart.c ****   // Init UART_RX (P1.4 --> DX5E, or P1.5 --> DOUT0):
 242:../PMSM_FOC/MCUInit/uart.c ****   XMC_GPIO_SetMode(P1_4, XMC_GPIO_MODE_INPUT_TRISTATE);
 243:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->DX0CR |= 0x00000016;      // USIC0_CH0.DX0E <-- P1.4.
 244:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->DX3CR |= 0x00000015;      // USIC0_CH0.DX3E <-- P1.4.
 245:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->DX5CR |= 0x00000014;      // USIC0_CH0.DX5E <-- P1.4.
 246:../PMSM_FOC/MCUInit/uart.c **** 
 247:../PMSM_FOC/MCUInit/uart.c ****   // Configure Receive Buffer:
 248:../PMSM_FOC/MCUInit/uart.c ****   // Standard Receive buffer event is enabled.
 249:../PMSM_FOC/MCUInit/uart.c ****   // Define start entry of Receive Data FIFO buffer DPTR.
 250:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->RBCTR &= ~(USIC_CH_RBCTR_SIZE_Msk | USIC_CH_RBCTR_DPTR_Msk);
 251:../PMSM_FOC/MCUInit/uart.c **** 
 252:../PMSM_FOC/MCUInit/uart.c ****   // Set Receive Data Buffer Size and set data pointer to position max.
 253:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->RBCTR |= ((UART_FIFO_SIZE << USIC_CH_RBCTR_SIZE_Pos)|((1<<UART_FIFO_SIZE) << USIC_CH_R
 254:../PMSM_FOC/MCUInit/uart.c **** 
 255:../PMSM_FOC/MCUInit/uart.c ****   // Init UART_TX (P1.2 --> DOUT):
 256:../PMSM_FOC/MCUInit/uart.c ****   XMC_GPIO_SetMode(P1_5, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 257:../PMSM_FOC/MCUInit/uart.c **** 
 258:../PMSM_FOC/MCUInit/uart.c ****   // Configuration of Channel Control Register:
 259:../PMSM_FOC/MCUInit/uart.c ****   // CCR.PM = 00 ( Disable parity generation).
 260:../PMSM_FOC/MCUInit/uart.c ****   // CCR.MODE = 2 (ASC mode enabled).
 261:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->CCR &= ~(USIC_CH_CCR_PM_Msk | USIC_CH_CCR_MODE_Msk);
 262:../PMSM_FOC/MCUInit/uart.c ****   USIC0_CH0->CCR |= 0x02UL << USIC_CH_CCR_MODE_Pos;
 263:../PMSM_FOC/MCUInit/uart.c **** 
 264:../PMSM_FOC/MCUInit/uart.c **** }
 265:../PMSM_FOC/MCUInit/uart.c **** #endif
 266:../PMSM_FOC/MCUInit/uart.c **** 
 267:../PMSM_FOC/MCUInit/uart.c **** 
 268:../PMSM_FOC/MCUInit/uart.c **** #if(UART_ENABLE != USIC_DISABLED_ALL)
 269:../PMSM_FOC/MCUInit/uart.c **** /**
 270:../PMSM_FOC/MCUInit/uart.c ****   * @brief	Send one string (text) through UART TX
 271:../PMSM_FOC/MCUInit/uart.c ****   *
 272:../PMSM_FOC/MCUInit/uart.c ****   * @param  None
 273:../PMSM_FOC/MCUInit/uart.c ****   * @retval None
 274:../PMSM_FOC/MCUInit/uart.c ****   */
 275:../PMSM_FOC/MCUInit/uart.c **** void UART_TX_String (const char * String_Ptr)
 276:../PMSM_FOC/MCUInit/uart.c **** {
 212              	 .loc 1 276 0
 213              	 .cfi_startproc
 214              	.LVL2:
 215 0000 10B5     	 push {r4,lr}
 216              	 .cfi_def_cfa_offset 8
 217              	 .cfi_offset 4,-8
 218              	 .cfi_offset 14,-4
 219 0002 041C     	 mov r4,r0
 277:../PMSM_FOC/MCUInit/uart.c **** 
 278:../PMSM_FOC/MCUInit/uart.c **** 	const char *Temp_Ptr;
 279:../PMSM_FOC/MCUInit/uart.c **** 	uint16_t S_Count = 0;
 280:../PMSM_FOC/MCUInit/uart.c **** 
 281:../PMSM_FOC/MCUInit/uart.c **** 	Temp_Ptr = String_Ptr;
 282:../PMSM_FOC/MCUInit/uart.c **** 
 283:../PMSM_FOC/MCUInit/uart.c **** 	/* Transmit string until Null character (end of string), or to user-defined maximum length */
 284:../PMSM_FOC/MCUInit/uart.c **** 	while ((*Temp_Ptr != '\0') && (S_Count < STRING_MAX_NO))
 220              	 .loc 1 284 0
 221 0004 0378     	 ldrb r3,[r0]
 222 0006 2034     	 add r4,r4,#32
 223 0008 002B     	 cmp r3,#0
 224 000a 0AD0     	 beq .L7
 285:../PMSM_FOC/MCUInit/uart.c **** 	{
 286:../PMSM_FOC/MCUInit/uart.c **** 		/* Put one byte to USIC Transmit FIFO Buffer */
 287:../PMSM_FOC/MCUInit/uart.c **** 		UART_FIFO_BUFFER = *Temp_Ptr;
 225              	 .loc 1 287 0
 226 000c C022     	 mov r2,#192
 227 000e 0549     	 ldr r1,.L17
 228 0010 5200     	 lsl r2,r2,#1
 229 0012 01E0     	 b .L13
 230              	.LVL3:
 231              	.L16:
 284:../PMSM_FOC/MCUInit/uart.c **** 	{
 232              	 .loc 1 284 0 discriminator 1
 233 0014 A042     	 cmp r0,r4
 234 0016 04D0     	 beq .L7
 235              	.L13:
 236              	 .loc 1 287 0
 237 0018 8B50     	 str r3,[r1,r2]
 288:../PMSM_FOC/MCUInit/uart.c **** 		S_Count ++;
 289:../PMSM_FOC/MCUInit/uart.c **** 		Temp_Ptr ++;
 238              	 .loc 1 289 0
 239 001a 0130     	 add r0,r0,#1
 240              	.LVL4:
 284:../PMSM_FOC/MCUInit/uart.c **** 	{
 241              	 .loc 1 284 0
 242 001c 0378     	 ldrb r3,[r0]
 243 001e 002B     	 cmp r3,#0
 244 0020 F8D1     	 bne .L16
 245              	.L7:
 290:../PMSM_FOC/MCUInit/uart.c **** 	}
 291:../PMSM_FOC/MCUInit/uart.c **** 
 292:../PMSM_FOC/MCUInit/uart.c **** }
 246              	 .loc 1 292 0
 247              	 
 248              	.LVL5:
 249 0022 10BD     	 pop {r4,pc}
 250              	.L18:
 251              	 .align 2
 252              	.L17:
 253 0024 00020048 	 .word 1207960064
 254              	 .cfi_endproc
 255              	.LFE202:
 257              	 .section .text.UART_TX_Return_NewLine,"ax",%progbits
 258              	 .align 2
 259              	 .global UART_TX_Return_NewLine
 260              	 .code 16
 261              	 .thumb_func
 263              	UART_TX_Return_NewLine:
 264              	.LFB203:
 293:../PMSM_FOC/MCUInit/uart.c **** 
 294:../PMSM_FOC/MCUInit/uart.c **** 
 295:../PMSM_FOC/MCUInit/uart.c **** /**
 296:../PMSM_FOC/MCUInit/uart.c ****   * @brief	Send carriage return, and new line for N times
 297:../PMSM_FOC/MCUInit/uart.c ****   *
 298:../PMSM_FOC/MCUInit/uart.c ****   * @param  None
 299:../PMSM_FOC/MCUInit/uart.c ****   * @retval None
 300:../PMSM_FOC/MCUInit/uart.c ****   */
 301:../PMSM_FOC/MCUInit/uart.c **** 
 302:../PMSM_FOC/MCUInit/uart.c **** void UART_TX_Return_NewLine (uint16_t N_times)
 303:../PMSM_FOC/MCUInit/uart.c **** {
 265              	 .loc 1 303 0
 266              	 .cfi_startproc
 267              	.LVL6:
 268 0000 30B5     	 push {r4,r5,lr}
 269              	 .cfi_def_cfa_offset 12
 270              	 .cfi_offset 4,-12
 271              	 .cfi_offset 5,-8
 272              	 .cfi_offset 14,-4
 304:../PMSM_FOC/MCUInit/uart.c **** 
 305:../PMSM_FOC/MCUInit/uart.c **** 	uint16_t K_Counter;
 306:../PMSM_FOC/MCUInit/uart.c **** 
 307:../PMSM_FOC/MCUInit/uart.c **** 	for (K_Counter = 0; K_Counter < N_times; K_Counter ++)
 273              	 .loc 1 307 0
 274 0002 0023     	 mov r3,#0
 275 0004 0028     	 cmp r0,#0
 276 0006 0AD0     	 beq .L19
 308:../PMSM_FOC/MCUInit/uart.c **** 	{
 309:../PMSM_FOC/MCUInit/uart.c **** 		/* Carriage return, \r. */
 310:../PMSM_FOC/MCUInit/uart.c **** 		UART_FIFO_BUFFER = 0x0D;
 277              	 .loc 1 310 0 discriminator 3
 278 0008 C022     	 mov r2,#192
 279 000a 0D25     	 mov r5,#13
 311:../PMSM_FOC/MCUInit/uart.c **** 
 312:../PMSM_FOC/MCUInit/uart.c **** 		/*  New line / Line Feed, \n.*/
 313:../PMSM_FOC/MCUInit/uart.c **** 		UART_FIFO_BUFFER = 0x0A;
 280              	 .loc 1 313 0 discriminator 3
 281 000c 0A24     	 mov r4,#10
 310:../PMSM_FOC/MCUInit/uart.c **** 
 282              	 .loc 1 310 0 discriminator 3
 283 000e 0449     	 ldr r1,.L25
 284 0010 5200     	 lsl r2,r2,#1
 285              	.LVL7:
 286              	.L23:
 307:../PMSM_FOC/MCUInit/uart.c **** 	{
 287              	 .loc 1 307 0 discriminator 3
 288 0012 0133     	 add r3,r3,#1
 289              	.LVL8:
 290 0014 9BB2     	 uxth r3,r3
 291              	.LVL9:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 292              	 .loc 1 310 0 discriminator 3
 293 0016 8D50     	 str r5,[r1,r2]
 294              	 .loc 1 313 0 discriminator 3
 295 0018 8C50     	 str r4,[r1,r2]
 307:../PMSM_FOC/MCUInit/uart.c **** 	{
 296              	 .loc 1 307 0 discriminator 3
 297 001a 8342     	 cmp r3,r0
 298 001c F9D1     	 bne .L23
 299              	.LVL10:
 300              	.L19:
 314:../PMSM_FOC/MCUInit/uart.c **** 	}
 315:../PMSM_FOC/MCUInit/uart.c **** 
 316:../PMSM_FOC/MCUInit/uart.c **** }
 301              	 .loc 1 316 0
 302              	 
 303 001e 30BD     	 pop {r4,r5,pc}
 304              	.L26:
 305              	 .align 2
 306              	.L25:
 307 0020 00020048 	 .word 1207960064
 308              	 .cfi_endproc
 309              	.LFE203:
 311              	 .section .text.UART_TX_uint16_t,"ax",%progbits
 312              	 .align 2
 313              	 .global UART_TX_uint16_t
 314              	 .code 16
 315              	 .thumb_func
 317              	UART_TX_uint16_t:
 318              	.LFB204:
 317:../PMSM_FOC/MCUInit/uart.c **** 
 318:../PMSM_FOC/MCUInit/uart.c **** /**
 319:../PMSM_FOC/MCUInit/uart.c ****   * @brief	Send ASCII of one uint16_t integer through UART TX, Integer_16 <= 99999
 320:../PMSM_FOC/MCUInit/uart.c ****   *
 321:../PMSM_FOC/MCUInit/uart.c ****   * @param  None
 322:../PMSM_FOC/MCUInit/uart.c ****   * @retval None
 323:../PMSM_FOC/MCUInit/uart.c ****   */
 324:../PMSM_FOC/MCUInit/uart.c **** void UART_TX_uint16_t (uint16_t Integer_16)
 325:../PMSM_FOC/MCUInit/uart.c **** {
 319              	 .loc 1 325 0
 320              	 .cfi_startproc
 321              	.LVL11:
 326:../PMSM_FOC/MCUInit/uart.c **** 
 327:../PMSM_FOC/MCUInit/uart.c **** 	register uint16_t Int_digit;
 328:../PMSM_FOC/MCUInit/uart.c **** 
 329:../PMSM_FOC/MCUInit/uart.c **** 	#define DVDSLC_UART		0								// Dividend Shift Left Count
 330:../PMSM_FOC/MCUInit/uart.c **** 	#define DVSSRC_UART		0								// Divisor Shift Right Count.
 331:../PMSM_FOC/MCUInit/uart.c **** 	#define QSCNT_UART		0								// Quotient Shift Count.
 332:../PMSM_FOC/MCUInit/uart.c **** 
 333:../PMSM_FOC/MCUInit/uart.c **** 	/* Unsigned Div. Quotient right shift */
 334:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DIVCON = 0x00008004 | (DVDSLC_UART << 16U) | (DVSSRC_UART << 24U) | (QSCNT_UART << 8U);
 322              	 .loc 1 334 0
 323 0000 2B4A     	 ldr r2,.L38
 324 0002 2C4B     	 ldr r3,.L38+4
 335:../PMSM_FOC/MCUInit/uart.c **** 
 336:../PMSM_FOC/MCUInit/uart.c **** 	/* Integer_16: 10000 ~ 65535 */
 337:../PMSM_FOC/MCUInit/uart.c **** 	if (Integer_16 > 9999)
 325              	 .loc 1 337 0
 326 0004 2C49     	 ldr r1,.L38+8
 334:../PMSM_FOC/MCUInit/uart.c **** 
 327              	 .loc 1 334 0
 328 0006 5A63     	 str r2,[r3,#52]
 329 0008 0922     	 mov r2,#9
 330              	 .loc 1 337 0
 331 000a 8842     	 cmp r0,r1
 332 000c 0FD9     	 bls .L28
 338:../PMSM_FOC/MCUInit/uart.c **** 	{
 339:../PMSM_FOC/MCUInit/uart.c **** 		/*11111** Divider Unit (DIV) #01 **11111*/
 340:../PMSM_FOC/MCUInit/uart.c **** 		MATH->DVD = Integer_16;
 341:../PMSM_FOC/MCUInit/uart.c **** 
 342:../PMSM_FOC/MCUInit/uart.c **** 		/* Input Divisor, and auto start of DIV calculation (~35 kernel clock cycles) */
 343:../PMSM_FOC/MCUInit/uart.c **** 		MATH->DVS = 10000;
 333              	 .loc 1 343 0
 334 000e 2B49     	 ldr r1,.L38+12
 340:../PMSM_FOC/MCUInit/uart.c **** 
 335              	 .loc 1 340 0
 336 0010 1862     	 str r0,[r3,#32]
 337              	 .loc 1 343 0
 338 0012 5962     	 str r1,[r3,#36]
 344:../PMSM_FOC/MCUInit/uart.c **** 
 345:../PMSM_FOC/MCUInit/uart.c **** 		/* Horizontal Tab. \v is Vertical Tab */
 346:../PMSM_FOC/MCUInit/uart.c **** 		UART_FIFO_BUFFER = '\t';
 339              	 .loc 1 346 0
 340 0014 C021     	 mov r1,#192
 341 0016 2A48     	 ldr r0,.L38+16
 342              	.LVL12:
 343 0018 4900     	 lsl r1,r1,#1
 344 001a 4250     	 str r2,[r0,r1]
 345              	.L29:
 347:../PMSM_FOC/MCUInit/uart.c **** 
 348:../PMSM_FOC/MCUInit/uart.c ****     /* Wait if DIV is still running calculation */
 349:../PMSM_FOC/MCUInit/uart.c ****     while (MATH->DIVST)
 346              	 .loc 1 349 0
 347 001c 1A6B     	 ldr r2,[r3,#48]
 348 001e 2549     	 ldr r1,.L38+4
 349 0020 002A     	 cmp r2,#0
 350 0022 FBD1     	 bne .L29
 350:../PMSM_FOC/MCUInit/uart.c ****     {
 351:../PMSM_FOC/MCUInit/uart.c ****       continue;
 352:../PMSM_FOC/MCUInit/uart.c ****     }
 353:../PMSM_FOC/MCUInit/uart.c **** 
 354:../PMSM_FOC/MCUInit/uart.c **** 		/* Read DIV Quotient result */
 355:../PMSM_FOC/MCUInit/uart.c **** 		Int_digit = MATH->QUOT;
 351              	 .loc 1 355 0
 352 0024 8A6A     	 ldr r2,[r1,#40]
 353              	.LVL13:
 356:../PMSM_FOC/MCUInit/uart.c **** 
 357:../PMSM_FOC/MCUInit/uart.c **** 		Integer_16 = MATH->RMD;
 354              	 .loc 1 357 0
 355 0026 C86A     	 ldr r0,[r1,#44]
 358:../PMSM_FOC/MCUInit/uart.c **** 
 359:../PMSM_FOC/MCUInit/uart.c **** 		/* ASCII of ten-thousands digit */
 360:../PMSM_FOC/MCUInit/uart.c **** 		Int_digit += DIFF_09_TO_ASCII;
 356              	 .loc 1 360 0
 357 0028 3032     	 add r2,r2,#48
 358              	.LVL14:
 357:../PMSM_FOC/MCUInit/uart.c **** 
 359              	 .loc 1 357 0
 360 002a 80B2     	 uxth r0,r0
 361              	.LVL15:
 362 002c 92B2     	 uxth r2,r2
 363              	.L28:
 361:../PMSM_FOC/MCUInit/uart.c **** 	}
 362:../PMSM_FOC/MCUInit/uart.c **** 	else
 363:../PMSM_FOC/MCUInit/uart.c **** 	{
 364:../PMSM_FOC/MCUInit/uart.c **** 		/* Horizontal Tab. \v is Vertical Tab */
 365:../PMSM_FOC/MCUInit/uart.c **** 		Int_digit = '\t';
 366:../PMSM_FOC/MCUInit/uart.c **** 	}
 367:../PMSM_FOC/MCUInit/uart.c **** 
 368:../PMSM_FOC/MCUInit/uart.c **** 	/* Dividend */
 369:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVD = Integer_16;
 370:../PMSM_FOC/MCUInit/uart.c **** 
 371:../PMSM_FOC/MCUInit/uart.c **** 	/* Input Divisor, and auto start of DIV calculation */
 372:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVS = 1000;
 364              	 .loc 1 372 0
 365 002e FA21     	 mov r1,#250
 369:../PMSM_FOC/MCUInit/uart.c **** 
 366              	 .loc 1 369 0
 367 0030 204B     	 ldr r3,.L38+4
 368              	 .loc 1 372 0
 369 0032 8900     	 lsl r1,r1,#2
 369:../PMSM_FOC/MCUInit/uart.c **** 
 370              	 .loc 1 369 0
 371 0034 1862     	 str r0,[r3,#32]
 372              	 .loc 1 372 0
 373 0036 5962     	 str r1,[r3,#36]
 373:../PMSM_FOC/MCUInit/uart.c **** 
 374:../PMSM_FOC/MCUInit/uart.c **** 	/* Put ten-thousands digit (or \t) to USIC Transmit FIFO Buffer */
 375:../PMSM_FOC/MCUInit/uart.c **** 	UART_FIFO_BUFFER = Int_digit;
 374              	 .loc 1 375 0
 375 0038 C021     	 mov r1,#192
 376 003a 2148     	 ldr r0,.L38+16
 377              	.LVL16:
 378 003c 4900     	 lsl r1,r1,#1
 379 003e 4250     	 str r2,[r0,r1]
 376:../PMSM_FOC/MCUInit/uart.c **** 
 377:../PMSM_FOC/MCUInit/uart.c ****   /* Wait if DIV is still running calculation. */
 378:../PMSM_FOC/MCUInit/uart.c ****   while (MATH->DIVST)
 380              	 .loc 1 378 0
 381 0040 1A1C     	 mov r2,r3
 382              	.L30:
 383 0042 116B     	 ldr r1,[r2,#48]
 384 0044 1B4B     	 ldr r3,.L38+4
 385 0046 0029     	 cmp r1,#0
 386 0048 FBD1     	 bne .L30
 379:../PMSM_FOC/MCUInit/uart.c ****   {
 380:../PMSM_FOC/MCUInit/uart.c ****     continue;
 381:../PMSM_FOC/MCUInit/uart.c ****   }
 382:../PMSM_FOC/MCUInit/uart.c **** 
 383:../PMSM_FOC/MCUInit/uart.c **** 	/* Read DIV Quotient result */
 384:../PMSM_FOC/MCUInit/uart.c **** 	Int_digit = MATH->QUOT;
 387              	 .loc 1 384 0
 388 004a 9A6A     	 ldr r2,[r3,#40]
 389              	.LVL17:
 385:../PMSM_FOC/MCUInit/uart.c **** 
 386:../PMSM_FOC/MCUInit/uart.c **** 	Integer_16 = MATH->RMD;
 390              	 .loc 1 386 0
 391 004c D96A     	 ldr r1,[r3,#44]
 392              	.LVL18:
 393 004e 1204     	 lsl r2,r2,#16
 394              	.LVL19:
 387:../PMSM_FOC/MCUInit/uart.c **** 
 388:../PMSM_FOC/MCUInit/uart.c **** 	/* Dividend */
 389:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVD = Integer_16;
 395              	 .loc 1 389 0
 396 0050 0904     	 lsl r1,r1,#16
 397              	.LVL20:
 398 0052 090C     	 lsr r1,r1,#16
 399 0054 1962     	 str r1,[r3,#32]
 390:../PMSM_FOC/MCUInit/uart.c **** 
 391:../PMSM_FOC/MCUInit/uart.c **** 	/* Input Divisor, and auto start of DIV calculation */
 392:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVS = 100;
 400              	 .loc 1 392 0
 401 0056 6421     	 mov r1,#100
 402 0058 120C     	 lsr r2,r2,#16
 403 005a 5962     	 str r1,[r3,#36]
 393:../PMSM_FOC/MCUInit/uart.c **** 
 394:../PMSM_FOC/MCUInit/uart.c **** 	/* Put thousands digit to USIC Transmit FIFO Buffer */
 395:../PMSM_FOC/MCUInit/uart.c **** 	UART_FIFO_BUFFER = Int_digit + DIFF_09_TO_ASCII;
 404              	 .loc 1 395 0
 405 005c 1848     	 ldr r0,.L38+16
 406 005e 1D31     	 add r1,r1,#29
 407 0060 3032     	 add r2,r2,#48
 408 0062 FF31     	 add r1,r1,#255
 409 0064 4250     	 str r2,[r0,r1]
 396:../PMSM_FOC/MCUInit/uart.c **** 
 397:../PMSM_FOC/MCUInit/uart.c ****   /* Wait if DIV is still running calculation */
 398:../PMSM_FOC/MCUInit/uart.c ****   while (MATH->DIVST)
 410              	 .loc 1 398 0
 411 0066 1A1C     	 mov r2,r3
 412              	.L31:
 413 0068 116B     	 ldr r1,[r2,#48]
 414 006a 124B     	 ldr r3,.L38+4
 415 006c 0029     	 cmp r1,#0
 416 006e FBD1     	 bne .L31
 399:../PMSM_FOC/MCUInit/uart.c ****   {
 400:../PMSM_FOC/MCUInit/uart.c ****     continue;
 401:../PMSM_FOC/MCUInit/uart.c ****   }
 402:../PMSM_FOC/MCUInit/uart.c **** 
 403:../PMSM_FOC/MCUInit/uart.c **** 	/*  Read DIV Quotient result */
 404:../PMSM_FOC/MCUInit/uart.c **** 	Int_digit = MATH->QUOT;
 417              	 .loc 1 404 0
 418 0070 9A6A     	 ldr r2,[r3,#40]
 419              	.LVL21:
 405:../PMSM_FOC/MCUInit/uart.c **** 
 406:../PMSM_FOC/MCUInit/uart.c **** 	Integer_16 = MATH->RMD;
 420              	 .loc 1 406 0
 421 0072 D96A     	 ldr r1,[r3,#44]
 422              	.LVL22:
 423 0074 1204     	 lsl r2,r2,#16
 424              	.LVL23:
 407:../PMSM_FOC/MCUInit/uart.c **** 
 408:../PMSM_FOC/MCUInit/uart.c **** 	/* Dividend */
 409:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVD = Integer_16;
 425              	 .loc 1 409 0
 426 0076 0904     	 lsl r1,r1,#16
 427              	.LVL24:
 428 0078 090C     	 lsr r1,r1,#16
 429 007a 1962     	 str r1,[r3,#32]
 410:../PMSM_FOC/MCUInit/uart.c **** 
 411:../PMSM_FOC/MCUInit/uart.c **** 	/* Input Divisor, and auto start of DIV calculation */
 412:../PMSM_FOC/MCUInit/uart.c **** 	MATH->DVS = 10;
 430              	 .loc 1 412 0
 431 007c 0A21     	 mov r1,#10
 432 007e 120C     	 lsr r2,r2,#16
 433 0080 5962     	 str r1,[r3,#36]
 413:../PMSM_FOC/MCUInit/uart.c **** 
 414:../PMSM_FOC/MCUInit/uart.c **** 	/* Put hundreds digit to USIC Transmit FIFO Buffer */
 415:../PMSM_FOC/MCUInit/uart.c **** 	UART_FIFO_BUFFER = Int_digit + DIFF_09_TO_ASCII;
 434              	 .loc 1 415 0
 435 0082 0F48     	 ldr r0,.L38+16
 436 0084 7731     	 add r1,r1,#119
 437 0086 3032     	 add r2,r2,#48
 438 0088 FF31     	 add r1,r1,#255
 439 008a 4250     	 str r2,[r0,r1]
 440              	.L32:
 416:../PMSM_FOC/MCUInit/uart.c **** 
 417:../PMSM_FOC/MCUInit/uart.c ****   /* Wait if DIV is still running calculation */
 418:../PMSM_FOC/MCUInit/uart.c ****   while (MATH->DIVST)
 441              	 .loc 1 418 0
 442 008c 196B     	 ldr r1,[r3,#48]
 443 008e 094A     	 ldr r2,.L38+4
 444 0090 0029     	 cmp r1,#0
 445 0092 FBD1     	 bne .L32
 419:../PMSM_FOC/MCUInit/uart.c ****   {
 420:../PMSM_FOC/MCUInit/uart.c ****     continue;
 421:../PMSM_FOC/MCUInit/uart.c ****   }
 422:../PMSM_FOC/MCUInit/uart.c **** 
 423:../PMSM_FOC/MCUInit/uart.c **** 	/* Read DIV Quotient result */
 424:../PMSM_FOC/MCUInit/uart.c **** 	Int_digit = MATH->QUOT;
 446              	 .loc 1 424 0
 447 0094 936A     	 ldr r3,[r2,#40]
 448              	.LVL25:
 425:../PMSM_FOC/MCUInit/uart.c **** 
 426:../PMSM_FOC/MCUInit/uart.c **** 	/* Put tens digit to USIC Transmit FIFO Buffer */
 427:../PMSM_FOC/MCUInit/uart.c **** 	UART_FIFO_BUFFER = Int_digit + DIFF_09_TO_ASCII;
 449              	 .loc 1 427 0
 450 0096 0A48     	 ldr r0,.L38+16
 451 0098 1B04     	 lsl r3,r3,#16
 452              	.LVL26:
 453 009a 1B0C     	 lsr r3,r3,#16
 454 009c 8131     	 add r1,r1,#129
 455 009e FF31     	 add r1,r1,#255
 456 00a0 3033     	 add r3,r3,#48
 457 00a2 4350     	 str r3,[r0,r1]
 428:../PMSM_FOC/MCUInit/uart.c **** 
 429:../PMSM_FOC/MCUInit/uart.c **** 	/* Put units digit to USIC Transmit FIFO Buffer */
 430:../PMSM_FOC/MCUInit/uart.c **** 	Integer_16 = MATH->RMD;
 458              	 .loc 1 430 0
 459 00a4 D36A     	 ldr r3,[r2,#44]
 460              	.LVL27:
 431:../PMSM_FOC/MCUInit/uart.c **** 
 432:../PMSM_FOC/MCUInit/uart.c **** 	/*  Put units digit to USIC Transmit FIFO Buffer. */
 433:../PMSM_FOC/MCUInit/uart.c **** 	UART_FIFO_BUFFER = Integer_16 + DIFF_09_TO_ASCII;
 434:../PMSM_FOC/MCUInit/uart.c **** 
 435:../PMSM_FOC/MCUInit/uart.c **** }
 461              	 .loc 1 435 0
 462              	 
 463 00a6 1B04     	 lsl r3,r3,#16
 464              	.LVL28:
 465 00a8 1B0C     	 lsr r3,r3,#16
 433:../PMSM_FOC/MCUInit/uart.c **** 
 466              	 .loc 1 433 0
 467 00aa 3033     	 add r3,r3,#48
 468 00ac 4350     	 str r3,[r0,r1]
 469              	 .loc 1 435 0
 470 00ae 7047     	 bx lr
 471              	.L39:
 472              	 .align 2
 473              	.L38:
 474 00b0 04800000 	 .word 32772
 475 00b4 00000340 	 .word 1073938432
 476 00b8 0F270000 	 .word 9999
 477 00bc 10270000 	 .word 10000
 478 00c0 00020048 	 .word 1207960064
 479              	 .cfi_endproc
 480              	.LFE204:
 482              	 .section .text.UART_TX_int16_t,"ax",%progbits
 483              	 .align 2
 484              	 .global UART_TX_int16_t
 485              	 .code 16
 486              	 .thumb_func
 488              	UART_TX_int16_t:
 489              	.LFB205:
 436:../PMSM_FOC/MCUInit/uart.c **** 
 437:../PMSM_FOC/MCUInit/uart.c **** /*
 438:../PMSM_FOC/MCUInit/uart.c ****  * Send ASCII of one int16_t integer through UART TX
 439:../PMSM_FOC/MCUInit/uart.c ****  * Execution time: ?us (O3 - Optimize most).
 440:../PMSM_FOC/MCUInit/uart.c ****  */
 441:../PMSM_FOC/MCUInit/uart.c **** void UART_TX_int16_t(int16_t integer_16)
 442:../PMSM_FOC/MCUInit/uart.c **** {
 490              	 .loc 1 442 0
 491              	 .cfi_startproc
 492              	.LVL29:
 443:../PMSM_FOC/MCUInit/uart.c ****   if (integer_16 < 0)
 493              	 .loc 1 443 0
 494 0000 0028     	 cmp r0,#0
 495 0002 06DA     	 bge .L41
 444:../PMSM_FOC/MCUInit/uart.c ****   {
 445:../PMSM_FOC/MCUInit/uart.c ****     integer_16 = -integer_16;
 446:../PMSM_FOC/MCUInit/uart.c **** 
 447:../PMSM_FOC/MCUInit/uart.c ****     UART_FIFO_BUFFER = 0x2D; /* Put minus sign '-' to USIC Transmit FIFO Buffer. */
 496              	 .loc 1 447 0
 497 0004 C023     	 mov r3,#192
 498 0006 2D21     	 mov r1,#45
 499 0008 2E4A     	 ldr r2,.L52
 445:../PMSM_FOC/MCUInit/uart.c **** 
 500              	 .loc 1 445 0
 501 000a 4042     	 neg r0,r0
 502              	.LVL30:
 503              	 .loc 1 447 0
 504 000c 5B00     	 lsl r3,r3,#1
 445:../PMSM_FOC/MCUInit/uart.c **** 
 505              	 .loc 1 445 0
 506 000e 00B2     	 sxth r0,r0
 507              	.LVL31:
 508              	 .loc 1 447 0
 509 0010 D150     	 str r1,[r2,r3]
 510              	.L41:
 511              	.LBB11:
 512              	.LBB12:
 334:../PMSM_FOC/MCUInit/uart.c **** 
 513              	 .loc 1 334 0
 514 0012 2D4A     	 ldr r2,.L52+4
 515 0014 2D4B     	 ldr r3,.L52+8
 337:../PMSM_FOC/MCUInit/uart.c **** 	{
 516              	 .loc 1 337 0
 517 0016 2E49     	 ldr r1,.L52+12
 518              	.LBE12:
 519              	.LBE11:
 448:../PMSM_FOC/MCUInit/uart.c ****   }
 449:../PMSM_FOC/MCUInit/uart.c ****   UART_TX_uint16_t(integer_16); /* Send ASCII of one uint16_t integer through UART. */
 520              	 .loc 1 449 0
 521 0018 80B2     	 uxth r0,r0
 522              	.LVL32:
 523              	.LBB15:
 524              	.LBB13:
 334:../PMSM_FOC/MCUInit/uart.c **** 
 525              	 .loc 1 334 0
 526 001a 5A63     	 str r2,[r3,#52]
 337:../PMSM_FOC/MCUInit/uart.c **** 	{
 527              	 .loc 1 337 0
 528 001c 0922     	 mov r2,#9
 529 001e 8842     	 cmp r0,r1
 530 0020 0FD9     	 bls .L42
 343:../PMSM_FOC/MCUInit/uart.c **** 
 531              	 .loc 1 343 0
 532 0022 2C49     	 ldr r1,.L52+16
 340:../PMSM_FOC/MCUInit/uart.c **** 
 533              	 .loc 1 340 0
 534 0024 1862     	 str r0,[r3,#32]
 343:../PMSM_FOC/MCUInit/uart.c **** 
 535              	 .loc 1 343 0
 536 0026 5962     	 str r1,[r3,#36]
 346:../PMSM_FOC/MCUInit/uart.c **** 
 537              	 .loc 1 346 0
 538 0028 C021     	 mov r1,#192
 539 002a 2648     	 ldr r0,.L52
 540              	.LVL33:
 541 002c 4900     	 lsl r1,r1,#1
 542 002e 4250     	 str r2,[r0,r1]
 543              	.L43:
 349:../PMSM_FOC/MCUInit/uart.c ****     {
 544              	 .loc 1 349 0
 545 0030 1A6B     	 ldr r2,[r3,#48]
 546 0032 2649     	 ldr r1,.L52+8
 547 0034 002A     	 cmp r2,#0
 548 0036 FBD1     	 bne .L43
 355:../PMSM_FOC/MCUInit/uart.c **** 
 549              	 .loc 1 355 0
 550 0038 8A6A     	 ldr r2,[r1,#40]
 551              	.LVL34:
 357:../PMSM_FOC/MCUInit/uart.c **** 
 552              	 .loc 1 357 0
 553 003a C86A     	 ldr r0,[r1,#44]
 360:../PMSM_FOC/MCUInit/uart.c **** 	}
 554              	 .loc 1 360 0
 555 003c 3032     	 add r2,r2,#48
 556              	.LVL35:
 357:../PMSM_FOC/MCUInit/uart.c **** 
 557              	 .loc 1 357 0
 558 003e 80B2     	 uxth r0,r0
 559              	.LVL36:
 560 0040 92B2     	 uxth r2,r2
 561              	.L42:
 372:../PMSM_FOC/MCUInit/uart.c **** 
 562              	 .loc 1 372 0
 563 0042 FA21     	 mov r1,#250
 369:../PMSM_FOC/MCUInit/uart.c **** 
 564              	 .loc 1 369 0
 565 0044 214B     	 ldr r3,.L52+8
 372:../PMSM_FOC/MCUInit/uart.c **** 
 566              	 .loc 1 372 0
 567 0046 8900     	 lsl r1,r1,#2
 369:../PMSM_FOC/MCUInit/uart.c **** 
 568              	 .loc 1 369 0
 569 0048 1862     	 str r0,[r3,#32]
 372:../PMSM_FOC/MCUInit/uart.c **** 
 570              	 .loc 1 372 0
 571 004a 5962     	 str r1,[r3,#36]
 375:../PMSM_FOC/MCUInit/uart.c **** 
 572              	 .loc 1 375 0
 573 004c C021     	 mov r1,#192
 574 004e 1D48     	 ldr r0,.L52
 575              	.LVL37:
 576 0050 4900     	 lsl r1,r1,#1
 577 0052 4250     	 str r2,[r0,r1]
 378:../PMSM_FOC/MCUInit/uart.c ****   {
 578              	 .loc 1 378 0
 579 0054 1A1C     	 mov r2,r3
 580              	.L44:
 581 0056 116B     	 ldr r1,[r2,#48]
 582 0058 1C4B     	 ldr r3,.L52+8
 583 005a 0029     	 cmp r1,#0
 584 005c FBD1     	 bne .L44
 384:../PMSM_FOC/MCUInit/uart.c **** 
 585              	 .loc 1 384 0
 586 005e 9A6A     	 ldr r2,[r3,#40]
 587              	.LVL38:
 386:../PMSM_FOC/MCUInit/uart.c **** 
 588              	 .loc 1 386 0
 589 0060 D96A     	 ldr r1,[r3,#44]
 590              	.LVL39:
 591 0062 1204     	 lsl r2,r2,#16
 592              	.LVL40:
 389:../PMSM_FOC/MCUInit/uart.c **** 
 593              	 .loc 1 389 0
 594 0064 0904     	 lsl r1,r1,#16
 595              	.LVL41:
 596 0066 090C     	 lsr r1,r1,#16
 597 0068 1962     	 str r1,[r3,#32]
 392:../PMSM_FOC/MCUInit/uart.c **** 
 598              	 .loc 1 392 0
 599 006a 6421     	 mov r1,#100
 600 006c 120C     	 lsr r2,r2,#16
 601 006e 5962     	 str r1,[r3,#36]
 395:../PMSM_FOC/MCUInit/uart.c **** 
 602              	 .loc 1 395 0
 603 0070 1448     	 ldr r0,.L52
 604 0072 1D31     	 add r1,r1,#29
 605 0074 3032     	 add r2,r2,#48
 606 0076 FF31     	 add r1,r1,#255
 607 0078 4250     	 str r2,[r0,r1]
 398:../PMSM_FOC/MCUInit/uart.c ****   {
 608              	 .loc 1 398 0
 609 007a 1A1C     	 mov r2,r3
 610              	.L45:
 611 007c 116B     	 ldr r1,[r2,#48]
 612 007e 134B     	 ldr r3,.L52+8
 613 0080 0029     	 cmp r1,#0
 614 0082 FBD1     	 bne .L45
 404:../PMSM_FOC/MCUInit/uart.c **** 
 615              	 .loc 1 404 0
 616 0084 9A6A     	 ldr r2,[r3,#40]
 617              	.LVL42:
 406:../PMSM_FOC/MCUInit/uart.c **** 
 618              	 .loc 1 406 0
 619 0086 D96A     	 ldr r1,[r3,#44]
 620              	.LVL43:
 621 0088 1204     	 lsl r2,r2,#16
 622              	.LVL44:
 409:../PMSM_FOC/MCUInit/uart.c **** 
 623              	 .loc 1 409 0
 624 008a 0904     	 lsl r1,r1,#16
 625              	.LVL45:
 626 008c 090C     	 lsr r1,r1,#16
 627 008e 1962     	 str r1,[r3,#32]
 412:../PMSM_FOC/MCUInit/uart.c **** 
 628              	 .loc 1 412 0
 629 0090 0A21     	 mov r1,#10
 630 0092 120C     	 lsr r2,r2,#16
 631 0094 5962     	 str r1,[r3,#36]
 415:../PMSM_FOC/MCUInit/uart.c **** 
 632              	 .loc 1 415 0
 633 0096 0B48     	 ldr r0,.L52
 634 0098 7731     	 add r1,r1,#119
 635 009a 3032     	 add r2,r2,#48
 636 009c FF31     	 add r1,r1,#255
 637 009e 4250     	 str r2,[r0,r1]
 638              	.L46:
 418:../PMSM_FOC/MCUInit/uart.c ****   {
 639              	 .loc 1 418 0
 640 00a0 196B     	 ldr r1,[r3,#48]
 641 00a2 0A4A     	 ldr r2,.L52+8
 642 00a4 0029     	 cmp r1,#0
 643 00a6 FBD1     	 bne .L46
 424:../PMSM_FOC/MCUInit/uart.c **** 
 644              	 .loc 1 424 0
 645 00a8 936A     	 ldr r3,[r2,#40]
 646              	.LVL46:
 427:../PMSM_FOC/MCUInit/uart.c **** 
 647              	 .loc 1 427 0
 648 00aa 0648     	 ldr r0,.L52
 649 00ac 1B04     	 lsl r3,r3,#16
 650              	.LVL47:
 651 00ae 1B0C     	 lsr r3,r3,#16
 652 00b0 8131     	 add r1,r1,#129
 653 00b2 FF31     	 add r1,r1,#255
 654 00b4 3033     	 add r3,r3,#48
 655 00b6 4350     	 str r3,[r0,r1]
 430:../PMSM_FOC/MCUInit/uart.c **** 
 656              	 .loc 1 430 0
 657 00b8 D36A     	 ldr r3,[r2,#44]
 658              	.LVL48:
 659              	.LBE13:
 660              	.LBE15:
 450:../PMSM_FOC/MCUInit/uart.c **** 
 451:../PMSM_FOC/MCUInit/uart.c **** } /* End of UART_TX_int16_t () */
 661              	 .loc 1 451 0
 662              	 
 663 00ba 1B04     	 lsl r3,r3,#16
 664              	.LVL49:
 665 00bc 1B0C     	 lsr r3,r3,#16
 666              	.LBB16:
 667              	.LBB14:
 433:../PMSM_FOC/MCUInit/uart.c **** 
 668              	 .loc 1 433 0
 669 00be 3033     	 add r3,r3,#48
 670 00c0 4350     	 str r3,[r0,r1]
 671              	.LBE14:
 672              	.LBE16:
 673              	 .loc 1 451 0
 674 00c2 7047     	 bx lr
 675              	.L53:
 676              	 .align 2
 677              	.L52:
 678 00c4 00020048 	 .word 1207960064
 679 00c8 04800000 	 .word 32772
 680 00cc 00000340 	 .word 1073938432
 681 00d0 0F270000 	 .word 9999
 682 00d4 10270000 	 .word 10000
 683              	 .cfi_endproc
 684              	.LFE205:
 686              	 .section .text.UART_TX_uint16_t_Hex,"ax",%progbits
 687              	 .align 2
 688              	 .global UART_TX_uint16_t_Hex
 689              	 .code 16
 690              	 .thumb_func
 692              	UART_TX_uint16_t_Hex:
 693              	.LFB206:
 452:../PMSM_FOC/MCUInit/uart.c **** 
 453:../PMSM_FOC/MCUInit/uart.c **** 
 454:../PMSM_FOC/MCUInit/uart.c **** /* Send one uint16_t hex integer through UART TX */
 455:../PMSM_FOC/MCUInit/uart.c **** void UART_TX_uint16_t_Hex(uint16_t Int_16_Hex)
 456:../PMSM_FOC/MCUInit/uart.c **** {
 694              	 .loc 1 456 0
 695              	 .cfi_startproc
 696              	.LVL50:
 457:../PMSM_FOC/MCUInit/uart.c ****   /* P1_4_reset ();                      //P1.4 output 0 for debug. For XMC1302_TSSOP38. */
 458:../PMSM_FOC/MCUInit/uart.c **** 
 459:../PMSM_FOC/MCUInit/uart.c ****   /*    UART_FIFO_BUFFER = '\t'; */
 460:../PMSM_FOC/MCUInit/uart.c ****   /*    UART_FIFO_BUFFER = '0';                    //Output prefix "0x" for hexadecimal (Hex). */
 461:../PMSM_FOC/MCUInit/uart.c ****   /*    UART_FIFO_BUFFER = 'x'; */
 462:../PMSM_FOC/MCUInit/uart.c ****   UART_FIFO_BUFFER = 'H';
 697              	 .loc 1 462 0
 698 0000 C023     	 mov r3,#192
 699 0002 4821     	 mov r1,#72
 700 0004 194A     	 ldr r2,.L63
 701 0006 5B00     	 lsl r3,r3,#1
 702 0008 D150     	 str r1,[r2,r3]
 463:../PMSM_FOC/MCUInit/uart.c **** 
 464:../PMSM_FOC/MCUInit/uart.c ****   register uint16_t Hex_4bits;
 465:../PMSM_FOC/MCUInit/uart.c **** 
 466:../PMSM_FOC/MCUInit/uart.c ****   Hex_4bits = (Int_16_Hex & 0xF000) >> 12;
 703              	 .loc 1 466 0
 704 000a 030B     	 lsr r3,r0,#12
 705              	.LVL51:
 467:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 468:../PMSM_FOC/MCUInit/uart.c ****   {
 469:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_09_TO_ASCII;
 470:../PMSM_FOC/MCUInit/uart.c ****   }
 471:../PMSM_FOC/MCUInit/uart.c ****   else
 472:../PMSM_FOC/MCUInit/uart.c ****   {
 473:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_AF_TO_ASCII;
 706              	 .loc 1 473 0
 707 000c 1A1C     	 mov r2,r3
 708 000e 3732     	 add r2,r2,#55
 467:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 709              	 .loc 1 467 0
 710 0010 092B     	 cmp r3,#9
 711 0012 01D8     	 bhi .L56
 469:../PMSM_FOC/MCUInit/uart.c ****   }
 712              	 .loc 1 469 0
 713 0014 3033     	 add r3,r3,#48
 714              	.LVL52:
 715 0016 1A1C     	 mov r2,r3
 716              	.LVL53:
 717              	.L56:
 474:../PMSM_FOC/MCUInit/uart.c ****   }
 475:../PMSM_FOC/MCUInit/uart.c ****   UART_FIFO_BUFFER = Hex_4bits; /* Put bits 12~15 to USIC Transmit FIFO Buffer. */
 718              	 .loc 1 475 0
 719 0018 C023     	 mov r3,#192
 720 001a 1449     	 ldr r1,.L63
 721 001c 5B00     	 lsl r3,r3,#1
 722 001e CA50     	 str r2,[r1,r3]
 476:../PMSM_FOC/MCUInit/uart.c **** 
 477:../PMSM_FOC/MCUInit/uart.c ****   Hex_4bits = (Int_16_Hex & 0x0F00) >> 8;
 723              	 .loc 1 477 0
 724 0020 0305     	 lsl r3,r0,#20
 725 0022 1B0F     	 lsr r3,r3,#28
 726 0024 99B2     	 uxth r1,r3
 727              	.LVL54:
 478:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 479:../PMSM_FOC/MCUInit/uart.c ****   {
 480:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_09_TO_ASCII;
 481:../PMSM_FOC/MCUInit/uart.c ****   }
 482:../PMSM_FOC/MCUInit/uart.c ****   else
 483:../PMSM_FOC/MCUInit/uart.c ****   {
 484:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_AF_TO_ASCII;
 728              	 .loc 1 484 0
 729 0026 0A1C     	 mov r2,r1
 730 0028 3732     	 add r2,r2,#55
 478:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 731              	 .loc 1 478 0
 732 002a 092B     	 cmp r3,#9
 733 002c 00DC     	 bgt .L58
 480:../PMSM_FOC/MCUInit/uart.c ****   }
 734              	 .loc 1 480 0
 735 002e 073A     	 sub r2,r2,#7
 736              	.LVL55:
 737              	.L58:
 485:../PMSM_FOC/MCUInit/uart.c ****   }
 486:../PMSM_FOC/MCUInit/uart.c ****   UART_FIFO_BUFFER = Hex_4bits; /* Put bits 8~11 to USIC Transmit FIFO Buffer. */
 738              	 .loc 1 486 0
 739 0030 C023     	 mov r3,#192
 740 0032 0E49     	 ldr r1,.L63
 741 0034 5B00     	 lsl r3,r3,#1
 742 0036 CA50     	 str r2,[r1,r3]
 487:../PMSM_FOC/MCUInit/uart.c **** 
 488:../PMSM_FOC/MCUInit/uart.c ****   Hex_4bits = (Int_16_Hex & 0x00F0) >> 4;
 743              	 .loc 1 488 0
 744 0038 0306     	 lsl r3,r0,#24
 745 003a 1B0F     	 lsr r3,r3,#28
 746 003c 99B2     	 uxth r1,r3
 747              	.LVL56:
 489:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 490:../PMSM_FOC/MCUInit/uart.c ****   {
 491:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_09_TO_ASCII;
 492:../PMSM_FOC/MCUInit/uart.c ****   }
 493:../PMSM_FOC/MCUInit/uart.c ****   else
 494:../PMSM_FOC/MCUInit/uart.c ****   {
 495:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_AF_TO_ASCII;
 748              	 .loc 1 495 0
 749 003e 0A1C     	 mov r2,r1
 750 0040 3732     	 add r2,r2,#55
 489:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 751              	 .loc 1 489 0
 752 0042 092B     	 cmp r3,#9
 753 0044 00DC     	 bgt .L60
 491:../PMSM_FOC/MCUInit/uart.c ****   }
 754              	 .loc 1 491 0
 755 0046 073A     	 sub r2,r2,#7
 756              	.LVL57:
 757              	.L60:
 496:../PMSM_FOC/MCUInit/uart.c ****   }
 497:../PMSM_FOC/MCUInit/uart.c ****   UART_FIFO_BUFFER = Hex_4bits; /* Put bits 4~7 to USIC Transmit FIFO Buffer. */
 758              	 .loc 1 497 0
 759 0048 C023     	 mov r3,#192
 760 004a 0849     	 ldr r1,.L63
 761 004c 5B00     	 lsl r3,r3,#1
 762 004e CA50     	 str r2,[r1,r3]
 498:../PMSM_FOC/MCUInit/uart.c **** 
 499:../PMSM_FOC/MCUInit/uart.c ****   Hex_4bits = (Int_16_Hex & 0x000F) >> 0;
 763              	 .loc 1 499 0
 764 0050 723B     	 sub r3,r3,#114
 765 0052 FF3B     	 sub r3,r3,#255
 766 0054 1840     	 and r0,r3
 767              	.LVL58:
 500:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 501:../PMSM_FOC/MCUInit/uart.c ****   {
 502:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_09_TO_ASCII;
 503:../PMSM_FOC/MCUInit/uart.c ****   }
 504:../PMSM_FOC/MCUInit/uart.c ****   else
 505:../PMSM_FOC/MCUInit/uart.c ****   {
 506:../PMSM_FOC/MCUInit/uart.c ****     Hex_4bits += DIFF_AF_TO_ASCII;
 768              	 .loc 1 506 0
 769 0056 031C     	 mov r3,r0
 770 0058 3733     	 add r3,r3,#55
 500:../PMSM_FOC/MCUInit/uart.c ****   if (Hex_4bits <= 9)
 771              	 .loc 1 500 0
 772 005a 0928     	 cmp r0,#9
 773 005c 00D8     	 bhi .L62
 502:../PMSM_FOC/MCUInit/uart.c ****   }
 774              	 .loc 1 502 0
 775 005e 073B     	 sub r3,r3,#7
 776              	.LVL59:
 777              	.L62:
 507:../PMSM_FOC/MCUInit/uart.c ****   }
 508:../PMSM_FOC/MCUInit/uart.c ****   UART_FIFO_BUFFER = Hex_4bits; /* Put bits 0~3 to USIC Transmit FIFO Buffer. */
 778              	 .loc 1 508 0
 779 0060 C022     	 mov r2,#192
 780 0062 0249     	 ldr r1,.L63
 781 0064 5200     	 lsl r2,r2,#1
 782 0066 8B50     	 str r3,[r1,r2]
 509:../PMSM_FOC/MCUInit/uart.c **** 
 510:../PMSM_FOC/MCUInit/uart.c ****   /* P1_4_set ();                        //P1.4 output 1 for debug. For XMC1302_TSSOP38. */
 511:../PMSM_FOC/MCUInit/uart.c **** 
 512:../PMSM_FOC/MCUInit/uart.c **** } /* End of UART_TX_uint16_t_Hex () */
 783              	 .loc 1 512 0
 784              	 
 785 0068 7047     	 bx lr
 786              	.L64:
 787 006a C046     	 .align 2
 788              	.L63:
 789 006c 00020048 	 .word 1207960064
 790              	 .cfi_endproc
 791              	.LFE206:
 793              	 .section .text.UART_RX,"ax",%progbits
 794              	 .align 2
 795              	 .global UART_RX
 796              	 .code 16
 797              	 .thumb_func
 799              	UART_RX:
 800              	.LFB207:
 513:../PMSM_FOC/MCUInit/uart.c **** 
 514:../PMSM_FOC/MCUInit/uart.c **** 
 515:../PMSM_FOC/MCUInit/uart.c **** /* Receive data through UART, by polling */
 516:../PMSM_FOC/MCUInit/uart.c **** void UART_RX(void)
 517:../PMSM_FOC/MCUInit/uart.c **** {
 801              	 .loc 1 517 0
 802              	 .cfi_startproc
 803 0000 38B5     	 push {r3,r4,r5,lr}
 804              	 .cfi_def_cfa_offset 16
 805              	 .cfi_offset 3,-16
 806              	 .cfi_offset 4,-12
 807              	 .cfi_offset 5,-8
 808              	 .cfi_offset 14,-4
 518:../PMSM_FOC/MCUInit/uart.c ****   if ((USIC0_CHX_TRBSR & 0x00000008) == 0)
 809              	 .loc 1 518 0
 810 0002 8A23     	 mov r3,#138
 811 0004 1D4A     	 ldr r2,.L78
 812 0006 5B00     	 lsl r3,r3,#1
 813 0008 D358     	 ldr r3,[r2,r3]
 814 000a 1B07     	 lsl r3,r3,#28
 815 000c 13D4     	 bmi .L66
 519:../PMSM_FOC/MCUInit/uart.c ****   {
 520:../PMSM_FOC/MCUInit/uart.c ****     /* REMPTY = 0, receive buffer is not empty. */
 521:../PMSM_FOC/MCUInit/uart.c ****     Motor.UART_Data = (USIC0_CHX_OUTR & 0x0000FFFF); /* Data received via UART. */
 816              	 .loc 1 521 0
 817 000e 8E23     	 mov r3,#142
 818 0010 5B00     	 lsl r3,r3,#1
 819 0012 D158     	 ldr r1,[r2,r3]
 820 0014 1A48     	 ldr r0,.L78+4
 821 0016 C03B     	 sub r3,r3,#192
 822 0018 C152     	 strh r1,[r0,r3]
 823              	.LVL60:
 824              	.LBB17:
 825              	.LBB18:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 826              	 .loc 1 310 0
 827 001a 0D24     	 mov r4,#13
 313:../PMSM_FOC/MCUInit/uart.c **** 	}
 828              	 .loc 1 313 0
 829 001c 0A20     	 mov r0,#10
 310:../PMSM_FOC/MCUInit/uart.c **** 
 830              	 .loc 1 310 0
 831 001e 2533     	 add r3,r3,#37
 832              	.LBE18:
 833              	.LBE17:
 522:../PMSM_FOC/MCUInit/uart.c **** 
 523:../PMSM_FOC/MCUInit/uart.c ****     UART_TX_Return_NewLine(0x02); /* Send carriage return, and new line. */
 524:../PMSM_FOC/MCUInit/uart.c ****     UART_FIFO_BUFFER = Motor.UART_Data; /* Put received data to USIC Transmit FIFO Buffer. */
 834              	 .loc 1 524 0
 835 0020 0904     	 lsl r1,r1,#16
 836              	.LBB21:
 837              	.LBB19:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 838              	 .loc 1 310 0
 839 0022 FF33     	 add r3,r3,#255
 840              	.LBE19:
 841              	.LBE21:
 842              	 .loc 1 524 0
 843 0024 090C     	 lsr r1,r1,#16
 844              	.LBB22:
 845              	.LBB20:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 846              	 .loc 1 310 0
 847 0026 D450     	 str r4,[r2,r3]
 313:../PMSM_FOC/MCUInit/uart.c **** 	}
 848              	 .loc 1 313 0
 849 0028 D050     	 str r0,[r2,r3]
 850              	.LVL61:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 851              	 .loc 1 310 0
 852 002a D450     	 str r4,[r2,r3]
 313:../PMSM_FOC/MCUInit/uart.c **** 	}
 853              	 .loc 1 313 0
 854 002c D050     	 str r0,[r2,r3]
 855              	.LVL62:
 856              	.LBE20:
 857              	.LBE22:
 858              	 .loc 1 524 0
 859 002e D150     	 str r1,[r2,r3]
 860              	.LVL63:
 861              	.LBB23:
 862              	.LBB24:
 310:../PMSM_FOC/MCUInit/uart.c **** 
 863              	 .loc 1 310 0
 864 0030 D450     	 str r4,[r2,r3]
 313:../PMSM_FOC/MCUInit/uart.c **** 	}
 865              	 .loc 1 313 0
 866 0032 D050     	 str r0,[r2,r3]
 867              	.LVL64:
 868              	.L65:
 869              	.LBE24:
 870              	.LBE23:
 525:../PMSM_FOC/MCUInit/uart.c ****     UART_TX_Return_NewLine(0x01); /* Send carriage return, and new line. */
 526:../PMSM_FOC/MCUInit/uart.c ****   }
 527:../PMSM_FOC/MCUInit/uart.c ****   else
 528:../PMSM_FOC/MCUInit/uart.c ****   {
 529:../PMSM_FOC/MCUInit/uart.c ****     Motor.UART_Debug_Counter++;
 530:../PMSM_FOC/MCUInit/uart.c **** 
 531:../PMSM_FOC/MCUInit/uart.c ****     #define UART_SPEED_UPDATE_RATE    (UART_RATE * 30U)	/* To determine frequency of UART speed upd
 532:../PMSM_FOC/MCUInit/uart.c ****     /* if (Motor.UART_Debug_Counter > UART_SPEED_UPDATE_RATE) { */
 533:../PMSM_FOC/MCUInit/uart.c ****     if ((Motor.UART_Debug_Counter > UART_SPEED_UPDATE_RATE) && (Motor.State != TRAP_PROTECTION))
 534:../PMSM_FOC/MCUInit/uart.c ****     {
 535:../PMSM_FOC/MCUInit/uart.c ****       Motor.UART_Debug_Counter = 0;
 536:../PMSM_FOC/MCUInit/uart.c **** 
 537:../PMSM_FOC/MCUInit/uart.c ****       UART_TX_String("\r\n rpm:");
 538:../PMSM_FOC/MCUInit/uart.c **** 
 539:../PMSM_FOC/MCUInit/uart.c ****       uint32_t Rpm_Speed;
 540:../PMSM_FOC/MCUInit/uart.c ****       Rpm_Speed = (Motor.Speed * SPEED_TO_RPM ) >> SCALE_SPEED_TO_RPM;
 541:../PMSM_FOC/MCUInit/uart.c ****       UART_TX_uint16_t(Rpm_Speed); /* Debug information, showing rotor speed in rpm. */
 542:../PMSM_FOC/MCUInit/uart.c **** 
 543:../PMSM_FOC/MCUInit/uart.c ****       /* UART_TX_String (".");                 // Debug information, showing MCU is running. */
 544:../PMSM_FOC/MCUInit/uart.c ****     }
 545:../PMSM_FOC/MCUInit/uart.c ****   }
 546:../PMSM_FOC/MCUInit/uart.c **** } /* End of UART_RX () */
 871              	 .loc 1 546 0
 872              	 
 873 0034 38BD     	 pop {r3,r4,r5,pc}
 874              	.L66:
 529:../PMSM_FOC/MCUInit/uart.c **** 
 875              	 .loc 1 529 0
 876 0036 124D     	 ldr r5,.L78+4
 877 0038 6B6D     	 ldr r3,[r5,#84]
 878 003a 0133     	 add r3,r3,#1
 879 003c 6B65     	 str r3,[r5,#84]
 533:../PMSM_FOC/MCUInit/uart.c ****     {
 880              	 .loc 1 533 0
 881 003e 5A2B     	 cmp r3,#90
 882 0040 F8D9     	 bls .L65
 533:../PMSM_FOC/MCUInit/uart.c ****     {
 883              	 .loc 1 533 0 is_stmt 0 discriminator 1
 884 0042 EB6A     	 ldr r3,[r5,#44]
 885 0044 092B     	 cmp r3,#9
 886 0046 F5D0     	 beq .L65
 887              	.LBB25:
 535:../PMSM_FOC/MCUInit/uart.c **** 
 888              	 .loc 1 535 0 is_stmt 1
 889 0048 0023     	 mov r3,#0
 890 004a 6B65     	 str r3,[r5,#84]
 891              	.LVL65:
 892 004c 0D4B     	 ldr r3,.L78+8
 893              	.LBB26:
 894              	.LBB27:
 287:../PMSM_FOC/MCUInit/uart.c **** 		S_Count ++;
 895              	 .loc 1 287 0
 896 004e C020     	 mov r0,#192
 284:../PMSM_FOC/MCUInit/uart.c **** 	{
 897              	 .loc 1 284 0
 898 0050 1C1C     	 mov r4,r3
 899              	.LBE27:
 900              	.LBE26:
 535:../PMSM_FOC/MCUInit/uart.c **** 
 901              	 .loc 1 535 0
 902 0052 0D21     	 mov r1,#13
 903              	.LBB29:
 904              	.LBB28:
 287:../PMSM_FOC/MCUInit/uart.c **** 		S_Count ++;
 905              	 .loc 1 287 0
 906 0054 4000     	 lsl r0,r0,#1
 284:../PMSM_FOC/MCUInit/uart.c **** 	{
 907              	 .loc 1 284 0
 908 0056 2034     	 add r4,r4,#32
 909 0058 01E0     	 b .L69
 910              	.LVL66:
 911              	.L77:
 912 005a A342     	 cmp r3,r4
 913 005c 04D0     	 beq .L68
 914              	.LVL67:
 915              	.L69:
 287:../PMSM_FOC/MCUInit/uart.c **** 		S_Count ++;
 916              	 .loc 1 287 0
 917 005e 1150     	 str r1,[r2,r0]
 289:../PMSM_FOC/MCUInit/uart.c **** 	}
 918              	 .loc 1 289 0
 919 0060 0133     	 add r3,r3,#1
 920              	.LVL68:
 284:../PMSM_FOC/MCUInit/uart.c **** 	{
 921              	 .loc 1 284 0
 922 0062 1978     	 ldrb r1,[r3]
 923 0064 0029     	 cmp r1,#0
 924 0066 F8D1     	 bne .L77
 925              	.L68:
 926              	.LVL69:
 927              	.LBE28:
 928              	.LBE29:
 540:../PMSM_FOC/MCUInit/uart.c ****       UART_TX_uint16_t(Rpm_Speed); /* Debug information, showing rotor speed in rpm. */
 929              	 .loc 1 540 0
 930 0068 AB68     	 ldr r3,[r5,#8]
 931              	.LVL70:
 932 006a D800     	 lsl r0,r3,#3
 933 006c C018     	 add r0,r0,r3
 934 006e 8301     	 lsl r3,r0,#6
 935 0070 C018     	 add r0,r0,r3
 936 0072 C00A     	 lsr r0,r0,#11
 541:../PMSM_FOC/MCUInit/uart.c **** 
 937              	 .loc 1 541 0
 938 0074 80B2     	 uxth r0,r0
 939 0076 FFF7FEFF 	 bl UART_TX_uint16_t
 940              	.LVL71:
 941 007a DBE7     	 b .L65
 942              	.L79:
 943              	 .align 2
 944              	.L78:
 945 007c 00020048 	 .word 1207960064
 946 0080 00000000 	 .word Motor
 947 0084 00000000 	 .word .LC2
 948              	.LBE25:
 949              	 .cfi_endproc
 950              	.LFE207:
 952              	 .section .rodata.str1.4,"aMS",%progbits,1
 953              	 .align 2
 954              	.LC2:
 955 0000 0D0A2072 	 .ascii "\015\012 rpm:\000"
 955      706D3A00 
 956              	 .text
 957              	.Letext0:
 958              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 959              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 960              	 .file 4 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 961              	 .file 5 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc/xmc1_gpio.h"
 962              	 .file 6 "../PMSM_FOC/MCUInit/..\\ControlModules\\..\\MIDSys\\pmsm_foc_pwmsvm.h"
 963              	 .file 7 "../PMSM_FOC/MCUInit/..\\ControlModules\\pmsm_foc_functions.h"
 964              	 .file 8 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 965              	 .file 9 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc/xmc_gpio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
    {standard input}:18     .text.UART_Init:00000000 $t
    {standard input}:23     .text.UART_Init:00000000 UART_Init
    {standard input}:185    .text.UART_Init:000000cc $d
    {standard input}:205    .text.UART_TX_String:00000000 $t
    {standard input}:210    .text.UART_TX_String:00000000 UART_TX_String
    {standard input}:253    .text.UART_TX_String:00000024 $d
    {standard input}:258    .text.UART_TX_Return_NewLine:00000000 $t
    {standard input}:263    .text.UART_TX_Return_NewLine:00000000 UART_TX_Return_NewLine
    {standard input}:307    .text.UART_TX_Return_NewLine:00000020 $d
    {standard input}:312    .text.UART_TX_uint16_t:00000000 $t
    {standard input}:317    .text.UART_TX_uint16_t:00000000 UART_TX_uint16_t
    {standard input}:474    .text.UART_TX_uint16_t:000000b0 $d
    {standard input}:483    .text.UART_TX_int16_t:00000000 $t
    {standard input}:488    .text.UART_TX_int16_t:00000000 UART_TX_int16_t
    {standard input}:678    .text.UART_TX_int16_t:000000c4 $d
    {standard input}:687    .text.UART_TX_uint16_t_Hex:00000000 $t
    {standard input}:692    .text.UART_TX_uint16_t_Hex:00000000 UART_TX_uint16_t_Hex
    {standard input}:789    .text.UART_TX_uint16_t_Hex:0000006c $d
    {standard input}:794    .text.UART_RX:00000000 $t
    {standard input}:799    .text.UART_RX:00000000 UART_RX
    {standard input}:945    .text.UART_RX:0000007c $d
    {standard input}:953    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_GPIO_SetMode
Motor
