   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_VADC_GLOBAL_EnableModule
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_VADC_GLOBAL_EnableModule:
  24              	.LFB121:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2015-10-09
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.0 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  73:../Libraries/XMCLib/src/xmc_vadc.c **** 
  74:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  78:../Libraries/XMCLib/src/xmc_vadc.c **** 
  79:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  82:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
  83:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
  84:../Libraries/XMCLib/src/xmc_vadc.c **** 
  85:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
  86:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
  87:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  90:../Libraries/XMCLib/src/xmc_vadc.c **** 
  91:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  94:../Libraries/XMCLib/src/xmc_vadc.c **** 
  95:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c **** 
  99:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 100:../Libraries/XMCLib/src/xmc_vadc.c **** 
 101:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 102:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 103:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 104:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 105:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 106:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 107:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 109:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 110:../Libraries/XMCLib/src/xmc_vadc.c **** 
 111:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 112:../Libraries/XMCLib/src/xmc_vadc.c **** 
 113:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 115:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 116:../Libraries/XMCLib/src/xmc_vadc.c **** 
 117:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 119:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 122:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 123:../Libraries/XMCLib/src/xmc_vadc.c **** {
  26              	 .loc 1 123 0
  27              	 .cfi_startproc
 124:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 125:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 126:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 127:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 128:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 129:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 130:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 131:../Libraries/XMCLib/src/xmc_vadc.c **** 
 132:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 133:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
  28              	 .loc 1 133 0
  29 0000 FF22     	 mov r2,#255
 123:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
  30              	 .loc 1 123 0
  31 0002 08B5     	 push {r3,lr}
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 3,-8
  34              	 .cfi_offset 14,-4
  35              	 .loc 1 133 0
  36 0004 024B     	 ldr r3,.L2
 134:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 135:../Libraries/XMCLib/src/xmc_vadc.c **** 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 137:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
  37              	 .loc 1 137 0
  38 0006 0120     	 mov r0,#1
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
  39              	 .loc 1 133 0
  40 0008 1A60     	 str r2,[r3]
  41              	 .loc 1 137 0
  42 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
  43              	.LVL0:
 138:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 139:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 141:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 142:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 143:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 144:../Libraries/XMCLib/src/xmc_vadc.c **** }
  44              	 .loc 1 144 0
  45              	 
  46 000e 08BD     	 pop {r3,pc}
  47              	.L3:
  48              	 .align 2
  49              	.L2:
  50 0010 00050140 	 .word 1073808640
  51              	 .cfi_endproc
  52              	.LFE121:
  54              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
  55              	 .align 2
  56              	 .global XMC_VADC_GLOBAL_DisableModule
  57              	 .code 16
  58              	 .thumb_func
  60              	XMC_VADC_GLOBAL_DisableModule:
  61              	.LFB122:
 145:../Libraries/XMCLib/src/xmc_vadc.c **** 
 146:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 147:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 148:../Libraries/XMCLib/src/xmc_vadc.c **** {
  62              	 .loc 1 148 0
  63              	 .cfi_startproc
  64 0000 08B5     	 push {r3,lr}
  65              	 .cfi_def_cfa_offset 8
  66              	 .cfi_offset 3,-8
  67              	 .cfi_offset 14,-4
 149:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 150:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 151:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 152:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 153:../Libraries/XMCLib/src/xmc_vadc.c **** 
 154:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 155:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
  68              	 .loc 1 155 0
  69 0002 0120     	 mov r0,#1
  70 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
  71              	.LVL1:
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 157:../Libraries/XMCLib/src/xmc_vadc.c **** 
 158:../Libraries/XMCLib/src/xmc_vadc.c **** }
  72              	 .loc 1 158 0
  73              	 
  74 0008 08BD     	 pop {r3,pc}
  75              	 .cfi_endproc
  76              	.LFE122:
  78 000a C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
  79              	 .align 2
  80              	 .global XMC_VADC_GLOBAL_Init
  81              	 .code 16
  82              	 .thumb_func
  84              	XMC_VADC_GLOBAL_Init:
  85              	.LFB123:
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** 
 161:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 162:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 163:../Libraries/XMCLib/src/xmc_vadc.c **** {
  86              	 .loc 1 163 0
  87              	 .cfi_startproc
  88              	.LVL2:
  89              	.LBB48:
  90              	.LBB49:
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
  91              	 .loc 1 133 0
  92 0000 FF22     	 mov r2,#255
  93              	.LBE49:
  94              	.LBE48:
  95              	 .loc 1 163 0
  96 0002 38B5     	 push {r3,r4,r5,lr}
  97              	 .cfi_def_cfa_offset 16
  98              	 .cfi_offset 3,-16
  99              	 .cfi_offset 4,-12
 100              	 .cfi_offset 5,-8
 101              	 .cfi_offset 14,-4
 102              	 .loc 1 163 0
 103 0004 0D1C     	 mov r5,r1
 104 0006 041C     	 mov r4,r0
 105              	.LBB51:
 106              	.LBB50:
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 107              	 .loc 1 133 0
 108 0008 0D4B     	 ldr r3,.L6
 137:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 109              	 .loc 1 137 0
 110 000a 0120     	 mov r0,#1
 111              	.LVL3:
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 112              	 .loc 1 133 0
 113 000c 1A60     	 str r2,[r3]
 137:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 114              	 .loc 1 137 0
 115 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 116              	.LVL4:
 117              	.LBE50:
 118              	.LBE51:
 164:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 165:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 166:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 167:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 168:../Libraries/XMCLib/src/xmc_vadc.c **** 
 169:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 170:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 171:../Libraries/XMCLib/src/xmc_vadc.c **** 
 172:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 119              	 .loc 1 172 0
 120 0012 6B69     	 ldr r3,[r5,#20]
 173:../Libraries/XMCLib/src/xmc_vadc.c **** 
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 175:../Libraries/XMCLib/src/xmc_vadc.c **** 
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 177:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 178:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 181:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 182:../Libraries/XMCLib/src/xmc_vadc.c **** 
 183:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 184:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 185:../Libraries/XMCLib/src/xmc_vadc.c **** 
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 188:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 189:../Libraries/XMCLib/src/xmc_vadc.c **** 
 190:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 191:../Libraries/XMCLib/src/xmc_vadc.c **** 
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 193:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 194:../Libraries/XMCLib/src/xmc_vadc.c **** 
 195:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 196:../Libraries/XMCLib/src/xmc_vadc.c **** 
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 198:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 199:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select Internal reference Upper suppy range*/
 200:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG |= SHS_SHSCFG_SCWC_Msk |(2 <<SHS_SHSCFG_AREF_Pos);
 201:../Libraries/XMCLib/src/xmc_vadc.c **** 
 202:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 203:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 209:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 210:../Libraries/XMCLib/src/xmc_vadc.c **** 
 211:../Libraries/XMCLib/src/xmc_vadc.c **** }
 121              	 .loc 1 211 0
 122              	 
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 123              	 .loc 1 172 0
 124 0014 2360     	 str r3,[r4]
 177:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 125              	 .loc 1 177 0
 126 0016 8023     	 mov r3,#128
 127 0018 6A68     	 ldr r2,[r5,#4]
 128 001a 1B02     	 lsl r3,r3,#8
 129 001c 1343     	 orr r3,r2
 130 001e 8022     	 mov r2,#128
 131 0020 A350     	 str r3,[r4,r2]
 181:../Libraries/XMCLib/src/xmc_vadc.c **** 
 132              	 .loc 1 181 0
 133 0022 A023     	 mov r3,#160
 134 0024 AA68     	 ldr r2,[r5,#8]
 135 0026 E250     	 str r2,[r4,r3]
 184:../Libraries/XMCLib/src/xmc_vadc.c **** 
 136              	 .loc 1 184 0
 137 0028 EA68     	 ldr r2,[r5,#12]
 138 002a 0433     	 add r3,r3,#4
 139 002c E250     	 str r2,[r4,r3]
 188:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140              	 .loc 1 188 0
 141 002e 2A69     	 ldr r2,[r5,#16]
 142 0030 DD33     	 add r3,r3,#221
 143 0032 FF33     	 add r3,r3,#255
 144 0034 E250     	 str r2,[r4,r3]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 145              	 .loc 1 193 0
 146 0036 2A68     	 ldr r2,[r5]
 147 0038 C93B     	 sub r3,r3,#201
 148 003a FF3B     	 sub r3,r3,#255
 149 003c E250     	 str r2,[r4,r3]
 150              	.LVL5:
 151              	.LVL6:
 152              	 .loc 1 211 0
 153 003e 38BD     	 pop {r3,r4,r5,pc}
 154              	.L7:
 155              	 .align 2
 156              	.L6:
 157 0040 00050140 	 .word 1073808640
 158              	 .cfi_endproc
 159              	.LFE123:
 161              	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 162              	 .align 2
 163              	 .global XMC_VADC_GLOBAL_InputClassInit
 164              	 .code 16
 165              	 .thumb_func
 167              	XMC_VADC_GLOBAL_InputClassInit:
 168              	.LFB124:
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 214:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 215:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 216:../Libraries/XMCLib/src/xmc_vadc.c **** {
 169              	 .loc 1 216 0
 170              	 .cfi_startproc
 171              	.LVL7:
 217:../Libraries/XMCLib/src/xmc_vadc.c **** 
 218:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 219:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 221:../Libraries/XMCLib/src/xmc_vadc.c **** 
 222:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 223:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 172              	 .loc 1 223 0
 173 0000 002A     	 cmp r2,#0
 174 0002 05D0     	 beq .L12
 224:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 225:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 226:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 227:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 228:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 229:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 231:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 232:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 175              	 .loc 1 232 0
 176 0004 054A     	 ldr r2,.L13
 177              	.LVL8:
 178 0006 2833     	 add r3,r3,#40
 179              	.LVL9:
 180 0008 1140     	 and r1,r2
 181              	.LVL10:
 182 000a 9B00     	 lsl r3,r3,#2
 183              	.LVL11:
 184 000c 1950     	 str r1,[r3,r0]
 185              	.L8:
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 234:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 235:../Libraries/XMCLib/src/xmc_vadc.c **** }
 186              	 .loc 1 235 0
 187              	 
 188 000e 7047     	 bx lr
 189              	.LVL12:
 190              	.L12:
 226:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 191              	 .loc 1 226 0
 192 0010 034A     	 ldr r2,.L13+4
 193              	.LVL13:
 194 0012 2833     	 add r3,r3,#40
 195              	.LVL14:
 196 0014 1140     	 and r1,r2
 197              	.LVL15:
 198 0016 9B00     	 lsl r3,r3,#2
 199              	.LVL16:
 200 0018 1950     	 str r1,[r3,r0]
 201 001a F8E7     	 b .L8
 202              	.L14:
 203              	 .align 2
 204              	.L13:
 205 001c 00001F07 	 .word 119472128
 206 0020 1F070000 	 .word 1823
 207              	 .cfi_endproc
 208              	.LFE124:
 210              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 211              	 .align 2
 212              	 .global XMC_VADC_GLOBAL_StartupCalibration
 213              	 .code 16
 214              	 .thumb_func
 216              	XMC_VADC_GLOBAL_StartupCalibration:
 217              	.LFB125:
 236:../Libraries/XMCLib/src/xmc_vadc.c **** 
 237:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 238:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 239:../Libraries/XMCLib/src/xmc_vadc.c **** {
 218              	 .loc 1 239 0
 219              	 .cfi_startproc
 220              	.LVL17:
 240:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 242:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 243:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 244:../Libraries/XMCLib/src/xmc_vadc.c ****   
 245:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 246:../Libraries/XMCLib/src/xmc_vadc.c **** 
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 221              	 .loc 1 247 0
 222 0000 8023     	 mov r3,#128
 223 0002 8021     	 mov r1,#128
 224 0004 C258     	 ldr r2,[r0,r3]
 225 0006 0906     	 lsl r1,r1,#24
 226 0008 0A43     	 orr r2,r1
 227 000a C250     	 str r2,[r0,r3]
 228              	.LVL18:
 248:../Libraries/XMCLib/src/xmc_vadc.c **** 
 249:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 250:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 253:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 254:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 229              	 .loc 1 254 0
 230 000c 0C4A     	 ldr r2,.L30
 231 000e D158     	 ldr r1,[r2,r3]
 232 0010 C023     	 mov r3,#192
 233 0012 9B02     	 lsl r3,r3,#10
 234 0014 1942     	 tst r1,r3
 235 0016 05D0     	 beq .L16
 255:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 256:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 257:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 236              	 .loc 1 257 0
 237 0018 8021     	 mov r1,#128
 238 001a 8020     	 mov r0,#128
 239              	.LVL19:
 240 001c 4905     	 lsl r1,r1,#21
 241              	.L25:
 242 001e 1358     	 ldr r3,[r2,r0]
 243 0020 0B42     	 tst r3,r1
 244 0022 FCD1     	 bne .L25
 245              	.L16:
 246              	.LVL20:
 254:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 247              	 .loc 1 254 0
 248 0024 8023     	 mov r3,#128
 249 0026 074A     	 ldr r2,.L30+4
 250 0028 D158     	 ldr r1,[r2,r3]
 251 002a C023     	 mov r3,#192
 252 002c 9B02     	 lsl r3,r3,#10
 253 002e 1942     	 tst r1,r3
 254 0030 05D0     	 beq .L15
 255              	 .loc 1 257 0
 256 0032 8021     	 mov r1,#128
 257 0034 8020     	 mov r0,#128
 258 0036 4905     	 lsl r1,r1,#21
 259              	.L24:
 260 0038 1358     	 ldr r3,[r2,r0]
 261 003a 0B42     	 tst r3,r1
 262 003c FCD1     	 bne .L24
 263              	.L15:
 258:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 259:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 260:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 261:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 262:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 263:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 265:../Libraries/XMCLib/src/xmc_vadc.c ****   while( ( (SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) == XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 267:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 268:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 269:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 270:../Libraries/XMCLib/src/xmc_vadc.c **** }
 264              	 .loc 1 270 0
 265              	 
 266 003e 7047     	 bx lr
 267              	.L31:
 268              	 .align 2
 269              	.L30:
 270 0040 00040348 	 .word 1208157184
 271 0044 00080348 	 .word 1208158208
 272              	 .cfi_endproc
 273              	.LFE125:
 275              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 276              	 .align 2
 277              	 .global XMC_VADC_GLOBAL_SetBoundaries
 278              	 .code 16
 279              	 .thumb_func
 281              	XMC_VADC_GLOBAL_SetBoundaries:
 282              	.LFB126:
 271:../Libraries/XMCLib/src/xmc_vadc.c **** 
 272:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 273:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 274:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 275:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 276:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 277:../Libraries/XMCLib/src/xmc_vadc.c **** {
 283              	 .loc 1 277 0
 284              	 .cfi_startproc
 285              	.LVL21:
 278:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 279:../Libraries/XMCLib/src/xmc_vadc.c **** 
 280:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 281:../Libraries/XMCLib/src/xmc_vadc.c **** 
 282:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 284:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 285:../Libraries/XMCLib/src/xmc_vadc.c **** 
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 286              	 .loc 1 286 0
 287 0000 B823     	 mov r3,#184
 284:../Libraries/XMCLib/src/xmc_vadc.c **** 
 288              	 .loc 1 284 0
 289 0002 1204     	 lsl r2,r2,#16
 290              	.LVL22:
 291 0004 1143     	 orr r1,r2
 292              	.LVL23:
 293              	 .loc 1 286 0
 294 0006 C150     	 str r1,[r0,r3]
 287:../Libraries/XMCLib/src/xmc_vadc.c **** }
 295              	 .loc 1 287 0
 296              	 
 297 0008 7047     	 bx lr
 298              	 .cfi_endproc
 299              	.LFE126:
 301 000a C046     	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 302              	 .align 2
 303              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 304              	 .code 16
 305              	 .thumb_func
 307              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 308              	.LFB127:
 288:../Libraries/XMCLib/src/xmc_vadc.c **** 
 289:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 290:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 291:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 292:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 293:../Libraries/XMCLib/src/xmc_vadc.c **** {
 309              	 .loc 1 293 0
 310              	 .cfi_startproc
 311              	.LVL24:
 294:../Libraries/XMCLib/src/xmc_vadc.c **** 
 295:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 296:../Libraries/XMCLib/src/xmc_vadc.c **** 
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 298:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 299:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 300:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 301:../Libraries/XMCLib/src/xmc_vadc.c **** 
 302:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 312              	 .loc 1 303 0
 313 0000 B823     	 mov r3,#184
 314 0002 C358     	 ldr r3,[r0,r3]
 315              	.LVL25:
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 316              	 .loc 1 305 0
 317 0004 0229     	 cmp r1,#2
 318 0006 09D0     	 beq .L36
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 307:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 308:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 310:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 319              	 .loc 1 310 0
 320 0008 0329     	 cmp r1,#3
 321 000a 02D0     	 beq .L37
 322              	.LVL26:
 323              	.L35:
 311:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 312:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 313:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 315:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 316:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 317:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 319:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 324              	 .loc 1 319 0
 325 000c B822     	 mov r2,#184
 320:../Libraries/XMCLib/src/xmc_vadc.c **** 
 321:../Libraries/XMCLib/src/xmc_vadc.c **** }
 326              	 .loc 1 321 0
 327              	 
 319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328              	 .loc 1 319 0
 329 000e 8350     	 str r3,[r0,r2]
 330              	 .loc 1 321 0
 331 0010 7047     	 bx lr
 332              	.LVL27:
 333              	.L37:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 334              	 .loc 1 312 0
 335 0012 0449     	 ldr r1,.L38
 336              	.LVL28:
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 337              	 .loc 1 313 0
 338 0014 1204     	 lsl r2,r2,#16
 339              	.LVL29:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 340              	 .loc 1 312 0
 341 0016 0B40     	 and r3,r1
 342              	.LVL30:
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 343              	 .loc 1 313 0
 344 0018 1343     	 orr r3,r2
 345              	.LVL31:
 346 001a F7E7     	 b .L35
 347              	.LVL32:
 348              	.L36:
 307:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 349              	 .loc 1 307 0
 350 001c 1B0B     	 lsr r3,r3,#12
 351              	.LVL33:
 352 001e 1B03     	 lsl r3,r3,#12
 353              	.LVL34:
 308:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 354              	 .loc 1 308 0
 355 0020 1343     	 orr r3,r2
 356              	.LVL35:
 357 0022 F3E7     	 b .L35
 358              	.L39:
 359              	 .align 2
 360              	.L38:
 361 0024 FFFF00F0 	 .word -268369921
 362              	 .cfi_endproc
 363              	.LFE127:
 365              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 366              	 .align 2
 367              	 .global XMC_VADC_GLOBAL_SetCompareValue
 368              	 .code 16
 369              	 .thumb_func
 371              	XMC_VADC_GLOBAL_SetCompareValue:
 372              	.LFB128:
 322:../Libraries/XMCLib/src/xmc_vadc.c **** 
 323:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 324:../Libraries/XMCLib/src/xmc_vadc.c **** 
 325:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 326:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 327:../Libraries/XMCLib/src/xmc_vadc.c **** {
 373              	 .loc 1 327 0
 374              	 .cfi_startproc
 375              	.LVL36:
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 329:../Libraries/XMCLib/src/xmc_vadc.c **** 
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 376              	 .loc 1 330 0
 377 0000 C022     	 mov r2,#192
 378 0002 9200     	 lsl r2,r2,#2
 379 0004 8358     	 ldr r3,[r0,r2]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 380              	 .loc 1 331 0
 381 0006 8900     	 lsl r1,r1,#2
 382              	.LVL37:
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 383              	 .loc 1 330 0
 384 0008 1B0C     	 lsr r3,r3,#16
 385 000a 1B04     	 lsl r3,r3,#16
 386 000c 8350     	 str r3,[r0,r2]
 387              	 .loc 1 331 0
 388 000e 8358     	 ldr r3,[r0,r2]
 332:../Libraries/XMCLib/src/xmc_vadc.c **** }
 389              	 .loc 1 332 0
 390              	 
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 391              	 .loc 1 331 0
 392 0010 1943     	 orr r1,r3
 393 0012 8150     	 str r1,[r0,r2]
 394              	 .loc 1 332 0
 395 0014 7047     	 bx lr
 396              	 .cfi_endproc
 397              	.LFE128:
 399 0016 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 400              	 .align 2
 401              	 .global XMC_VADC_GLOBAL_GetCompareResult
 402              	 .code 16
 403              	 .thumb_func
 405              	XMC_VADC_GLOBAL_GetCompareResult:
 406              	.LFB129:
 333:../Libraries/XMCLib/src/xmc_vadc.c **** 
 334:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 335:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 336:../Libraries/XMCLib/src/xmc_vadc.c **** {
 407              	 .loc 1 336 0
 408              	 .cfi_startproc
 409              	.LVL38:
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 339:../Libraries/XMCLib/src/xmc_vadc.c **** 
 340:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 341:../Libraries/XMCLib/src/xmc_vadc.c **** 
 342:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 410              	 .loc 1 342 0
 411 0000 C023     	 mov r3,#192
 412 0002 9B00     	 lsl r3,r3,#2
 413 0004 C358     	 ldr r3,[r0,r3]
 414              	.LVL39:
 343:../Libraries/XMCLib/src/xmc_vadc.c **** 
 344:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 346:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 348:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 350:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 415              	 .loc 1 350 0
 416 0006 0220     	 mov r0,#2
 417              	.LVL40:
 344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 418              	 .loc 1 344 0
 419 0008 002B     	 cmp r3,#0
 420 000a 00DB     	 blt .L44
 421              	.LVL41:
 422              	.L42:
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 354:../Libraries/XMCLib/src/xmc_vadc.c **** }
 423              	 .loc 1 354 0
 424              	 
 425 000c 7047     	 bx lr
 426              	.LVL42:
 427              	.L44:
 346:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 428              	 .loc 1 346 0
 429 000e 5B00     	 lsl r3,r3,#1
 430              	.LVL43:
 431 0010 D80F     	 lsr r0,r3,#31
 432              	.LVL44:
 433 0012 FBE7     	 b .L42
 434              	 .cfi_endproc
 435              	.LFE129:
 437              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 438              	 .align 2
 439              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 440              	 .code 16
 441              	 .thumb_func
 443              	XMC_VADC_GLOBAL_BindGroupToEMux:
 444              	.LFB130:
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 357:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 358:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 359:../Libraries/XMCLib/src/xmc_vadc.c **** {
 445              	 .loc 1 359 0
 446              	 .cfi_startproc
 447              	.LVL45:
 448 0000 30B5     	 push {r4,r5,lr}
 449              	 .cfi_def_cfa_offset 12
 450              	 .cfi_offset 4,-12
 451              	 .cfi_offset 5,-8
 452              	 .cfi_offset 14,-4
 360:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 365:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 453              	 .loc 1 367 0
 454 0002 0029     	 cmp r1,#0
 455 0004 0CD0     	 beq .L47
 456 0006 F121     	 mov r1,#241
 457              	.LVL46:
 458 0008 0424     	 mov r4,#4
 459 000a 4942     	 neg r1,r1
 460              	.L46:
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 369:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 370:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 373:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 374:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 375:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 377:../Libraries/XMCLib/src/xmc_vadc.c **** 
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 461              	 .loc 1 378 0
 462 000c FC23     	 mov r3,#252
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 463              	 .loc 1 379 0
 464 000e A240     	 lsl r2,r2,r4
 465              	.LVL47:
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 466              	 .loc 1 378 0
 467 0010 9B00     	 lsl r3,r3,#2
 468 0012 C558     	 ldr r5,[r0,r3]
 380:../Libraries/XMCLib/src/xmc_vadc.c **** 
 381:../Libraries/XMCLib/src/xmc_vadc.c **** }
 469              	 .loc 1 381 0
 470              	 
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 471              	 .loc 1 378 0
 472 0014 2940     	 and r1,r5
 473 0016 C150     	 str r1,[r0,r3]
 379:../Libraries/XMCLib/src/xmc_vadc.c **** 
 474              	 .loc 1 379 0
 475 0018 C158     	 ldr r1,[r0,r3]
 476 001a 0A43     	 orr r2,r1
 477 001c C250     	 str r2,[r0,r3]
 478              	 .loc 1 381 0
 479 001e 30BD     	 pop {r4,r5,pc}
 480              	.LVL48:
 481              	.L47:
 482 0020 1021     	 mov r1,#16
 483              	.LVL49:
 484 0022 0024     	 mov r4,#0
 485 0024 4942     	 neg r1,r1
 486 0026 F1E7     	 b .L46
 487              	 .cfi_endproc
 488              	.LFE130:
 490              	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 497              	.LFB131:
 382:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 383:../Libraries/XMCLib/src/xmc_vadc.c **** 
 384:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 385:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 386:../Libraries/XMCLib/src/xmc_vadc.c **** {
 498              	 .loc 1 386 0
 499              	 .cfi_startproc
 500              	.LVL50:
 501 0000 10B5     	 push {r4,lr}
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 4,-8
 504              	 .cfi_offset 14,-4
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 388:../Libraries/XMCLib/src/xmc_vadc.c ****   
 389:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 391:../Libraries/XMCLib/src/xmc_vadc.c **** 
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 505              	 .loc 1 392 0
 506 0002 0329     	 cmp r1,#3
 507 0004 00D9     	 bls .L50
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 394:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 508              	 .loc 1 394 0
 509 0006 0439     	 sub r1,r1,#4
 510              	.LVL51:
 511              	.L50:
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 397:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 398:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 400:../Libraries/XMCLib/src/xmc_vadc.c **** 
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 512              	 .loc 1 401 0
 513 0008 A023     	 mov r3,#160
 514 000a 5B00     	 lsl r3,r3,#1
 515 000c C458     	 ldr r4,[r0,r3]
 516 000e 044A     	 ldr r2,.L51
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 517              	 .loc 1 402 0
 518 0010 0904     	 lsl r1,r1,#16
 519              	.LVL52:
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 520              	 .loc 1 401 0
 521 0012 2240     	 and r2,r4
 522 0014 C250     	 str r2,[r0,r3]
 523              	 .loc 1 402 0
 524 0016 C258     	 ldr r2,[r0,r3]
 403:../Libraries/XMCLib/src/xmc_vadc.c **** }
 525              	 .loc 1 403 0
 526              	 
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 527              	 .loc 1 402 0
 528 0018 1143     	 orr r1,r2
 529 001a C150     	 str r1,[r0,r3]
 530              	 .loc 1 403 0
 531 001c 10BD     	 pop {r4,pc}
 532              	.L52:
 533 001e C046     	 .align 2
 534              	.L51:
 535 0020 FFFFF0FF 	 .word -983041
 536              	 .cfi_endproc
 537              	.LFE131:
 539              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 540              	 .align 2
 541              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 542              	 .code 16
 543              	 .thumb_func
 545              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 546              	.LFB132:
 404:../Libraries/XMCLib/src/xmc_vadc.c **** 
 405:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 406:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 407:../Libraries/XMCLib/src/xmc_vadc.c **** {
 547              	 .loc 1 407 0
 548              	 .cfi_startproc
 549              	.LVL53:
 550 0000 10B5     	 push {r4,lr}
 551              	 .cfi_def_cfa_offset 8
 552              	 .cfi_offset 4,-8
 553              	 .cfi_offset 14,-4
 408:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 409:../Libraries/XMCLib/src/xmc_vadc.c ****   
 410:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 411:../Libraries/XMCLib/src/xmc_vadc.c **** 
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 554              	 .loc 1 412 0
 555 0002 0329     	 cmp r1,#3
 556 0004 00D9     	 bls .L55
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 414:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 557              	 .loc 1 414 0
 558 0006 0439     	 sub r1,r1,#4
 559              	.LVL54:
 560              	.L55:
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 417:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 418:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 420:../Libraries/XMCLib/src/xmc_vadc.c **** 
 421:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 561              	 .loc 1 421 0
 562 0008 A023     	 mov r3,#160
 563 000a 0F24     	 mov r4,#15
 564 000c 5B00     	 lsl r3,r3,#1
 565 000e C258     	 ldr r2,[r0,r3]
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 423:../Libraries/XMCLib/src/xmc_vadc.c **** }
 566              	 .loc 1 423 0
 567              	 
 421:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 568              	 .loc 1 421 0
 569 0010 A243     	 bic r2,r4
 570 0012 C250     	 str r2,[r0,r3]
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 571              	 .loc 1 422 0
 572 0014 C258     	 ldr r2,[r0,r3]
 573 0016 1143     	 orr r1,r2
 574              	.LVL55:
 575 0018 C150     	 str r1,[r0,r3]
 576              	 .loc 1 423 0
 577 001a 10BD     	 pop {r4,pc}
 578              	 .cfi_endproc
 579              	.LFE132:
 581              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 582              	 .align 2
 583              	 .global XMC_VADC_GROUP_Init
 584              	 .code 16
 585              	 .thumb_func
 587              	XMC_VADC_GROUP_Init:
 588              	.LFB133:
 424:../Libraries/XMCLib/src/xmc_vadc.c **** 
 425:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 426:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 427:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 428:../Libraries/XMCLib/src/xmc_vadc.c **** {
 589              	 .loc 1 428 0
 590              	 .cfi_startproc
 591              	.LVL56:
 592              	.LBB52:
 593              	.LBB53:
 429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 430:../Libraries/XMCLib/src/xmc_vadc.c **** 
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 433:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 436:../Libraries/XMCLib/src/xmc_vadc.c **** 
 437:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 438:../Libraries/XMCLib/src/xmc_vadc.c **** 
 439:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 440:../Libraries/XMCLib/src/xmc_vadc.c **** 
 441:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c **** }
 445:../Libraries/XMCLib/src/xmc_vadc.c **** 
 446:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 447:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 448:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 449:../Libraries/XMCLib/src/xmc_vadc.c **** {
 450:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 451:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 457:../Libraries/XMCLib/src/xmc_vadc.c **** 
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 461:../Libraries/XMCLib/src/xmc_vadc.c **** 
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 463:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 464:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 465:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 466:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 467:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 468:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 469:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 470:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 471:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 473:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 476:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 477:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 478:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 479:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 480:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 482:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 483:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 484:../Libraries/XMCLib/src/xmc_vadc.c **** 
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 594              	 .loc 1 486 0
 595 0000 A023     	 mov r3,#160
 596 0002 C258     	 ldr r2,[r0,r3]
 597              	.LVL57:
 598 0004 9C46     	 mov ip,r3
 487:../Libraries/XMCLib/src/xmc_vadc.c **** 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 599              	 .loc 1 489 0
 600 0006 304B     	 ldr r3,.L57
 601              	.LBE53:
 602              	.LBE52:
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 603              	 .loc 1 428 0
 604 0008 F0B5     	 push {r4,r5,r6,r7,lr}
 605              	 .cfi_def_cfa_offset 20
 606              	 .cfi_offset 4,-20
 607              	 .cfi_offset 5,-16
 608              	 .cfi_offset 6,-12
 609              	 .cfi_offset 7,-8
 610              	 .cfi_offset 14,-4
 611              	.LBB56:
 612              	.LBB54:
 613              	 .loc 1 489 0
 614 000a 1A40     	 and r2,r3
 615              	.LVL58:
 616 000c 141C     	 mov r4,r2
 617              	.LVL59:
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 618              	 .loc 1 491 0
 619 000e 1F27     	 mov r7,#31
 620 0010 4A79     	 ldrb r2,[r1,#5]
 621              	.LVL60:
 622              	.LBE54:
 623              	.LBE56:
 624              	.LBB57:
 625              	.LBB58:
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 626              	 .loc 1 489 0
 627 0012 2E4D     	 ldr r5,.L57+4
 628 0014 5207     	 lsl r2,r2,#29
 629              	.LBE58:
 630              	.LBE57:
 631              	.LBB61:
 632              	.LBB55:
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 633              	 .loc 1 490 0
 634 0016 520D     	 lsr r2,r2,#21
 635 0018 2243     	 orr r2,r4
 636              	.LVL61:
 637 001a 0C79     	 ldrb r4,[r1,#4]
 638              	 .loc 1 491 0
 639 001c BA43     	 bic r2,r7
 640              	.LVL62:
 641 001e E406     	 lsl r4,r4,#27
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 642              	 .loc 1 472 0
 643 0020 E40E     	 lsr r4,r4,#27
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 644              	 .loc 1 492 0
 645 0022 2243     	 orr r2,r4
 646              	.LVL63:
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 647              	 .loc 1 493 0
 648 0024 6446     	 mov r4,ip
 649 0026 0251     	 str r2,[r0,r4]
 650              	.LVL64:
 651              	.LBE55:
 652              	.LBE61:
 653              	.LBB62:
 654              	.LBB59:
 486:../Libraries/XMCLib/src/xmc_vadc.c **** 
 655              	 .loc 1 486 0
 656 0028 0259     	 ldr r2,[r0,r4]
 657              	.LVL65:
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 658              	 .loc 1 491 0
 659 002a 294E     	 ldr r6,.L57+8
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 660              	 .loc 1 489 0
 661 002c 2A40     	 and r2,r5
 662              	.LVL66:
 663 002e 141C     	 mov r4,r2
 664              	.LVL67:
 665 0030 CA79     	 ldrb r2,[r1,#7]
 666              	.LVL68:
 667              	.LBE59:
 668              	.LBE62:
 444:../Libraries/XMCLib/src/xmc_vadc.c **** 
 669              	 .loc 1 444 0
 670              	 
 671 0032 5207     	 lsl r2,r2,#29
 672              	.LBB63:
 673              	.LBB60:
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 674              	 .loc 1 490 0
 675 0034 5209     	 lsr r2,r2,#5
 676 0036 2243     	 orr r2,r4
 677              	.LVL69:
 678 0038 8C79     	 ldrb r4,[r1,#6]
 679              	.LVL70:
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 680              	 .loc 1 491 0
 681 003a 3240     	 and r2,r6
 682              	.LVL71:
 683 003c E406     	 lsl r4,r4,#27
 684              	.LVL72:
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 685              	 .loc 1 492 0
 686 003e E40A     	 lsr r4,r4,#11
 687 0040 2243     	 orr r2,r4
 688              	.LVL73:
 689              	 .loc 1 493 0
 690 0042 6446     	 mov r4,ip
 691 0044 0251     	 str r2,[r0,r4]
 692              	.LVL74:
 693              	.LBE60:
 694              	.LBE63:
 695              	.LBB64:
 696              	.LBB65:
 486:../Libraries/XMCLib/src/xmc_vadc.c **** 
 697              	 .loc 1 486 0
 698 0046 0434     	 add r4,r4,#4
 699 0048 0259     	 ldr r2,[r0,r4]
 700              	.LVL75:
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 701              	 .loc 1 489 0
 702 004a 1A40     	 and r2,r3
 703              	.LVL76:
 704 004c 4B7A     	 ldrb r3,[r1,#9]
 705 004e 5B07     	 lsl r3,r3,#29
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 706              	 .loc 1 490 0
 707 0050 5B0D     	 lsr r3,r3,#21
 708 0052 1343     	 orr r3,r2
 709              	.LVL77:
 710 0054 0A7A     	 ldrb r2,[r1,#8]
 711              	.LVL78:
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 712              	 .loc 1 491 0
 713 0056 BB43     	 bic r3,r7
 714              	.LVL79:
 715 0058 D206     	 lsl r2,r2,#27
 716              	.LVL80:
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 717              	 .loc 1 472 0
 718 005a D20E     	 lsr r2,r2,#27
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 719              	 .loc 1 492 0
 720 005c 1343     	 orr r3,r2
 721              	.LVL81:
 722              	 .loc 1 493 0
 723 005e 0351     	 str r3,[r0,r4]
 724              	.LVL82:
 725              	.LBE65:
 726              	.LBE64:
 727              	.LBB66:
 728              	.LBB67:
 486:../Libraries/XMCLib/src/xmc_vadc.c **** 
 729              	 .loc 1 486 0
 730 0060 0359     	 ldr r3,[r0,r4]
 731              	.LVL83:
 732 0062 8A7A     	 ldrb r2,[r1,#10]
 733              	.LVL84:
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 734              	 .loc 1 489 0
 735 0064 1D40     	 and r5,r3
 736              	.LVL85:
 737 0066 CB7A     	 ldrb r3,[r1,#11]
 738 0068 D206     	 lsl r2,r2,#27
 739              	.LVL86:
 740 006a 5B07     	 lsl r3,r3,#29
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 741              	 .loc 1 490 0
 742 006c 5B09     	 lsr r3,r3,#5
 743 006e 2B43     	 orr r3,r5
 744              	.LVL87:
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 745              	 .loc 1 491 0
 746 0070 3340     	 and r3,r6
 747              	.LVL88:
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 748              	 .loc 1 492 0
 749 0072 D20A     	 lsr r2,r2,#11
 750 0074 1343     	 orr r3,r2
 751              	.LVL89:
 752              	 .loc 1 493 0
 753 0076 0351     	 str r3,[r0,r4]
 754              	.LVL90:
 755              	.LBE67:
 756              	.LBE66:
 437:../Libraries/XMCLib/src/xmc_vadc.c **** 
 757              	 .loc 1 437 0
 758 0078 8023     	 mov r3,#128
 759              	.LVL91:
 760 007a 0A69     	 ldr r2,[r1,#16]
 761 007c C250     	 str r2,[r0,r3]
 762              	.LVL92:
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 763              	 .loc 1 439 0
 764 007e CA68     	 ldr r2,[r1,#12]
 765 0080 3833     	 add r3,r3,#56
 766 0082 C250     	 str r2,[r0,r3]
 767              	.LVL93:
 768 0084 CB78     	 ldrb r3,[r1,#3]
 769 0086 1D07     	 lsl r5,r3,#28
 770 0088 DF06     	 lsl r7,r3,#27
 771 008a 9C06     	 lsl r4,r3,#26
 772 008c 5B06     	 lsl r3,r3,#25
 773 008e DA0F     	 lsr r2,r3,#31
 774 0090 4B88     	 ldrh r3,[r1,#2]
 775 0092 FF0F     	 lsr r7,r7,#31
 776 0094 9B05     	 lsl r3,r3,#22
 777              	.LBB68:
 778              	.LBB69:
 779              	 .file 2 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2015-10-09
   4:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** ***************************************************************************************************
   7:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.0 - XMC Peripheral Driver Library 
   8:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
  70:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  71:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
  72:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
  73:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
  74:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
  75:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
  76:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
  77:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
  78:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  79:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
  80:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
  81:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
  82:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
  83:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
  84:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
  85:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
  86:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
  87:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
  88:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
  89:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
  90:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
  91:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  92:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
  93:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
  94:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
  95:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
  96:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
  97:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
  98:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
  99:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 100:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 101:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 102:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 103:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 104:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 105:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 106:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 107:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 108:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 110:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html vadc_overview_xmc4x.png
 111:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image latex ../images/vadc_overview_xmc4x.png 
 112:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 113:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html vadc_overview_xmc1x.png
 114:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image latex ../images/vadc_overview_xmc1x.png
 115:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 116:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 118:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 119:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 120:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 121:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 122:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 123:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 124:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 125:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 126:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 127:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 128:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 129:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 130:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 131:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 132:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 133:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 134:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 135:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 136:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 137:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 138:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 139:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 140:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 141:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 142:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 143:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 144:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 145:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
 146:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 147:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 148:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 149:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 150:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41))
 151:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 152:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 153:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 154:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 155:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 156:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 157:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 158:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 159:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 160:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 161:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 162:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 163:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 164:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 165:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 166:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 167:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 168:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 169:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 170:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 171:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 172:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 173:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 174:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 175:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 176:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 177:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 178:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 179:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 180:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 181:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 182:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 183:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 184:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 185:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 186:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 187:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 188:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 189:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 190:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 191:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 192:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 193:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 194:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 195:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 196:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 197:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 198:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 199:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 200:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 201:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 202:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 203:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 204:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 205:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 206:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 207:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 208:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 209:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 210:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 211:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 212:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 213:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 215:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 216:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 217:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 218:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 219:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 221:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 222:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 223:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 224:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 225:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 226:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 227:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 228:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 229:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 230:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 231:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 232:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 233:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 234:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 235:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 236:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 237:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 238:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 239:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 240:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 241:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 242:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 243:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 244:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 245:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 246:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 247:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 248:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 249:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 250:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 251:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 252:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 253:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 254:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 255:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 256:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 257:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 258:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 259:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 260:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 261:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 262:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 263:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 264:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 265:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 266:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 267:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 268:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 269:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 270:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 271:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 272:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 273:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 274:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 275:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 276:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 277:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 278:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 279:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 280:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 281:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 282:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 283:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 284:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 285:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 286:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 287:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 288:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 289:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 290:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 291:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 292:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 293:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 294:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 295:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 296:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 297:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 298:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 299:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 300:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 301:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 302:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 303:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 304:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 305:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 306:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 307:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 308:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 309:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 310:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 311:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 312:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 313:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 314:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 315:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 316:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 317:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 318:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 319:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 320:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 321:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 322:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 323:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 324:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 325:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 326:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 327:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 328:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 329:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   
 330:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 331:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 332:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 333:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 334:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 335:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 336:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 337:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 338:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 339:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 340:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 341:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 342:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 343:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 344:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 345:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 346:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 347:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 348:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 349:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 350:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 351:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 352:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 353:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 354:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 355:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 356:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   
 357:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 358:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 359:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 360:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 361:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 362:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 363:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 364:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 365:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 366:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 367:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 368:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 369:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 370:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 371:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 372:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 373:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 374:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 375:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 376:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 377:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 378:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 379:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 380:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 381:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 382:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 383:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 384:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 385:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 386:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 387:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 388:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 389:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 390:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 391:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 392:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 393:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 394:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 395:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 396:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 397:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 398:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 399:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 400:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 401:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 402:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 403:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 404:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
 405:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 406:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 407:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 408:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 409:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 410:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 411:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 412:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 413:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 414:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 415:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 416:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 417:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 418:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 419:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 420:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 421:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 422:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 423:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 424:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 425:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 426:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 427:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 428:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 429:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 430:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 431:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 432:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 433:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 434:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 435:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 436:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 437:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 438:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 439:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 440:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 441:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 442:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 443:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 444:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 445:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 446:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 447:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 448:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 449:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 450:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 451:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 452:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 453:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 454:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 455:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 456:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 457:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 458:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 459:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 461:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 462:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 463:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 464:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 465:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 466:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 467:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 468:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 469:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 470:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 471:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 472:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 473:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 474:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 475:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 476:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 477:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 478:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 479:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 480:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 481:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 482:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 483:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 484:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
 485:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 486:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 487:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 488:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 489:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 490:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 491:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 492:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 493:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 494:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
 495:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 496:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 497:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 498:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 499:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 500:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 501:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 502:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 503:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 504:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
 505:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 506:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 507:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 508:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 509:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 510:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 511:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 512:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 513:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 514:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 515:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 516:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 517:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 518:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 519:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 520:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 521:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 522:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 523:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 524:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 525:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 526:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 527:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 528:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 529:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 530:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 531:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 532:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 533:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 534:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 535:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 536:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 537:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 538:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 539:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 540:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 541:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 542:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 543:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 544:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 545:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 546:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 547:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 548:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 549:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 550:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 551:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 552:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 553:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 554:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 555:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 556:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 557:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 558:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 559:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 560:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 561:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 562:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 563:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 564:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 565:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 566:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 567:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 568:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 569:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 570:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 571:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 572:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 573:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 574:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 575:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 576:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 577:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 578:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 579:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 580:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 581:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 582:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 583:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 584:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 585:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 586:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 587:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 588:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 589:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 590:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 591:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 592:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 593:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 594:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 595:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 596:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 597:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 598:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 599:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 600:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 601:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 602:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 603:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 604:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 605:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 606:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 607:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 608:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 609:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 610:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 611:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 612:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 613:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 614:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 615:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 616:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 617:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 618:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 619:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 620:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 621:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 622:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 623:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 624:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 625:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 626:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 627:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 628:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 629:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 630:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 631:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 632:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 633:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 634:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 635:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 636:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 637:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 638:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 640:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 641:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 642:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** */
 643:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 644:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 645:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 646:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 647:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 648:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 649:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 650:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 651:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 652:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 653:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 654:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 655:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 656:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 657:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 658:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 659:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 660:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 661:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 662:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 663:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 664:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 665:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 666:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 667:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 668:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 669:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 670:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 671:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 672:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 673:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 674:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 675:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 676:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 677:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 678:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 679:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 680:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 681:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 682:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 683:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 684:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 685:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 686:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 687:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 688:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 689:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 690:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 691:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 692:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 693:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 694:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 695:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 696:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 697:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 698:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 699:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 700:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 701:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 702:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 703:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 704:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 705:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 706:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 707:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 708:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 709:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 710:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 711:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 712:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 713:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 714:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 715:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 716:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 717:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 718:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 720:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 721:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 722:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 723:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 724:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 725:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 726:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 727:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 728:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 729:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 730:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 731:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 732:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 733:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 734:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 735:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 737:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 738:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 739:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 740:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 741:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 742:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 743:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 744:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 745:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 746:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 747:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 748:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 749:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 750:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 751:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 752:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 753:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 754:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 755:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 756:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 757:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 758:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 759:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 760:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 761:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 762:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 763:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 764:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 765:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 766:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 767:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 768:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 769:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 770:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 771:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 772:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 773:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 774:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 775:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 776:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 777:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 778:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 779:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 780:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 781:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 782:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 783:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 784:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 785:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 786:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 787:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 788:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 789:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 790:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 791:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 792:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 793:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 794:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 795:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 796:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 797:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 798:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 799:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 800:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 801:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 802:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 803:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 804:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 805:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 806:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 807:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 808:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 809:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 810:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 811:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 812:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 813:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 814:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 815:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 816:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 817:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 818:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 819:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 820:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 821:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 822:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 823:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 824:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 825:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 826:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 827:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 828:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 829:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 830:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 831:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 832:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 833:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 834:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 835:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 836:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 837:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 838:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 839:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 840:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 841:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 842:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 843:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 844:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 845:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 846:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 847:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 848:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 849:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 850:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 851:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 852:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 853:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 854:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 855:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 856:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 857:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 858:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 859:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 860:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 861:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 862:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 863:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 864:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 865:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 866:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 867:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 868:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 869:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 870:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 871:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 872:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 873:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 874:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 875:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 876:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 877:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 878:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 879:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 880:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 881:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 882:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 883:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 884:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 885:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 886:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 887:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 888:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 889:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 890:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 891:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 892:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 893:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 894:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 895:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 896:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 897:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 898:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 899:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 900:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 901:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 902:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 903:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 904:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 905:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 906:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 907:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 908:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 909:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 910:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 911:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 912:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 913:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 914:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 915:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 916:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 917:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 918:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 919:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 920:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 921:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 922:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 923:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 924:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 925:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 926:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 927:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 928:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 929:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 930:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 931:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 932:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 933:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 934:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 935:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 936:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 937:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 938:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 939:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 940:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 941:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
 942:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 943:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
 944:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
 945:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 946:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
 947:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 948:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
 949:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 950:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
 951:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
 952:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 953:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
 954:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 955:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
 956:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 957:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 958:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
 959:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 960:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
 961:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 962:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
 963:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 964:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
 965:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 966:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
 967:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 968:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 969:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 970:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 971:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 972:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 973:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
 974:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
 975:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
 976:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
 977:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
 978:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
 979:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 980:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
 981:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 982:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
 983:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 984:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 985:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 986:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 987:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
 988:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 989:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
 990:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
 991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 992:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 993:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 994:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 995:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
 996:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
 997:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
 998:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
 999:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1000:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1001:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1002:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1003:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1004:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1005:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1006:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1007:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1008:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1009:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1010:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1011:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1012:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1013:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1014:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1015:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1016:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1017:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1018:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1019:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1020:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1021:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1022:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1023:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1024:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1025:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1026:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1027:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1028:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1029:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1030:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1031:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1032:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1033:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1034:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1035:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1036:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1037:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1038:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1039:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1040:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1041:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1042:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1043:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1044:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1045:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1046:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1047:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1048:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1049:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1050:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1051:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1052:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1053:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1054:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1055:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1056:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1057:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1058:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1059:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1060:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1061:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1062:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1063:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1064:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1065:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1066:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1067:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1068:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1069:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1070:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1071:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1072:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1073:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1074:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1075:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1076:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1077:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1078:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1079:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1080:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1081:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1082:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1083:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1084:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1085:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1086:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1087:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1088:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1089:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1090:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1091:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1092:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1093:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1094:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1095:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1096:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1097:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1098:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1099:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1100:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1101:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1102:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1103:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1104:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1105:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1106:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1107:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1108:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1109:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1110:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1111:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1112:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1113:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1114:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1115:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1116:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1117:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1118:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1119:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1120:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1121:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1122:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1123:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1124:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1125:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1126:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1127:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1128:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1129:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1130:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1131:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1132:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1133:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1134:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1135:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1136:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1137:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1138:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1139:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1140:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1141:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1142:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1143:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1144:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1145:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1146:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1147:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1148:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1149:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1150:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1151:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1152:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1153:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1154:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1155:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1156:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1157:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1158:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1159:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1160:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1161:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1162:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1163:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1164:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1165:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1166:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1167:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1168:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1169:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1170:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1171:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1172:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1173:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1174:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1175:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1176:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1177:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1178:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1179:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1180:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1181:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1182:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1183:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1184:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1185:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1186:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1187:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1188:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1189:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1190:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1191:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1192:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1193:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1194:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1195:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1196:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1197:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1198:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1199:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1200:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1201:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1202:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1203:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1204:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1205:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1206:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1207:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1208:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1209:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1210:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1211:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1212:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Accepts ::XMC_VADC_GLOBAL_SHS_AREF_t */
1213:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1214:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1215:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1216:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1217:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1218:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1219:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1220:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1221:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1222:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1223:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1224:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1225:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1226:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1227:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1228:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1229:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1230:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1231:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1232:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1233:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1234:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1235:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1236:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1237:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1238:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1239:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1240:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1241:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1242:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1243:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1244:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
1245:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1246:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1247:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1248:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1249:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1250:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1251:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1252:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1253:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1254:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1255:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1256:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1257:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1258:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1259:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1260:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1261:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1262:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1263:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1264:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1265:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1266:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1267:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1268:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1269:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1270:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1271:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1272:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1273:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1274:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1275:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1276:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1277:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1278:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1279:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1280:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1281:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1282:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1283:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1284:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1285:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1286:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1287:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1288:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1289:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1290:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1291:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1292:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1293:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1294:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1295:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1296:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1297:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1298:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1299:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1300:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1301:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1302:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1303:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1304:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1305:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1306:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1307:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1308:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1309:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1310:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1311:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1312:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1313:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1314:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1315:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1316:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1317:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1318:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1319:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1320:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1321:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1322:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1323:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1324:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1325:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1326:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1327:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1328:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1329:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1330:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1331:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1332:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1333:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1334:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1335:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1336:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1337:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1338:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1339:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1340:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1341:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1342:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1343:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1344:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1345:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1346:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1347:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1348:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1349:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1350:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1351:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1352:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1353:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1354:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1355:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1356:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1357:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1358:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1359:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1360:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1361:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1362:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1363:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1364:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1365:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1366:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1367:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1368:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1369:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1370:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1371:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1372:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1373:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1374:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1375:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1376:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1377:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1378:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1379:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1380:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1381:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1382:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1383:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1384:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1385:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1386:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1388:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1389:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1390:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1391:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1392:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1393:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1394:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1395:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1398:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1399:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1400:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1401:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1402:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1403:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1404:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1405:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1406:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1407:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1408:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1409:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1410:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1411:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1412:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1413:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1414:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1415:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1416:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1417:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1418:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1419:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1420:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1421:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1422:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1423:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1424:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1425:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1426:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1427:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1428:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1429:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1430:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1431:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1432:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1433:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1434:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1435:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1436:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1437:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1438:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1439:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1440:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1441:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1442:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1443:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1444:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1445:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1448:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1450:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1451:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1452:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1453:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1454:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1455:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1456:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1457:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1458:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1459:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1461:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1462:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1463:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1464:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1465:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1466:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1467:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1468:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1469:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1470:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1471:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1472:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1473:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1474:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1475:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1476:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1477:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1478:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1479:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1480:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  
1481:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1482:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1483:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1484:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1485:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1486:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1487:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1488:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1489:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1490:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1491:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1492:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1493:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1494:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1495:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1496:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1497:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1498:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1499:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1500:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1501:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1502:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1503:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1504:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1505:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1506:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1507:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1508:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1509:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1510:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1511:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1512:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1513:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1514:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1515:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1516:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1517:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1518:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1519:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1520:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1521:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1522:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1523:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1524:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1525:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1526:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1527:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1528:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1529:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1530:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1531:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1532:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1533:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1534:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1535:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1536:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1537:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1538:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1539:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1540:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1541:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1542:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1543:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1544:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1545:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1546:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1547:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1548:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1549:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1550:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1551:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1552:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1553:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1554:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1555:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1556:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1557:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1558:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1560:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1561:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1562:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1563:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1564:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1565:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1566:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1567:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1568:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1569:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1570:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1571:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1572:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1573:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1574:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1575:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1576:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1577:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1578:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1579:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1580:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1581:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1582:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1583:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1584:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1585:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1586:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1587:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1588:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1589:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1590:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1591:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1592:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1593:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1594:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1596:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1597:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1598:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1599:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1600:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1601:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1602:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1603:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1604:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1605:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1606:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1607:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1608:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1609:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1610:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1611:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1612:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1613:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1614:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1615:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1616:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1617:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1618:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1619:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1620:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1621:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1622:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1623:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1624:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1625:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1626:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1627:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1628:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1629:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1630:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1631:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1632:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1633:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1634:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1636:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1637:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1638:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1639:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1640:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1641:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1642:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1643:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1644:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1646:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1648:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1649:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1650:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1651:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1652:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1653:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1654:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1655:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1656:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1657:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1658:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1659:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1660:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1661:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1662:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1663:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1664:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1665:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1667:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1668:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1669:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1671:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1672:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1673:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1674:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1676:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1677:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1678:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1679:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1680:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1681:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1682:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1683:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1684:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1685:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1686:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1687:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1688:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1689:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1690:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1691:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1692:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1693:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1694:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1695:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1696:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1697:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1698:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1699:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1700:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1701:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1702:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1703:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1704:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1706:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1707:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1708:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1709:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1710:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1711:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1712:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1713:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1715:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1716:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1717:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1718:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1719:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1720:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1722:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1723:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1724:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1725:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1726:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1727:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1728:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1729:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1730:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1731:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1732:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1733:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1734:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1735:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1736:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1737:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1738:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1739:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1740:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1741:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= event_type;
1742:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1743:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1744:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1745:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1746:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1747:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1748:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1749:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1750:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1751:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1752:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1753:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1754:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1755:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1756:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1757:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1758:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1759:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1760:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1761:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1762:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1763:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1764:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1765:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= ((uint32_t)(event_type << (uint32_t)16));
1766:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1767:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1768:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1769:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1770:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1771:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1772:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1773:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1774:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1775:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1776:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1777:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1778:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1779:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1780:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1781:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1782:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1783:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1784:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1785:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1786:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1787:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1788:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1789:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1790:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1791:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1792:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1793:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1794:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1795:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1796:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1797:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1798:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1799:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1800:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1801:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1802:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1803:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1804:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1805:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1806:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1807:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1808:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1809:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1810:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1811:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1812:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1813:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1814:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1815:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1816:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1817:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1818:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1819:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1820:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1821:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1822:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1823:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1824:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1825:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1826:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1827:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1828:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1829:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1830:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1831:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1832:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1833:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1834:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1835:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1836:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1837:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1838:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1839:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1840:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1841:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1842:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1843:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1844:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1845:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1846:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1847:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1848:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1849:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1850:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1851:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1852:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1853:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1854:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1855:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1856:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1857:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1858:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1859:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1860:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1861:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->STEPCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1862:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1863:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1864:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1865:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1866:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1867:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1868:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1869:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1870:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1871:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1872:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1873:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1874:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1875:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1876:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1877:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1878:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1879:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1880:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1881:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1882:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1883:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1884:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1885:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1886:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1887:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1888:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1889:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1890:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1891:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1892:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1893:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1894:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1895:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1896:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1897:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1898:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1899:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1900:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1901:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1902:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1903:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1904:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1905:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1906:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1907:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1908:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1909:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1910:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1911:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1912:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1913:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1914:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1915:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1916:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1917:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1918:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1919:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1920:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1921:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1922:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1923:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1924:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1925:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1926:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1927:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1928:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1929:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1930:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1931:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1932:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1933:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1934:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1935:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1936:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
1937:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1938:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
1939:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
1940:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1941:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
1942:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
1943:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1944:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1945:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1946:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1947:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
1948:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
1949:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
1950:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
1951:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1952:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1953:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1954:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
1955:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
1956:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1957:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1958:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1959:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1960:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1961:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
1962:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
1963:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
1964:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1965:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1966:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1967:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1968:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
1969:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
1970:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1971:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1972:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1973:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
1974:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
1975:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
1976:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
1977:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1978:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1979:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1980:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1981:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1982:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
1983:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
1984:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
1985:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1986:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1987:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
1988:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
1989:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
1990:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
1992:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1993:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1994:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
1995:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1996:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1997:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1998:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
1999:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2000:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2001:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2002:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2003:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2004:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2005:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2006:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2007:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2008:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2009:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2010:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2011:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2012:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2013:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2014:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2015:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2016:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2017:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2018:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2019:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2020:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2021:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2022:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2023:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2024:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2025:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2026:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2027:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2028:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2029:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2030:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2031:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2032:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2033:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2034:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2035:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2036:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2037:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2038:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2039:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2040:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2041:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2042:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2043:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2044:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2045:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2046:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2047:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2048:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2049:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2050:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2051:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2052:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2053:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2054:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2055:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2056:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2057:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2058:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2059:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2060:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2061:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  XMC_VADC_GROUP_INDEX_t The Group number for which the configurations applies
2062:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2063:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2064:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2065:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2066:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2067:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2068:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2069:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2070:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2071:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2072:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2073:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2074:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2075:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2076:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2077:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2078:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2079:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2080:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2081:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2082:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2083:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2084:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2085:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2086:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2087:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2088:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2089:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2090:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2091:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2092:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2093:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2094:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2095:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2096:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2097:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2098:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2099:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2100:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2101:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2102:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2103:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2104:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2105:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2106:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2107:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2108:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2109:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2110:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2111:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2112:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2113:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2114:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2115:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2116:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2117:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2118:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2119:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2120:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2121:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2122:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2123:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2124:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2125:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2126:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2127:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2128:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2129:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2130:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2131:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2132:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2133:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2134:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2135:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2136:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2137:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2138:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2139:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2140:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \group_ptr. It initializes group conversion class
2141:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2142:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2143:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2144:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2145:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2146:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2147:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2148:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2149:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2150:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2151:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2152:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2153:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2154:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2155:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2156:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2157:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2158:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2159:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2160:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2161:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2162:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2163:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2164:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2165:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2166:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2167:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2168:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2169:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2170:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2171:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2172:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2173:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2174:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2175:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2176:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2177:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2178:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2179:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2180:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2181:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2182:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2183:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2184:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2185:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2186:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2187:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2188:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2189:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2190:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2191:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2192:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2193:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2194:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2195:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2196:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2197:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2198:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2199:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2200:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2201:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2202:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2203:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2204:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2205:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2206:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2207:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2208:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2209:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2210:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2211:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2212:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2213:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2214:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2215:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2216:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2217:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2218:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2219:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2220:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2221:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2222:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2223:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2224:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2225:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2226:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2227:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2228:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2229:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2230:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2231:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2232:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2233:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2234:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2235:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2236:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2237:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2238:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2239:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2240:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2241:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2242:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2243:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2244:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2245:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2246:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2247:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2248:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2249:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2250:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2251:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2252:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2253:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2254:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2255:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2256:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2257:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2258:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2259:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2260:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2261:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2262:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2263:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2264:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2265:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2266:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2267:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2268:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2269:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2270:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2271:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2272:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2273:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2274:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2275:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2276:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2277:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2278:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2279:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2280:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2281:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2282:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2283:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2284:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2285:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2286:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2287:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2288:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2289:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2290:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2291:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2292:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2293:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2294:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2295:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2296:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2297:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2298:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2299:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2300:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2301:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2302:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2303:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2304:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2305:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2306:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2307:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2308:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2309:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2310:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2311:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2312:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2313:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2315:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2316:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2317:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2318:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2319:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2320:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2321:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2322:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2323:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2324:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2326:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2327:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2328:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2329:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2330:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2331:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2332:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2333:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2334:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2335:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2336:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2337:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2338:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2339:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2341:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2342:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2343:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2344:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2345:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2346:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2347:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2348:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2349:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2350:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2351:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2352:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2353:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2354:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2356:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2357:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2358:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2359:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2361:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2362:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2363:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2364:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2365:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2366:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2367:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2368:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2369:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2370:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2371:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2372:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2373:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2374:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2375:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2376:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2377:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2378:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2379:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2380:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2381:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2382:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2383:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2384:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2385:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2386:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2387:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2388:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2389:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2390:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2391:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2392:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2393:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2394:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2395:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2396:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2397:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2398:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2399:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2400:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2401:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2402:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2403:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2404:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2405:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2406:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2407:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2408:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2409:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 780              	 .loc 2 2409 0
 781 0096 9E09     	 lsr r6,r3,#6
 782 0098 0B78     	 ldrb r3,[r1]
 783 009a 8021     	 mov r1,#128
 784              	.LVL94:
 785 009c 5B07     	 lsl r3,r3,#29
 786              	.LVL95:
2408:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 787              	 .loc 2 2408 0
 788 009e 5B0F     	 lsr r3,r3,#29
 789 00a0 3343     	 orr r3,r6
2410:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2411:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
 790              	 .loc 2 2411 0
 791 00a2 F826     	 mov r6,#248
 792 00a4 7600     	 lsl r6,r6,#1
 793 00a6 8351     	 str r3,[r0,r6]
 794              	.LVL96:
2412:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2413:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
2414:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2415:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2416:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2417:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2418:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2419:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 795              	 .loc 2 2419 0
 796 00a8 8359     	 ldr r3,[r0,r6]
 797 00aa 0906     	 lsl r1,r1,#24
2412:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 798              	 .loc 2 2412 0
 799 00ac 3F07     	 lsl r7,r7,#28
 800 00ae 0B43     	 orr r3,r1
 801 00b0 AD0F     	 lsr r5,r5,#30
 802              	.LVL97:
 803 00b2 3B43     	 orr r3,r7
2413:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 804              	 .loc 2 2413 0
 805 00b4 AD06     	 lsl r5,r5,#26
 806 00b6 E40F     	 lsr r4,r4,#31
 807              	.LVL98:
 808 00b8 2B43     	 orr r3,r5
2414:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 809              	 .loc 2 2414 0
 810 00ba 6407     	 lsl r4,r4,#29
 811 00bc 2343     	 orr r3,r4
 812 00be 191C     	 mov r1,r3
2417:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 813              	 .loc 2 2417 0
 814 00c0 9307     	 lsl r3,r2,#30
 815              	 .loc 2 2419 0
 816 00c2 0B43     	 orr r3,r1
 817 00c4 8351     	 str r3,[r0,r6]
 818              	.LBE69:
 819              	.LBE68:
 444:../Libraries/XMCLib/src/xmc_vadc.c **** 
 820              	 .loc 1 444 0
 821 00c6 F0BD     	 pop {r4,r5,r6,r7,pc}
 822              	.L58:
 823              	 .align 2
 824              	.L57:
 825 00c8 FFF8FFFF 	 .word -1793
 826 00cc FFFFFFF8 	 .word -117440513
 827 00d0 FFFFE0FF 	 .word -2031617
 828              	 .cfi_endproc
 829              	.LFE133:
 831              	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 832              	 .align 2
 833              	 .global XMC_VADC_GROUP_InputClassInit
 834              	 .code 16
 835              	 .thumb_func
 837              	XMC_VADC_GROUP_InputClassInit:
 838              	.LFB134:
 449:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 839              	 .loc 1 449 0
 840              	 .cfi_startproc
 841              	.LVL99:
 842 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 843              	 .cfi_def_cfa_offset 20
 844              	 .cfi_offset 4,-20
 845              	 .cfi_offset 5,-16
 846              	 .cfi_offset 6,-12
 847              	 .cfi_offset 7,-8
 848              	 .cfi_offset 14,-4
 466:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 849              	 .loc 1 466 0
 850 0002 002A     	 cmp r2,#0
 851 0004 17D0     	 beq .L62
 852              	.LVL100:
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 853              	 .loc 1 481 0
 854 0006 CA02     	 lsl r2,r1,#11
 855              	.LVL101:
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 856              	 .loc 1 482 0
 857 0008 4901     	 lsl r1,r1,#5
 858              	.LVL102:
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 859              	 .loc 1 481 0
 860 000a D50E     	 lsr r5,r2,#27
 861              	.LVL103:
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 862              	 .loc 1 482 0
 863 000c 4A0F     	 lsr r2,r1,#29
 864              	.LVL104:
 865 000e 1821     	 mov r1,#24
 866              	.LVL105:
 867 0010 1026     	 mov r6,#16
 868 0012 8C46     	 mov ip,r1
 869 0014 0D4F     	 ldr r7,.L63
 870 0016 0E4C     	 ldr r4,.L63+4
 871              	.LVL106:
 872              	.L61:
 873 0018 9B00     	 lsl r3,r3,#2
 874              	.LVL107:
 875 001a C318     	 add r3,r0,r3
 486:../Libraries/XMCLib/src/xmc_vadc.c **** 
 876              	 .loc 1 486 0
 877 001c A020     	 mov r0,#160
 878              	.LVL108:
 879 001e 1958     	 ldr r1,[r3,r0]
 880              	.LVL109:
 494:../Libraries/XMCLib/src/xmc_vadc.c **** }
 881              	 .loc 1 494 0
 882              	 
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 883              	 .loc 1 489 0
 884 0020 0C40     	 and r4,r1
 885              	.LVL110:
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 886              	 .loc 1 490 0
 887 0022 6146     	 mov r1,ip
 888 0024 8A40     	 lsl r2,r2,r1
 889              	.LVL111:
 890 0026 111C     	 mov r1,r2
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 891              	 .loc 1 492 0
 892 0028 2A1C     	 mov r2,r5
 893 002a B240     	 lsl r2,r2,r6
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 894              	 .loc 1 490 0
 895 002c 2143     	 orr r1,r4
 896              	.LVL112:
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 897              	 .loc 1 491 0
 898 002e 3940     	 and r1,r7
 899              	.LVL113:
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 900              	 .loc 1 492 0
 901 0030 1143     	 orr r1,r2
 902              	.LVL114:
 493:../Libraries/XMCLib/src/xmc_vadc.c **** }
 903              	 .loc 1 493 0
 904 0032 1950     	 str r1,[r3,r0]
 905              	.LVL115:
 906              	 .loc 1 494 0
 907 0034 F0BD     	 pop {r4,r5,r6,r7,pc}
 908              	.LVL116:
 909              	.L62:
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 910              	 .loc 1 472 0
 911 0036 CA06     	 lsl r2,r1,#27
 912              	.LVL117:
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 913              	 .loc 1 473 0
 914 0038 4905     	 lsl r1,r1,#21
 915              	.LVL118:
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 916              	 .loc 1 472 0
 917 003a D50E     	 lsr r5,r2,#27
 918              	.LVL119:
 919 003c 2027     	 mov r7,#32
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 920              	 .loc 1 473 0
 921 003e 4A0F     	 lsr r2,r1,#29
 922              	.LVL120:
 923 0040 0821     	 mov r1,#8
 924              	.LVL121:
 925 0042 0026     	 mov r6,#0
 926 0044 7F42     	 neg r7,r7
 927 0046 8C46     	 mov ip,r1
 928 0048 024C     	 ldr r4,.L63+8
 929 004a E5E7     	 b .L61
 930              	.L64:
 931              	 .align 2
 932              	.L63:
 933 004c FFFFE0FF 	 .word -2031617
 934 0050 FFFFFFF8 	 .word -117440513
 935 0054 FFF8FFFF 	 .word -1793
 936              	 .cfi_endproc
 937              	.LFE134:
 939              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 940              	 .align 2
 941              	 .global XMC_VADC_GROUP_SetPowerMode
 942              	 .code 16
 943              	 .thumb_func
 945              	XMC_VADC_GROUP_SetPowerMode:
 946              	.LFB135:
 495:../Libraries/XMCLib/src/xmc_vadc.c **** 
 496:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 497:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 498:../Libraries/XMCLib/src/xmc_vadc.c **** {
 947              	 .loc 1 498 0
 948              	 .cfi_startproc
 949              	.LVL122:
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 500:../Libraries/XMCLib/src/xmc_vadc.c **** 
 501:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 950              	 .loc 1 504 0
 951 0000 8022     	 mov r2,#128
 498:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 952              	 .loc 1 498 0
 953 0002 10B5     	 push {r4,lr}
 954              	 .cfi_def_cfa_offset 8
 955              	 .cfi_offset 4,-8
 956              	 .cfi_offset 14,-4
 505:../Libraries/XMCLib/src/xmc_vadc.c **** 
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 957              	 .loc 1 506 0
 958 0004 0324     	 mov r4,#3
 504:../Libraries/XMCLib/src/xmc_vadc.c **** 
 959              	 .loc 1 504 0
 960 0006 8358     	 ldr r3,[r0,r2]
 961              	.LVL123:
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 508:../Libraries/XMCLib/src/xmc_vadc.c **** 
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 510:../Libraries/XMCLib/src/xmc_vadc.c **** }
 962              	 .loc 1 510 0
 963              	 
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 964              	 .loc 1 506 0
 965 0008 A343     	 bic r3,r4
 966              	.LVL124:
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 967              	 .loc 1 507 0
 968 000a 1943     	 orr r1,r3
 969              	.LVL125:
 509:../Libraries/XMCLib/src/xmc_vadc.c **** }
 970              	 .loc 1 509 0
 971 000c 8150     	 str r1,[r0,r2]
 972              	 .loc 1 510 0
 973 000e 10BD     	 pop {r4,pc}
 974              	 .cfi_endproc
 975              	.LFE135:
 977              	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 978              	 .align 2
 979              	 .global XMC_VADC_GROUP_SetSyncSlave
 980              	 .code 16
 981              	 .thumb_func
 983              	XMC_VADC_GROUP_SetSyncSlave:
 984              	.LFB136:
 511:../Libraries/XMCLib/src/xmc_vadc.c **** 
 512:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 513:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 514:../Libraries/XMCLib/src/xmc_vadc.c **** {
 985              	 .loc 1 514 0
 986              	 .cfi_startproc
 987              	.LVL126:
 515:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 516:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 517:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 521:../Libraries/XMCLib/src/xmc_vadc.c **** 
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 524:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 525:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 988              	 .loc 1 525 0
 989 0000 9142     	 cmp r1,r2
 990 0002 9241     	 sbc r2,r2,r2
 991              	.LVL127:
 992 0004 5242     	 neg r2,r2
 993 0006 8918     	 add r1,r1,r2
 994              	.LVL128:
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 528:../Libraries/XMCLib/src/xmc_vadc.c ****   
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 995              	 .loc 1 530 0
 996 0008 C022     	 mov r2,#192
 514:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 997              	 .loc 1 514 0
 998 000a 10B5     	 push {r4,lr}
 999              	 .cfi_def_cfa_offset 8
 1000              	 .cfi_offset 4,-8
 1001              	 .cfi_offset 14,-4
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1002              	 .loc 1 531 0
 1003 000c 0324     	 mov r4,#3
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1004              	 .loc 1 530 0
 1005 000e 8358     	 ldr r3,[r0,r2]
 1006              	.LVL129:
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 534:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1007              	 .loc 1 534 0
 1008              	 
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1009              	 .loc 1 531 0
 1010 0010 A343     	 bic r3,r4
 1011              	.LVL130:
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1012              	 .loc 1 532 0
 1013 0012 1943     	 orr r1,r3
 1014              	.LVL131:
 533:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1015              	 .loc 1 533 0
 1016 0014 8150     	 str r1,[r0,r2]
 1017              	 .loc 1 534 0
 1018 0016 10BD     	 pop {r4,pc}
 1019              	 .cfi_endproc
 1020              	.LFE136:
 1022              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1023              	 .align 2
 1024              	 .global XMC_VADC_GROUP_SetSyncMaster
 1025              	 .code 16
 1026              	 .thumb_func
 1028              	XMC_VADC_GROUP_SetSyncMaster:
 1029              	.LFB137:
 535:../Libraries/XMCLib/src/xmc_vadc.c **** 
 536:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 537:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 538:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1030              	 .loc 1 538 0
 1031              	 .cfi_startproc
 1032              	.LVL132:
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 540:../Libraries/XMCLib/src/xmc_vadc.c **** 
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 542:../Libraries/XMCLib/src/xmc_vadc.c **** 
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1033              	 .loc 1 543 0
 1034 0000 C022     	 mov r2,#192
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1035              	 .loc 1 544 0
 1036 0002 0321     	 mov r1,#3
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1037              	 .loc 1 543 0
 1038 0004 8358     	 ldr r3,[r0,r2]
 1039              	.LVL133:
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 546:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1040              	 .loc 1 546 0
 1041              	 
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1042              	 .loc 1 544 0
 1043 0006 8B43     	 bic r3,r1
 1044              	.LVL134:
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1045              	 .loc 1 545 0
 1046 0008 8350     	 str r3,[r0,r2]
 1047              	 .loc 1 546 0
 1048 000a 7047     	 bx lr
 1049              	 .cfi_endproc
 1050              	.LFE137:
 1052              	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1053              	 .align 2
 1054              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1055              	 .code 16
 1056              	 .thumb_func
 1058              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1059              	.LFB138:
 547:../Libraries/XMCLib/src/xmc_vadc.c **** 
 548:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 549:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 550:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1060              	 .loc 1 550 0
 1061              	 .cfi_startproc
 1062              	.LVL135:
 551:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 553:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 554:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 555:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 556:../Libraries/XMCLib/src/xmc_vadc.c ****  
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 558:../Libraries/XMCLib/src/xmc_vadc.c ****  
 559:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 560:../Libraries/XMCLib/src/xmc_vadc.c ****  
 561:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel  =  slave_group;
 562:../Libraries/XMCLib/src/xmc_vadc.c **** 
 563:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 565:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 568:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 569:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 571:../Libraries/XMCLib/src/xmc_vadc.c **** 
 572:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 574:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 577:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 578:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 581:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 582:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 583:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 584:../Libraries/XMCLib/src/xmc_vadc.c **** 
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (uint32_t)((uint32_t)1 << ready_pos);
 586:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 587:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= ((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 1063              	 .loc 1 587 0
 1064 0000 C022     	 mov r2,#192
 1065 0002 1023     	 mov r3,#16
 1066 0004 8158     	 ldr r1,[r0,r2]
 1067              	.LVL136:
 588:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 589:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1068              	 .loc 1 589 0
 1069              	 
 587:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 1070              	 .loc 1 587 0
 1071 0006 0B43     	 orr r3,r1
 1072 0008 8350     	 str r3,[r0,r2]
 1073              	 .loc 1 589 0
 1074 000a 7047     	 bx lr
 1075              	 .cfi_endproc
 1076              	.LFE138:
 1078              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1079              	 .align 2
 1080              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1081              	 .code 16
 1082              	 .thumb_func
 1084              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1085              	.LFB139:
 590:../Libraries/XMCLib/src/xmc_vadc.c **** 
 591:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 592:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 593:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1086              	 .loc 1 593 0
 1087              	 .cfi_startproc
 1088              	.LVL137:
 594:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 595:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 596:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 597:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 598:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 600:../Libraries/XMCLib/src/xmc_vadc.c **** 
 601:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel = slave_group;
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 
 604:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 605:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 606:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 607:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 610:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 612:../Libraries/XMCLib/src/xmc_vadc.c **** 
 613:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 615:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 616:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 617:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 618:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 619:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 622:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 623:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)((uint32_t)1 << ready_pos));
 627:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 628:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 1089              	 .loc 1 628 0
 1090 0000 C022     	 mov r2,#192
 1091 0002 1021     	 mov r1,#16
 1092              	.LVL138:
 1093 0004 8358     	 ldr r3,[r0,r2]
 629:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 630:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1094              	 .loc 1 630 0
 1095              	 
 628:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 1096              	 .loc 1 628 0
 1097 0006 8B43     	 bic r3,r1
 1098 0008 8350     	 str r3,[r0,r2]
 1099              	 .loc 1 630 0
 1100 000a 7047     	 bx lr
 1101              	 .cfi_endproc
 1102              	.LFE139:
 1104              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1105              	 .align 2
 1106              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1107              	 .code 16
 1108              	 .thumb_func
 1110              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1111              	.LFB140:
 631:../Libraries/XMCLib/src/xmc_vadc.c **** 
 632:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 633:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 634:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1112              	 .loc 1 634 0
 1113              	 .cfi_startproc
 1114              	.LVL139:
 635:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 636:../Libraries/XMCLib/src/xmc_vadc.c **** 
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 638:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 639:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 640:../Libraries/XMCLib/src/xmc_vadc.c **** 
 641:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1115              	 .loc 1 641 0
 1116 0000 C023     	 mov r3,#192
 1117 0002 C358     	 ldr r3,[r0,r3]
 1118              	.LVL140:
 642:../Libraries/XMCLib/src/xmc_vadc.c **** 
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1119              	 .loc 1 643 0
 1120 0004 9B07     	 lsl r3,r3,#30
 1121 0006 08D1     	 bne .L71
 1122              	.LVL141:
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 645:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1123              	 .loc 1 645 0
 1124 0008 8022     	 mov r2,#128
 1125 000a 8900     	 lsl r1,r1,#2
 1126              	.LVL142:
 1127 000c 4118     	 add r1,r0,r1
 1128 000e 8020     	 mov r0,#128
 1129              	.LVL143:
 1130 0010 9200     	 lsl r2,r2,#2
 1131 0012 8B58     	 ldr r3,[r1,r2]
 1132 0014 C000     	 lsl r0,r0,#3
 1133 0016 0343     	 orr r3,r0
 1134 0018 8B50     	 str r3,[r1,r2]
 1135              	.L71:
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 647:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1136              	 .loc 1 647 0
 1137              	 
 1138 001a 7047     	 bx lr
 1139              	 .cfi_endproc
 1140              	.LFE140:
 1142              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1143              	 .align 2
 1144              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1145              	 .code 16
 1146              	 .thumb_func
 1148              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1149              	.LFB141:
 648:../Libraries/XMCLib/src/xmc_vadc.c **** 
 649:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 650:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 651:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1150              	 .loc 1 651 0
 1151              	 .cfi_startproc
 1152              	.LVL144:
 652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 653:../Libraries/XMCLib/src/xmc_vadc.c **** 
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 656:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 657:../Libraries/XMCLib/src/xmc_vadc.c **** 
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1153              	 .loc 1 658 0
 1154 0000 C023     	 mov r3,#192
 1155 0002 C358     	 ldr r3,[r0,r3]
 1156              	.LVL145:
 659:../Libraries/XMCLib/src/xmc_vadc.c **** 
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1157              	 .loc 1 660 0
 1158 0004 9B07     	 lsl r3,r3,#30
 1159 0006 07D0     	 beq .L73
 1160              	.LVL146:
 661:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 662:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1161              	 .loc 1 662 0
 1162 0008 8022     	 mov r2,#128
 1163 000a 8900     	 lsl r1,r1,#2
 1164              	.LVL147:
 1165 000c 4118     	 add r1,r0,r1
 1166 000e 9200     	 lsl r2,r2,#2
 1167 0010 8858     	 ldr r0,[r1,r2]
 1168              	.LVL148:
 1169 0012 024B     	 ldr r3,.L78
 1170 0014 0340     	 and r3,r0
 1171 0016 8B50     	 str r3,[r1,r2]
 1172              	.L73:
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 664:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1173              	 .loc 1 664 0
 1174              	 
 1175 0018 7047     	 bx lr
 1176              	.L79:
 1177 001a C046     	 .align 2
 1178              	.L78:
 1179 001c FFFBFFFF 	 .word -1025
 1180              	 .cfi_endproc
 1181              	.LFE141:
 1183              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1184              	 .align 2
 1185              	 .global XMC_VADC_GROUP_IsConverterBusy
 1186              	 .code 16
 1187              	 .thumb_func
 1189              	XMC_VADC_GROUP_IsConverterBusy:
 1190              	.LFB142:
 665:../Libraries/XMCLib/src/xmc_vadc.c **** 
 666:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 667:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 668:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1191              	 .loc 1 668 0
 1192              	 .cfi_startproc
 1193              	.LVL149:
 669:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 670:../Libraries/XMCLib/src/xmc_vadc.c **** 
 671:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 672:../Libraries/XMCLib/src/xmc_vadc.c **** 
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1194              	 .loc 1 673 0
 1195 0000 8023     	 mov r3,#128
 1196 0002 C058     	 ldr r0,[r0,r3]
 1197              	.LVL150:
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 675:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 676:../Libraries/XMCLib/src/xmc_vadc.c **** 
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 678:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1198              	 .loc 1 678 0
 1199              	 
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1200              	 .loc 1 674 0
 1201 0004 4000     	 lsl r0,r0,#1
 1202              	.LVL151:
 677:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1203              	 .loc 1 677 0
 1204 0006 C00F     	 lsr r0,r0,#31
 1205              	 .loc 1 678 0
 1206 0008 7047     	 bx lr
 1207              	 .cfi_endproc
 1208              	.LFE142:
 1210 000a C046     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 1211              	 .align 2
 1212              	 .global XMC_VADC_GROUP_SetBoundaries
 1213              	 .code 16
 1214              	 .thumb_func
 1216              	XMC_VADC_GROUP_SetBoundaries:
 1217              	.LFB143:
 679:../Libraries/XMCLib/src/xmc_vadc.c **** 
 680:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 681:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 682:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1218              	 .loc 1 682 0
 1219              	 .cfi_startproc
 1220              	.LVL152:
 1221 0000 30B5     	 push {r4,r5,lr}
 1222              	 .cfi_def_cfa_offset 12
 1223              	 .cfi_offset 4,-12
 1224              	 .cfi_offset 5,-8
 1225              	 .cfi_offset 14,-4
 683:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 684:../Libraries/XMCLib/src/xmc_vadc.c **** 
 685:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 686:../Libraries/XMCLib/src/xmc_vadc.c **** 
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1226              	 .loc 1 688 0
 1227 0002 B824     	 mov r4,#184
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 1228              	 .loc 1 690 0
 1229 0004 034B     	 ldr r3,.L82
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1230              	 .loc 1 688 0
 1231 0006 0559     	 ldr r5,[r0,r4]
 1232              	.LVL153:
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 1233              	 .loc 1 692 0
 1234 0008 1204     	 lsl r2,r2,#16
 1235              	.LVL154:
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 1236              	 .loc 1 690 0
 1237 000a 2B40     	 and r3,r5
 1238              	.LVL155:
 1239 000c 1143     	 orr r1,r2
 1240              	.LVL156:
 1241              	 .loc 1 692 0
 1242 000e 1943     	 orr r1,r3
 1243              	.LVL157:
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 1244              	 .loc 1 693 0
 1245 0010 0151     	 str r1,[r0,r4]
 694:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1246              	 .loc 1 694 0
 1247              	 
 1248 0012 30BD     	 pop {r4,r5,pc}
 1249              	.L83:
 1250              	 .align 2
 1251              	.L82:
 1252 0014 00F000F0 	 .word -268374016
 1253              	 .cfi_endproc
 1254              	.LFE143:
 1256              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 1257              	 .align 2
 1258              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 1259              	 .code 16
 1260              	 .thumb_func
 1262              	XMC_VADC_GROUP_SetIndividualBoundary:
 1263              	.LFB144:
 695:../Libraries/XMCLib/src/xmc_vadc.c **** 
 696:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 697:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 698:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 699:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 700:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1264              	 .loc 1 700 0
 1265              	 .cfi_startproc
 1266              	.LVL158:
 701:../Libraries/XMCLib/src/xmc_vadc.c **** 
 702:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 703:../Libraries/XMCLib/src/xmc_vadc.c **** 
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 706:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 707:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 708:../Libraries/XMCLib/src/xmc_vadc.c **** 
 709:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 710:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1267              	 .loc 1 710 0
 1268 0000 B823     	 mov r3,#184
 1269 0002 C358     	 ldr r3,[r0,r3]
 1270              	.LVL159:
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 1271              	 .loc 1 711 0
 1272 0004 0029     	 cmp r1,#0
 1273 0006 09D0     	 beq .L87
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 713:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 714:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 716:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 1274              	 .loc 1 716 0
 1275 0008 0129     	 cmp r1,#1
 1276 000a 02D0     	 beq .L88
 1277              	.LVL160:
 1278              	.L86:
 717:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 718:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 719:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 722:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 723:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 725:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 1279              	 .loc 1 725 0
 1280 000c B822     	 mov r2,#184
 726:../Libraries/XMCLib/src/xmc_vadc.c **** 
 727:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1281              	 .loc 1 727 0
 1282              	 
 725:../Libraries/XMCLib/src/xmc_vadc.c **** 
 1283              	 .loc 1 725 0
 1284 000e 8350     	 str r3,[r0,r2]
 1285              	 .loc 1 727 0
 1286 0010 7047     	 bx lr
 1287              	.LVL161:
 1288              	.L88:
 718:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 1289              	 .loc 1 718 0
 1290 0012 0449     	 ldr r1,.L89
 1291              	.LVL162:
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1292              	 .loc 1 719 0
 1293 0014 1204     	 lsl r2,r2,#16
 1294              	.LVL163:
 718:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 1295              	 .loc 1 718 0
 1296 0016 0B40     	 and r3,r1
 1297              	.LVL164:
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1298              	 .loc 1 719 0
 1299 0018 1343     	 orr r3,r2
 1300              	.LVL165:
 1301 001a F7E7     	 b .L86
 1302              	.LVL166:
 1303              	.L87:
 713:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 1304              	 .loc 1 713 0
 1305 001c 1B0B     	 lsr r3,r3,#12
 1306              	.LVL167:
 1307 001e 1B03     	 lsl r3,r3,#12
 1308              	.LVL168:
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1309              	 .loc 1 714 0
 1310 0020 1343     	 orr r3,r2
 1311              	.LVL169:
 1312 0022 F3E7     	 b .L86
 1313              	.L90:
 1314              	 .align 2
 1315              	.L89:
 1316 0024 FFFF00F0 	 .word -268369921
 1317              	 .cfi_endproc
 1318              	.LFE144:
 1320              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 1321              	 .align 2
 1322              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 1323              	 .code 16
 1324              	 .thumb_func
 1326              	XMC_VADC_GROUP_TriggerServiceRequest:
 1327              	.LFB145:
 728:../Libraries/XMCLib/src/xmc_vadc.c **** 
 729:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 730:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 731:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 732:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 733:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1328              	 .loc 1 733 0
 1329              	 .cfi_startproc
 1330              	.LVL170:
 734:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 735:../Libraries/XMCLib/src/xmc_vadc.c **** 
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 738:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 739:../Libraries/XMCLib/src/xmc_vadc.c **** 
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 1331              	 .loc 1 740 0
 1332 0000 E423     	 mov r3,#228
 1333 0002 5B00     	 lsl r3,r3,#1
 1334 0004 C358     	 ldr r3,[r0,r3]
 1335              	.LVL171:
 741:../Libraries/XMCLib/src/xmc_vadc.c **** 
 742:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 1336              	 .loc 1 742 0
 1337 0006 002A     	 cmp r2,#0
 1338 0008 00D0     	 beq .L94
 743:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 744:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 747:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 748:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 1339              	 .loc 1 748 0
 1340 000a 0831     	 add r1,r1,#8
 1341              	.LVL172:
 1342              	.L94:
 1343 000c 0122     	 mov r2,#1
 1344              	.LVL173:
 1345 000e 8A40     	 lsl r2,r2,r1
 1346 0010 111C     	 mov r1,r2
 1347 0012 1943     	 orr r1,r3
 1348              	.LVL174:
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 750:../Libraries/XMCLib/src/xmc_vadc.c **** 
 751:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 1349              	 .loc 1 751 0
 1350 0014 E423     	 mov r3,#228
 1351 0016 5B00     	 lsl r3,r3,#1
 1352 0018 C150     	 str r1,[r0,r3]
 752:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1353              	 .loc 1 752 0
 1354              	 
 1355 001a 7047     	 bx lr
 1356              	 .cfi_endproc
 1357              	.LFE145:
 1359              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 1360              	 .align 2
 1361              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 1362              	 .code 16
 1363              	 .thumb_func
 1365              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 1366              	.LFB146:
 753:../Libraries/XMCLib/src/xmc_vadc.c **** 
 754:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 755:../Libraries/XMCLib/src/xmc_vadc.c **** 
 756:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 757:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 758:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 759:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 760:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1367              	 .loc 1 760 0
 1368              	 .cfi_startproc
 1369              	.LVL175:
 1370 0000 30B5     	 push {r4,r5,lr}
 1371              	 .cfi_def_cfa_offset 12
 1372              	 .cfi_offset 4,-12
 1373              	 .cfi_offset 5,-8
 1374              	 .cfi_offset 14,-4
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 762:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 763:../Libraries/XMCLib/src/xmc_vadc.c **** 
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 1375              	 .loc 1 766 0
 1376 0002 0F25     	 mov r5,#15
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 1377              	 .loc 1 765 0
 1378 0004 8900     	 lsl r1,r1,#2
 1379              	.LVL176:
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 1380              	 .loc 1 767 0
 1381 0006 8A40     	 lsl r2,r2,r1
 1382              	.LVL177:
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 1383              	 .loc 1 766 0
 1384 0008 D423     	 mov r3,#212
 1385 000a 8D40     	 lsl r5,r5,r1
 1386              	 .loc 1 767 0
 1387 000c 111C     	 mov r1,r2
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 1388              	 .loc 1 766 0
 1389 000e C458     	 ldr r4,[r0,r3]
 768:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1390              	 .loc 1 768 0
 1391              	 
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 1392              	 .loc 1 766 0
 1393 0010 AC43     	 bic r4,r5
 1394 0012 C450     	 str r4,[r0,r3]
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 1395              	 .loc 1 767 0
 1396 0014 C458     	 ldr r4,[r0,r3]
 1397 0016 2143     	 orr r1,r4
 1398 0018 C150     	 str r1,[r0,r3]
 1399              	 .loc 1 768 0
 1400 001a 30BD     	 pop {r4,r5,pc}
 1401              	 .cfi_endproc
 1402              	.LFE146:
 1404              	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 1405              	 .align 2
 1406              	 .global XMC_VADC_GLOBAL_SHS_Init
 1407              	 .code 16
 1408              	 .thumb_func
 1410              	XMC_VADC_GLOBAL_SHS_Init:
 1411              	.LFB147:
 769:../Libraries/XMCLib/src/xmc_vadc.c **** 
 770:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
 771:../Libraries/XMCLib/src/xmc_vadc.c **** 
 772:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GROUP_AVAILABLE */
 773:../Libraries/XMCLib/src/xmc_vadc.c **** 
 774:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 775:../Libraries/XMCLib/src/xmc_vadc.c **** 
 776:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 777:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 778:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1412              	 .loc 1 778 0
 1413              	 .cfi_startproc
 1414              	.LVL178:
 779:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 780:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 781:../Libraries/XMCLib/src/xmc_vadc.c **** 
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 1415              	 .loc 1 783 0
 1416 0000 8023     	 mov r3,#128
 778:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 1417              	 .loc 1 778 0
 1418 0002 10B5     	 push {r4,lr}
 1419              	 .cfi_def_cfa_offset 8
 1420              	 .cfi_offset 4,-8
 1421              	 .cfi_offset 14,-4
 1422              	 .loc 1 783 0
 1423 0004 0A68     	 ldr r2,[r1]
 1424 0006 1B02     	 lsl r3,r3,#8
 1425 0008 1343     	 orr r3,r2
 1426 000a 0364     	 str r3,[r0,#64]
 784:../Libraries/XMCLib/src/xmc_vadc.c **** 
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 1427              	 .loc 1 786 0
 1428 000c BC23     	 mov r3,#188
 1429 000e 0124     	 mov r4,#1
 1430 0010 C258     	 ldr r2,[r0,r3]
 787:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 788:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1431              	 .loc 1 788 0
 1432              	 
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 1433              	 .loc 1 786 0
 1434 0012 A243     	 bic r2,r4
 1435 0014 C250     	 str r2,[r0,r3]
 787:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 1436              	 .loc 1 787 0
 1437 0016 C258     	 ldr r2,[r0,r3]
 1438 0018 0979     	 ldrb r1,[r1,#4]
 1439              	.LVL179:
 1440 001a 0A43     	 orr r2,r1
 1441 001c C250     	 str r2,[r0,r3]
 1442              	 .loc 1 788 0
 1443 001e 10BD     	 pop {r4,pc}
 1444              	 .cfi_endproc
 1445              	.LFE147:
 1447              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 1448              	 .align 2
 1449              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 1450              	 .code 16
 1451              	 .thumb_func
 1453              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 1454              	.LFB148:
 789:../Libraries/XMCLib/src/xmc_vadc.c **** 
 790:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 791:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 792:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1455              	 .loc 1 792 0
 1456              	 .cfi_startproc
 1457              	.LVL180:
 793:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 794:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 795:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 796:../Libraries/XMCLib/src/xmc_vadc.c **** 
 797:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 1458              	 .loc 1 798 0
 1459 0000 0029     	 cmp r1,#0
 1460 0002 07D0     	 beq .L100
 799:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 800:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 1461              	 .loc 1 802 0
 1462 0004 0129     	 cmp r1,#1
 1463 0006 00D0     	 beq .L101
 1464              	.LVL181:
 1465              	.L97:
 803:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 804:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 808:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 810:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1466              	 .loc 1 810 0
 1467              	 
 1468 0008 7047     	 bx lr
 1469              	.LVL182:
 1470              	.L101:
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1471              	 .loc 1 804 0
 1472 000a 8423     	 mov r3,#132
 1473 000c C258     	 ldr r2,[r0,r3]
 1474 000e 1143     	 orr r1,r2
 1475              	.LVL183:
 1476 0010 C150     	 str r1,[r0,r3]
 1477 0012 F9E7     	 b .L97
 1478              	.LVL184:
 1479              	.L100:
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1480              	 .loc 1 800 0
 1481 0014 8022     	 mov r2,#128
 1482 0016 0123     	 mov r3,#1
 1483 0018 8158     	 ldr r1,[r0,r2]
 1484              	.LVL185:
 1485 001a 0B43     	 orr r3,r1
 1486 001c 8350     	 str r3,[r0,r2]
 1487 001e F3E7     	 b .L97
 1488              	 .cfi_endproc
 1489              	.LFE148:
 1491              	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 1492              	 .align 2
 1493              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 1494              	 .code 16
 1495              	 .thumb_func
 1497              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 1498              	.LFB149:
 811:../Libraries/XMCLib/src/xmc_vadc.c **** 
 812:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 813:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 814:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1499              	 .loc 1 814 0
 1500              	 .cfi_startproc
 1501              	.LVL186:
 815:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 816:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 817:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 818:../Libraries/XMCLib/src/xmc_vadc.c **** 
 819:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 1502              	 .loc 1 820 0
 1503 0000 0029     	 cmp r1,#0
 1504 0002 07D0     	 beq .L105
 821:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 822:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 1505              	 .loc 1 824 0
 1506 0004 0129     	 cmp r1,#1
 1507 0006 00D0     	 beq .L106
 1508              	.LVL187:
 1509              	.L102:
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 826:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 830:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 832:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1510              	 .loc 1 832 0
 1511              	 
 1512 0008 7047     	 bx lr
 1513              	.LVL188:
 1514              	.L106:
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1515              	 .loc 1 826 0
 1516 000a 8422     	 mov r2,#132
 1517 000c 8358     	 ldr r3,[r0,r2]
 1518 000e 8B43     	 bic r3,r1
 1519 0010 8350     	 str r3,[r0,r2]
 1520 0012 F9E7     	 b .L102
 1521              	.L105:
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1522              	 .loc 1 822 0
 1523 0014 8022     	 mov r2,#128
 1524 0016 8358     	 ldr r3,[r0,r2]
 1525 0018 0131     	 add r1,r1,#1
 1526              	.LVL189:
 1527 001a 8B43     	 bic r3,r1
 1528 001c 8350     	 str r3,[r0,r2]
 1529 001e F3E7     	 b .L102
 1530              	 .cfi_endproc
 1531              	.LFE149:
 1533              	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 1534              	 .align 2
 1535              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 1536              	 .code 16
 1537              	 .thumb_func
 1539              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 1540              	.LFB150:
 833:../Libraries/XMCLib/src/xmc_vadc.c **** 
 834:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 835:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 836:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 837:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 838:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1541              	 .loc 1 838 0
 1542              	 .cfi_startproc
 1543              	.LVL190:
 1544 0000 10B5     	 push {r4,lr}
 1545              	 .cfi_def_cfa_offset 8
 1546              	 .cfi_offset 4,-8
 1547              	 .cfi_offset 14,-4
 839:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 840:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 841:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 843:../Libraries/XMCLib/src/xmc_vadc.c **** 
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 847:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 1548              	 .loc 1 847 0
 1549 0002 8023     	 mov r3,#128
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1550              	 .loc 1 845 0
 1551 0004 0029     	 cmp r1,#0
 1552 0006 03D0     	 beq .L110
 848:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 850:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 1553              	 .loc 1 850 0
 1554 0008 0129     	 cmp r1,#1
 1555 000a 00D0     	 beq .L111
 1556              	.LVL191:
 1557              	.L107:
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 853:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 855:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 859:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1558              	 .loc 1 859 0
 1559              	 
 1560 000c 10BD     	 pop {r4,pc}
 1561              	.LVL192:
 1562              	.L111:
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 1563              	 .loc 1 852 0
 1564 000e 8423     	 mov r3,#132
 1565              	.L110:
 1566 0010 C458     	 ldr r4,[r0,r3]
 1567 0012 0449     	 ldr r1,.L112
 1568              	.LVL193:
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1569              	 .loc 1 853 0
 1570 0014 1202     	 lsl r2,r2,#8
 1571              	.LVL194:
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 1572              	 .loc 1 852 0
 1573 0016 2140     	 and r1,r4
 1574 0018 C150     	 str r1,[r0,r3]
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1575              	 .loc 1 853 0
 1576 001a C158     	 ldr r1,[r0,r3]
 1577 001c 0A43     	 orr r2,r1
 1578 001e C250     	 str r2,[r0,r3]
 1579 0020 F4E7     	 b .L107
 1580              	.L113:
 1581 0022 C046     	 .align 2
 1582              	.L112:
 1583 0024 FFC0FFFF 	 .word -16129
 1584              	 .cfi_endproc
 1585              	.LFE150:
 1587              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 1588              	 .align 2
 1589              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 1590              	 .code 16
 1591              	 .thumb_func
 1593              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 1594              	.LFB151:
 860:../Libraries/XMCLib/src/xmc_vadc.c **** 
 861:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 862:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 863:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 864:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 865:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 866:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1595              	 .loc 1 866 0
 1596              	 .cfi_startproc
 1597              	.LVL195:
 1598 0000 30B5     	 push {r4,r5,lr}
 1599              	 .cfi_def_cfa_offset 12
 1600              	 .cfi_offset 4,-12
 1601              	 .cfi_offset 5,-8
 1602              	 .cfi_offset 14,-4
 867:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 868:../Libraries/XMCLib/src/xmc_vadc.c **** 
 869:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 1603              	 .loc 1 873 0
 1604 0002 9B00     	 lsl r3,r3,#2
 1605              	.LVL196:
 874:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 1606              	 .loc 1 874 0
 1607 0004 002A     	 cmp r2,#0
 1608 0006 0FD0     	 beq .L118
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 876:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 877:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 879:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 1609              	 .loc 1 879 0
 1610 0008 012A     	 cmp r2,#1
 1611 000a 00D0     	 beq .L119
 1612              	.LVL197:
 1613              	.L114:
 880:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 881:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 882:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 884:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 885:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 886:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 888:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1614              	 .loc 1 888 0
 1615              	 
 1616 000c 30BD     	 pop {r4,r5,pc}
 1617              	.LVL198:
 1618              	.L119:
 881:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 1619              	 .loc 1 881 0
 1620 000e 9032     	 add r2,r2,#144
 1621              	.LVL199:
 1622              	.L117:
 1623 0010 0F25     	 mov r5,#15
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1624              	 .loc 1 882 0
 1625 0012 9940     	 lsl r1,r1,r3
 1626              	.LVL200:
 881:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 1627              	 .loc 1 881 0
 1628 0014 9D40     	 lsl r5,r5,r3
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1629              	 .loc 1 882 0
 1630 0016 0B1C     	 mov r3,r1
 1631              	.LVL201:
 881:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 1632              	 .loc 1 881 0
 1633 0018 FF32     	 add r2,r2,#255
 1634 001a 8458     	 ldr r4,[r0,r2]
 1635 001c AC43     	 bic r4,r5
 1636 001e 8450     	 str r4,[r0,r2]
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1637              	 .loc 1 882 0
 1638 0020 8458     	 ldr r4,[r0,r2]
 1639 0022 2343     	 orr r3,r4
 1640 0024 8350     	 str r3,[r0,r2]
 1641 0026 F1E7     	 b .L114
 1642              	.LVL202:
 1643              	.L118:
 876:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 1644              	 .loc 1 876 0
 1645 0028 8132     	 add r2,r2,#129
 1646              	.LVL203:
 1647 002a F1E7     	 b .L117
 1648              	 .cfi_endproc
 1649              	.LFE151:
 1651              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 1652              	 .align 2
 1653              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 1654              	 .code 16
 1655              	 .thumb_func
 1657              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 1658              	.LFB152:
 889:../Libraries/XMCLib/src/xmc_vadc.c **** 
 890:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 891:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 892:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 893:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1659              	 .loc 1 893 0
 1660              	 .cfi_startproc
 1661              	.LVL204:
 894:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 895:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 896:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 897:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 898:../Libraries/XMCLib/src/xmc_vadc.c **** 
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 900:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 1662              	 .loc 1 900 0
 1663 0000 0029     	 cmp r1,#0
 1664 0002 08D0     	 beq .L123
 901:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 902:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 1665              	 .loc 1 904 0
 1666 0004 0129     	 cmp r1,#1
 1667 0006 00D0     	 beq .L124
 1668              	.L120:
 905:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 906:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 909:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 910:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 912:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1669              	 .loc 1 912 0
 1670              	 
 1671 0008 7047     	 bx lr
 1672              	.L124:
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1673              	 .loc 1 906 0
 1674 000a E422     	 mov r2,#228
 1675 000c 8358     	 ldr r3,[r0,r2]
 1676 000e 5B00     	 lsl r3,r3,#1
 1677 0010 5B08     	 lsr r3,r3,#1
 1678 0012 8350     	 str r3,[r0,r2]
 1679 0014 F8E7     	 b .L120
 1680              	.L123:
 902:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1681              	 .loc 1 902 0
 1682 0016 E022     	 mov r2,#224
 1683 0018 8358     	 ldr r3,[r0,r2]
 1684 001a 5B00     	 lsl r3,r3,#1
 1685 001c 5B08     	 lsr r3,r3,#1
 1686 001e 8350     	 str r3,[r0,r2]
 1687 0020 F2E7     	 b .L120
 1688              	 .cfi_endproc
 1689              	.LFE152:
 1691 0022 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 1692              	 .align 2
 1693              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 1694              	 .code 16
 1695              	 .thumb_func
 1697              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 1698              	.LFB153:
 913:../Libraries/XMCLib/src/xmc_vadc.c **** 
 914:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 915:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 916:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 917:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1699              	 .loc 1 917 0
 1700              	 .cfi_startproc
 1701              	.LVL205:
 918:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 919:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 921:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 922:../Libraries/XMCLib/src/xmc_vadc.c **** 
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 925:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 1702              	 .loc 1 925 0
 1703 0000 E022     	 mov r2,#224
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1704              	 .loc 1 923 0
 1705 0002 0029     	 cmp r1,#0
 1706 0004 03D0     	 beq .L128
 926:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 1707              	 .loc 1 927 0
 1708 0006 0129     	 cmp r1,#1
 1709 0008 00D0     	 beq .L129
 1710              	.LVL206:
 1711              	.L125:
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 929:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 932:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 933:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 935:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1712              	 .loc 1 935 0
 1713              	 
 1714 000a 7047     	 bx lr
 1715              	.LVL207:
 1716              	.L129:
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1717              	 .loc 1 929 0
 1718 000c E422     	 mov r2,#228
 1719              	.L128:
 1720 000e 8021     	 mov r1,#128
 1721              	.LVL208:
 1722 0010 8358     	 ldr r3,[r0,r2]
 1723 0012 0906     	 lsl r1,r1,#24
 1724 0014 0B43     	 orr r3,r1
 1725 0016 8350     	 str r3,[r0,r2]
 1726 0018 F7E7     	 b .L125
 1727              	 .cfi_endproc
 1728              	.LFE153:
 1730 001a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 1731              	 .align 2
 1732              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 1733              	 .code 16
 1734              	 .thumb_func
 1736              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 1737              	.LFB154:
 936:../Libraries/XMCLib/src/xmc_vadc.c **** 
 937:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 938:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 939:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 940:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 941:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1738              	 .loc 1 941 0
 1739              	 .cfi_startproc
 1740              	.LVL209:
 942:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 943:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 944:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 946:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 948:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 949:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 950:../Libraries/XMCLib/src/xmc_vadc.c **** 
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 952:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 1741              	 .loc 1 952 0
 1742 0000 0029     	 cmp r1,#0
 1743 0002 0AD0     	 beq .L134
 1744 0004 0023     	 mov r3,#0
 953:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 954:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 1745              	 .loc 1 956 0
 1746 0006 0129     	 cmp r1,#1
 1747 0008 01D0     	 beq .L135
 1748              	.LVL210:
 1749              	.L132:
 957:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 958:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 961:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 962:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 965:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1750              	 .loc 1 965 0
 1751 000a 181C     	 mov r0,r3
 1752              	.LVL211:
 1753              	 
 1754 000c 7047     	 bx lr
 1755              	.LVL212:
 1756              	.L135:
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1757              	 .loc 1 958 0
 1758 000e E433     	 add r3,r3,#228
 1759 0010 C158     	 ldr r1,[r0,r3]
 1760              	.LVL213:
 1761 0012 653B     	 sub r3,r3,#101
 1762 0014 D140     	 lsr r1,r1,r2
 1763              	.LVL214:
 1764 0016 0B40     	 and r3,r1
 1765 0018 F7E7     	 b .L132
 1766              	.LVL215:
 1767              	.L134:
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1768              	 .loc 1 954 0
 1769 001a E023     	 mov r3,#224
 1770 001c C158     	 ldr r1,[r0,r3]
 1771              	.LVL216:
 1772 001e 613B     	 sub r3,r3,#97
 1773 0020 D140     	 lsr r1,r1,r2
 1774              	.LVL217:
 1775 0022 0B40     	 and r3,r1
 1776 0024 F1E7     	 b .L132
 1777              	 .cfi_endproc
 1778              	.LFE154:
 1780 0026 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 1781              	 .align 2
 1782              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 1783              	 .code 16
 1784              	 .thumb_func
 1786              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 1787              	.LFB155:
 966:../Libraries/XMCLib/src/xmc_vadc.c **** 
 967:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 968:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 969:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 970:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 971:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 972:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1788              	 .loc 1 972 0
 1789              	 .cfi_startproc
 1790              	.LVL218:
 1791 0000 30B5     	 push {r4,r5,lr}
 1792              	 .cfi_def_cfa_offset 12
 1793              	 .cfi_offset 4,-12
 1794              	 .cfi_offset 5,-8
 1795              	 .cfi_offset 14,-4
 973:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 975:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 976:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 978:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 979:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 980:../Libraries/XMCLib/src/xmc_vadc.c **** 
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 982:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 983:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 1796              	 .loc 1 983 0
 1797 0002 E024     	 mov r4,#224
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1798              	 .loc 1 981 0
 1799 0004 0029     	 cmp r1,#0
 1800 0006 03D0     	 beq .L139
 984:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 985:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 986:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 987:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 1801              	 .loc 1 987 0
 1802 0008 0129     	 cmp r1,#1
 1803 000a 00D0     	 beq .L140
 1804              	.LVL219:
 1805              	.L136:
 988:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 989:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 990:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 991:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 992:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 993:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 995:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 997:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1806              	 .loc 1 997 0
 1807              	 
 1808 000c 30BD     	 pop {r4,r5,pc}
 1809              	.LVL220:
 1810              	.L140:
 989:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 1811              	 .loc 1 989 0
 1812 000e E424     	 mov r4,#228
 1813              	.L139:
 1814 0010 7F25     	 mov r5,#127
 1815 0012 9540     	 lsl r5,r5,r2
 1816 0014 0159     	 ldr r1,[r0,r4]
 1817              	.LVL221:
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1818              	 .loc 1 991 0
 1819 0016 9340     	 lsl r3,r3,r2
 1820              	.LVL222:
 989:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 1821              	 .loc 1 989 0
 1822 0018 A943     	 bic r1,r5
 1823 001a 8025     	 mov r5,#128
 1824 001c 2D02     	 lsl r5,r5,#8
 1825 001e 2943     	 orr r1,r5
 1826 0020 0151     	 str r1,[r0,r4]
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 1827              	 .loc 1 991 0
 1828 0022 0159     	 ldr r1,[r0,r4]
 1829 0024 1A1C     	 mov r2,r3
 1830              	.LVL223:
 1831 0026 2943     	 orr r1,r5
 1832 0028 0B1C     	 mov r3,r1
 1833 002a 1343     	 orr r3,r2
 1834 002c 0351     	 str r3,[r0,r4]
 1835 002e EDE7     	 b .L136
 1836              	 .cfi_endproc
 1837              	.LFE155:
 1839              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 1840              	 .align 2
 1841              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 1842              	 .code 16
 1843              	 .thumb_func
 1845              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 1846              	.LFB156:
 998:../Libraries/XMCLib/src/xmc_vadc.c **** 
 999:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1000:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1001:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1002:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1003:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1004:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1847              	 .loc 1 1004 0
 1848              	 .cfi_startproc
 1849              	.LVL224:
 1850 0000 30B5     	 push {r4,r5,lr}
 1851              	 .cfi_def_cfa_offset 12
 1852              	 .cfi_offset 4,-12
 1853              	 .cfi_offset 5,-8
 1854              	 .cfi_offset 14,-4
1005:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1007:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1008:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1009:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1010:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1011:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1012:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1013:../Libraries/XMCLib/src/xmc_vadc.c **** 
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1015:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 1855              	 .loc 1 1015 0
 1856 0002 064D     	 ldr r5,.L142
1016:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 1857              	 .loc 1 1016 0
 1858 0004 0902     	 lsl r1,r1,#8
 1859              	.LVL225:
1015:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 1860              	 .loc 1 1015 0
 1861 0006 9540     	 lsl r5,r5,r2
 1862              	 .loc 1 1016 0
 1863 0008 0B43     	 orr r3,r1
 1864              	.LVL226:
 1865 000a 9340     	 lsl r3,r3,r2
1014:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 1866              	 .loc 1 1014 0
 1867 000c 046D     	 ldr r4,[r0,#80]
1017:../Libraries/XMCLib/src/xmc_vadc.c **** 
1018:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1868              	 .loc 1 1018 0
 1869              	 
1014:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 1870              	 .loc 1 1014 0
 1871 000e AC43     	 bic r4,r5
 1872 0010 0465     	 str r4,[r0,#80]
1016:../Libraries/XMCLib/src/xmc_vadc.c **** 
 1873              	 .loc 1 1016 0
 1874 0012 046D     	 ldr r4,[r0,#80]
 1875 0014 2343     	 orr r3,r4
 1876 0016 0365     	 str r3,[r0,#80]
 1877              	 .loc 1 1018 0
 1878 0018 30BD     	 pop {r4,r5,pc}
 1879              	.L143:
 1880 001a C046     	 .align 2
 1881              	.L142:
 1882 001c 1F810000 	 .word 33055
 1883              	 .cfi_endproc
 1884              	.LFE156:
 1886              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 1887              	 .align 2
 1888              	 .global XMC_VADC_GROUP_ScanInit
 1889              	 .code 16
 1890              	 .thumb_func
 1892              	XMC_VADC_GROUP_ScanInit:
 1893              	.LFB157:
1019:../Libraries/XMCLib/src/xmc_vadc.c **** 
1020:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_SHS_AVAILABLE */
1021:../Libraries/XMCLib/src/xmc_vadc.c **** 
1022:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1023:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1024:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1025:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1894              	 .loc 1 1025 0
 1895              	 .cfi_startproc
 1896              	.LVL227:
 1897 0000 30B5     	 push {r4,r5,lr}
 1898              	 .cfi_def_cfa_offset 12
 1899              	 .cfi_offset 4,-12
 1900              	 .cfi_offset 5,-8
 1901              	 .cfi_offset 14,-4
 1902              	.LBB70:
 1903              	.LBB71:
2420:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2421:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2422:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2423:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2424:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2425:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2426:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
2427:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2428:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2429:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2430:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2431:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2432:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2433:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2434:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2435:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2436:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2437:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2438:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2439:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2440:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2441:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2442:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2443:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2444:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
2445:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2446:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2447:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2448:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2449:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2450:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2451:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2452:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2453:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2454:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2455:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2456:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2457:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2458:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2459:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2461:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2462:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2463:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2464:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2465:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2466:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2467:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2468:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2469:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2470:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2471:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2472:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2473:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2474:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2475:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2476:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2477:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2478:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2479:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2480:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2481:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2482:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2483:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2484:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2485:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2486:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2487:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2488:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2489:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2490:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2491:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2492:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2493:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif /* XMC_VADC_GROUP_AVAILABLE */
2494:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2495:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2496:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2497:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2498:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2499:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2500:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2501:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2502:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2503:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2504:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2505:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2506:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2507:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2508:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2509:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2510:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2511:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2512:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2513:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2514:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2515:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2516:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2517:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2518:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2519:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2520:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2521:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2522:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2523:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2524:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2525:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2526:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2527:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2528:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2529:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2530:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2531:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2532:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2533:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2534:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2535:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2536:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2537:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2538:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2539:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2540:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2541:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2542:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2543:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2544:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2545:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2546:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2547:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2548:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2549:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2550:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2551:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2552:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2553:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2554:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2555:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 1904              	 .loc 2 2555 0
 1905 0002 8425     	 mov r5,#132
 1906 0004 1E4B     	 ldr r3,.L148
 1907 0006 4259     	 ldr r2,[r0,r5]
 1908              	.LBE71:
 1909              	.LBE70:
1026:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1027:../Libraries/XMCLib/src/xmc_vadc.c **** 
1028:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1029:../Libraries/XMCLib/src/xmc_vadc.c **** 
1030:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
1032:../Libraries/XMCLib/src/xmc_vadc.c ****   
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
1035:../Libraries/XMCLib/src/xmc_vadc.c **** 
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 1910              	 .loc 1 1038 0
 1911 0008 0C78     	 ldrb r4,[r1]
 1912              	.LBB74:
 1913              	.LBB72:
 1914              	 .loc 2 2555 0
 1915 000a 1340     	 and r3,r2
 1916              	.LBE72:
 1917              	.LBE74:
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 1918              	 .loc 1 1037 0
 1919 000c 3022     	 mov r2,#48
 1920              	.LBB75:
 1921              	.LBB73:
 1922              	 .loc 2 2555 0
 1923 000e 4351     	 str r3,[r0,r5]
 1924              	.LBE73:
 1925              	.LBE75:
1034:../Libraries/XMCLib/src/xmc_vadc.c **** 
 1926              	 .loc 1 1034 0
 1927 0010 4359     	 ldr r3,[r0,r5]
 1928              	.LVL228:
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 1929              	 .loc 1 1037 0
 1930 0012 9343     	 bic r3,r2
 1931              	.LVL229:
 1932 0014 1A1C     	 mov r2,r3
 1933              	.LVL230:
 1934              	 .loc 1 1038 0
 1935 0016 2307     	 lsl r3,r4,#28
 1936 0018 9B0F     	 lsr r3,r3,#30
 1937 001a 1B01     	 lsl r3,r3,#4
 1938 001c 1343     	 orr r3,r2
 1939              	.LVL231:
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 1940              	 .loc 1 1041 0
 1941 001e 0322     	 mov r2,#3
 1942 0020 1440     	 and r4,r2
 1943 0022 1DD0     	 beq .L145
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1043:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 1944              	 .loc 1 1043 0
 1945 0024 7D32     	 add r2,r2,#125
 1946 0026 1343     	 orr r3,r2
 1947              	.LVL232:
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1045:../Libraries/XMCLib/src/xmc_vadc.c **** 
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 1948              	 .loc 1 1046 0
 1949 0028 4351     	 str r3,[r0,r5]
1047:../Libraries/XMCLib/src/xmc_vadc.c **** 
1048:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 1950              	 .loc 1 1048 0
 1951 002a 4A68     	 ldr r2,[r1,#4]
 1952 002c 154B     	 ldr r3,.L148+4
 1953              	.LVL233:
 1954 002e 1343     	 orr r3,r2
 1955 0030 9022     	 mov r2,#144
 1956 0032 5200     	 lsl r2,r2,#1
 1957 0034 8350     	 str r3,[r0,r2]
 1958              	.LVL234:
1049:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 1959              	 .loc 1 1051 0
 1960 0036 8B68     	 ldr r3,[r1,#8]
 1961 0038 203A     	 sub r2,r2,#32
 1962 003a FF3A     	 sub r2,r2,#255
 1963 003c 1343     	 orr r3,r2
 1964 003e 2432     	 add r2,r2,#36
 1965 0040 FF32     	 add r2,r2,#255
 1966 0042 8350     	 str r3,[r0,r2]
1052:../Libraries/XMCLib/src/xmc_vadc.c ****   
1053:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 1967              	 .loc 1 1053 0
 1968 0044 022C     	 cmp r4,#2
 1969 0046 04D1     	 bne .L146
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1055:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 1970              	 .loc 1 1055 0
 1971 0048 8021     	 mov r1,#128
 1972              	.LVL235:
 1973 004a 8358     	 ldr r3,[r0,r2]
 1974 004c 4902     	 lsl r1,r1,#9
 1975 004e 0B43     	 orr r3,r1
 1976 0050 8350     	 str r3,[r0,r2]
 1977              	.L146:
 1978              	.LVL236:
 1979              	.LBB76:
 1980              	.LBB77:
2534:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 1981              	 .loc 2 2534 0
 1982 0052 8422     	 mov r2,#132
 1983 0054 8021     	 mov r1,#128
 1984 0056 8358     	 ldr r3,[r0,r2]
 1985 0058 8904     	 lsl r1,r1,#18
 1986 005a 0B43     	 orr r3,r1
 1987 005c 8350     	 str r3,[r0,r2]
 1988              	.LBE77:
 1989              	.LBE76:
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   
1058:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1990              	 .loc 1 1061 0
 1991              	 
 1992 005e 30BD     	 pop {r4,r5,pc}
 1993              	.LVL237:
 1994              	.L145:
1046:../Libraries/XMCLib/src/xmc_vadc.c **** 
 1995              	 .loc 1 1046 0
 1996 0060 4351     	 str r3,[r0,r5]
1048:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
 1997              	 .loc 1 1048 0
 1998 0062 4A68     	 ldr r2,[r1,#4]
 1999 0064 074B     	 ldr r3,.L148+4
 2000              	.LVL238:
 2001 0066 1343     	 orr r3,r2
 2002 0068 9022     	 mov r2,#144
 2003 006a 5200     	 lsl r2,r2,#1
 2004 006c 8350     	 str r3,[r0,r2]
 2005              	.LVL239:
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   
 2006              	 .loc 1 1051 0
 2007 006e 8B68     	 ldr r3,[r1,#8]
 2008 0070 203A     	 sub r2,r2,#32
 2009 0072 FF3A     	 sub r2,r2,#255
 2010 0074 1343     	 orr r3,r2
 2011 0076 2432     	 add r2,r2,#36
 2012 0078 FF32     	 add r2,r2,#255
 2013 007a 8350     	 str r3,[r0,r2]
 2014 007c E9E7     	 b .L146
 2015              	.L149:
 2016 007e C046     	 .align 2
 2017              	.L148:
 2018 0080 FFFFFFFD 	 .word -33554433
 2019 0084 00808080 	 .word -2139062272
 2020              	 .cfi_endproc
 2021              	.LFE157:
 2023              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 2024              	 .align 2
 2025              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 2026              	 .code 16
 2027              	 .thumb_func
 2029              	XMC_VADC_GROUP_ScanSelectTrigger:
 2030              	.LFB158:
1062:../Libraries/XMCLib/src/xmc_vadc.c **** 
1063:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1064:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1065:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2031              	 .loc 1 1065 0
 2032              	 .cfi_startproc
 2033              	.LVL240:
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1067:../Libraries/XMCLib/src/xmc_vadc.c **** 
1068:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2034              	 .loc 1 1071 0
 2035 0000 9022     	 mov r2,#144
 2036 0002 5200     	 lsl r2,r2,#1
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2037              	 .loc 1 1065 0
 2038 0004 10B5     	 push {r4,lr}
 2039              	 .cfi_def_cfa_offset 8
 2040              	 .cfi_offset 4,-8
 2041              	 .cfi_offset 14,-4
1072:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
1073:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 2042              	 .loc 1 1073 0
 2043 0006 054B     	 ldr r3,.L151
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2044              	 .loc 1 1071 0
 2045 0008 8458     	 ldr r4,[r0,r2]
 2046              	.LVL241:
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2047              	 .loc 1 1074 0
 2048 000a 0902     	 lsl r1,r1,#8
 2049              	.LVL242:
1073:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2050              	 .loc 1 1073 0
 2051 000c 2340     	 and r3,r4
 2052 000e 8024     	 mov r4,#128
 2053              	.LVL243:
 2054 0010 2402     	 lsl r4,r4,#8
 2055 0012 2343     	 orr r3,r4
 2056              	.LVL244:
 2057              	 .loc 1 1074 0
 2058 0014 1943     	 orr r1,r3
 2059              	.LVL245:
1075:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2060              	 .loc 1 1075 0
 2061 0016 8150     	 str r1,[r0,r2]
1076:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2062              	 .loc 1 1076 0
 2063              	 
 2064 0018 10BD     	 pop {r4,pc}
 2065              	.L152:
 2066 001a C046     	 .align 2
 2067              	.L151:
 2068 001c FFF0FFFF 	 .word -3841
 2069              	 .cfi_endproc
 2070              	.LFE158:
 2072              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 2073              	 .align 2
 2074              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 2075              	 .code 16
 2076              	 .thumb_func
 2078              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 2079              	.LFB159:
1077:../Libraries/XMCLib/src/xmc_vadc.c **** 
1078:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1079:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1080:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2080              	 .loc 1 1080 0
 2081              	 .cfi_startproc
 2082              	.LVL246:
1081:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1082:../Libraries/XMCLib/src/xmc_vadc.c **** 
1083:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2083              	 .loc 1 1086 0
 2084 0000 9022     	 mov r2,#144
 2085 0002 5200     	 lsl r2,r2,#1
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2086              	 .loc 1 1080 0
 2087 0004 10B5     	 push {r4,lr}
 2088              	 .cfi_def_cfa_offset 8
 2089              	 .cfi_offset 4,-8
 2090              	 .cfi_offset 14,-4
1087:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
1088:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 2091              	 .loc 1 1088 0
 2092 0006 054B     	 ldr r3,.L154
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2093              	 .loc 1 1086 0
 2094 0008 8458     	 ldr r4,[r0,r2]
 2095              	.LVL247:
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2096              	 .loc 1 1089 0
 2097 000a 4903     	 lsl r1,r1,#13
 2098              	.LVL248:
1088:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2099              	 .loc 1 1088 0
 2100 000c 2340     	 and r3,r4
 2101 000e 8024     	 mov r4,#128
 2102              	.LVL249:
 2103 0010 2402     	 lsl r4,r4,#8
 2104 0012 2343     	 orr r3,r4
 2105              	.LVL250:
 2106              	 .loc 1 1089 0
 2107 0014 1943     	 orr r1,r3
 2108              	.LVL251:
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2109              	 .loc 1 1090 0
 2110 0016 8150     	 str r1,[r0,r2]
1091:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2111              	 .loc 1 1091 0
 2112              	 
 2113 0018 10BD     	 pop {r4,pc}
 2114              	.L155:
 2115 001a C046     	 .align 2
 2116              	.L154:
 2117 001c FF9FFFFF 	 .word -24577
 2118              	 .cfi_endproc
 2119              	.LFE159:
 2121              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 2122              	 .align 2
 2123              	 .global XMC_VADC_GROUP_ScanSelectGating
 2124              	 .code 16
 2125              	 .thumb_func
 2127              	XMC_VADC_GROUP_ScanSelectGating:
 2128              	.LFB160:
1092:../Libraries/XMCLib/src/xmc_vadc.c **** 
1093:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1094:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1095:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2129              	 .loc 1 1095 0
 2130              	 .cfi_startproc
 2131              	.LVL252:
1096:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1097:../Libraries/XMCLib/src/xmc_vadc.c **** 
1098:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2132              	 .loc 1 1101 0
 2133 0000 9022     	 mov r2,#144
 2134 0002 5200     	 lsl r2,r2,#1
1095:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2135              	 .loc 1 1095 0
 2136 0004 10B5     	 push {r4,lr}
 2137              	 .cfi_def_cfa_offset 8
 2138              	 .cfi_offset 4,-8
 2139              	 .cfi_offset 14,-4
1102:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
1103:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 2140              	 .loc 1 1103 0
 2141 0006 054B     	 ldr r3,.L157
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 2142              	 .loc 1 1101 0
 2143 0008 8458     	 ldr r4,[r0,r2]
 2144              	.LVL253:
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2145              	 .loc 1 1104 0
 2146 000a 0904     	 lsl r1,r1,#16
 2147              	.LVL254:
1103:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2148              	 .loc 1 1103 0
 2149 000c 2340     	 and r3,r4
 2150 000e 8024     	 mov r4,#128
 2151              	.LVL255:
 2152 0010 2404     	 lsl r4,r4,#16
 2153 0012 2343     	 orr r3,r4
 2154              	.LVL256:
 2155              	 .loc 1 1104 0
 2156 0014 1943     	 orr r1,r3
 2157              	.LVL257:
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2158              	 .loc 1 1105 0
 2159 0016 8150     	 str r1,[r0,r2]
1106:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2160              	 .loc 1 1106 0
 2161              	 
 2162 0018 10BD     	 pop {r4,pc}
 2163              	.L158:
 2164 001a C046     	 .align 2
 2165              	.L157:
 2166 001c FFFFF0FF 	 .word -983041
 2167              	 .cfi_endproc
 2168              	.LFE160:
 2170              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 2171              	 .align 2
 2172              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 2173              	 .code 16
 2174              	 .thumb_func
 2176              	XMC_VADC_GROUP_ScanSequenceAbort:
 2177              	.LFB161:
1107:../Libraries/XMCLib/src/xmc_vadc.c **** 
1108:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1109:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1110:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2178              	 .loc 1 1110 0
 2179              	 .cfi_startproc
 2180              	.LVL258:
 2181 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2182              	 .cfi_def_cfa_offset 20
 2183              	 .cfi_offset 4,-20
 2184              	 .cfi_offset 5,-16
 2185              	 .cfi_offset 6,-12
 2186              	 .cfi_offset 7,-8
 2187              	 .cfi_offset 14,-4
 2188 0002 4746     	 mov r7,r8
1111:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1112:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1113:../Libraries/XMCLib/src/xmc_vadc.c **** 
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1115:../Libraries/XMCLib/src/xmc_vadc.c **** 
1116:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 2189              	 .loc 1 1117 0
 2190 0004 9024     	 mov r4,#144
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1120:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 2191              	 .loc 1 1123 0
 2192 0006 8422     	 mov r2,#132
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
 2193              	 .loc 1 1110 0
 2194 0008 80B4     	 push {r7}
 2195              	 .cfi_def_cfa_offset 24
 2196              	 .cfi_offset 8,-24
1119:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2197              	 .loc 1 1119 0
 2198 000a 104F     	 ldr r7,.L160
1117:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2199              	 .loc 1 1117 0
 2200 000c 6400     	 lsl r4,r4,#1
 2201 000e 0559     	 ldr r5,[r0,r4]
 2202              	.LVL259:
1119:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2203              	 .loc 1 1119 0
 2204 0010 0751     	 str r7,[r0,r4]
 2205              	 .loc 1 1123 0
 2206 0012 8358     	 ldr r3,[r0,r2]
 2207              	.LBB78:
 2208              	.LBB79:
 2209              	 .loc 2 2555 0
 2210 0014 0E49     	 ldr r1,.L160+4
 2211 0016 8658     	 ldr r6,[r0,r2]
 2212              	.LBE79:
 2213              	.LBE78:
 2214              	 .loc 1 1123 0
 2215 0018 9846     	 mov r8,r3
 2216              	.LVL260:
 2217              	.LBB81:
 2218              	.LBB80:
 2219              	 .loc 2 2555 0
 2220 001a 3140     	 and r1,r6
 2221 001c 8150     	 str r1,[r0,r2]
 2222              	.LBE80:
 2223              	.LBE81:
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
1125:../Libraries/XMCLib/src/xmc_vadc.c **** 
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 2224              	 .loc 1 1126 0
 2225 001e 9221     	 mov r1,#146
 2226 0020 0323     	 mov r3,#3
 2227              	.LVL261:
 2228 0022 4900     	 lsl r1,r1,#1
 2229 0024 4658     	 ldr r6,[r0,r1]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
1128:../Libraries/XMCLib/src/xmc_vadc.c **** 
1129:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
1131:../Libraries/XMCLib/src/xmc_vadc.c **** 
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1133:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1134:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1135:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2230              	 .loc 1 1135 0
 2231              	 
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2232              	 .loc 1 1126 0
 2233 0026 9E43     	 bic r6,r3
 2234 0028 4650     	 str r6,[r0,r1]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2235              	 .loc 1 1127 0
 2236 002a 4658     	 ldr r6,[r0,r1]
 2237 002c FD33     	 add r3,r3,#253
 2238 002e 1E43     	 orr r6,r3
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2239              	 .loc 1 1123 0
 2240 0030 4346     	 mov r3,r8
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2241              	 .loc 1 1127 0
 2242 0032 4650     	 str r6,[r0,r1]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2243              	 .loc 1 1123 0
 2244 0034 9B01     	 lsl r3,r3,#6
1130:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2245              	 .loc 1 1130 0
 2246 0036 8158     	 ldr r1,[r0,r2]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2247              	 .loc 1 1123 0
 2248 0038 DB0F     	 lsr r3,r3,#31
1130:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2249              	 .loc 1 1130 0
 2250 003a 5B06     	 lsl r3,r3,#25
 2251 003c 0B43     	 orr r3,r1
 2252 003e 8350     	 str r3,[r0,r2]
1134:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2253              	 .loc 1 1134 0
 2254 0040 3B1C     	 mov r3,r7
 2255 0042 2B43     	 orr r3,r5
1133:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2256              	 .loc 1 1133 0
 2257 0044 0351     	 str r3,[r0,r4]
 2258              	.LVL262:
 2259              	.LVL263:
 2260              	 .loc 1 1135 0
 2261 0046 04BC     	 pop {r2}
 2262 0048 9046     	 mov r8,r2
 2263 004a F0BD     	 pop {r4,r5,r6,r7,pc}
 2264              	.L161:
 2265              	 .align 2
 2266              	.L160:
 2267 004c 00808080 	 .word -2139062272
 2268 0050 FFFFFFFD 	 .word -33554433
 2269              	 .cfi_endproc
 2270              	.LFE161:
 2272              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 2273              	 .align 2
 2274              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 2275              	 .code 16
 2276              	 .thumb_func
 2278              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 2279              	.LFB162:
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1138:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1139:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2280              	 .loc 1 1139 0
 2281              	 .cfi_startproc
 2282              	.LVL264:
1140:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1142:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1143:../Libraries/XMCLib/src/xmc_vadc.c **** 
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1145:../Libraries/XMCLib/src/xmc_vadc.c **** 
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 2283              	 .loc 1 1149 0
 2284 0000 9623     	 mov r3,#150
 2285 0002 5B00     	 lsl r3,r3,#1
 2286 0004 C158     	 ldr r1,[r0,r3]
1139:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 2287              	 .loc 1 1139 0
 2288 0006 021C     	 mov r2,r0
1147:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2289              	 .loc 1 1147 0
 2290 0008 0020     	 mov r0,#0
 2291              	.LVL265:
 2292              	 .loc 1 1149 0
 2293 000a 0029     	 cmp r1,#0
 2294 000c 1ED0     	 beq .L163
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1151:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 2295              	 .loc 1 1151 0
 2296 000e D358     	 ldr r3,[r2,r3]
 2297              	.LVL266:
1152:../Libraries/XMCLib/src/xmc_vadc.c **** 
1153:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
1154:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1155:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 2298              	 .loc 1 1155 0
 2299 0010 0122     	 mov r2,#1
 2300              	.LVL267:
 2301 0012 111C     	 mov r1,r2
 2302 0014 1940     	 and r1,r3
 2303              	.LVL268:
1156:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1157:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
1158:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1159:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 2304              	 .loc 1 1159 0
 2305 0016 5B08     	 lsr r3,r3,#1
 2306              	.LVL269:
 2307 0018 481C     	 add r0,r1,#1
 2308 001a 1A42     	 tst r2,r3
 2309 001c 36D0     	 beq .L183
 2310              	.LVL270:
 2311 001e 5B08     	 lsr r3,r3,#1
 2312              	.LVL271:
 2313 0020 411C     	 add r1,r0,#1
 2314 0022 DA07     	 lsl r2,r3,#31
 2315 0024 2CD5     	 bpl .L184
 2316              	.L169:
 2317              	.LVL272:
 2318 0026 5B08     	 lsr r3,r3,#1
 2319              	.LVL273:
 2320 0028 4A1C     	 add r2,r1,#1
 2321 002a D807     	 lsl r0,r3,#31
 2322 002c 22D5     	 bpl .L185
 2323              	.L171:
 2324              	.LVL274:
 2325 002e 5B08     	 lsr r3,r3,#1
 2326              	.LVL275:
 2327 0030 511C     	 add r1,r2,#1
 2328 0032 D807     	 lsl r0,r3,#31
 2329 0034 18D5     	 bpl .L186
 2330              	.L173:
 2331              	.LVL276:
 2332 0036 5B08     	 lsr r3,r3,#1
 2333              	.LVL277:
 2334 0038 4A1C     	 add r2,r1,#1
 2335 003a D807     	 lsl r0,r3,#31
 2336 003c 0ED5     	 bpl .L187
 2337              	.L175:
 2338              	.LVL278:
 2339 003e 5B08     	 lsr r3,r3,#1
 2340              	.LVL279:
 2341 0040 501C     	 add r0,r2,#1
 2342 0042 D907     	 lsl r1,r3,#31
 2343 0044 05D5     	 bpl .L188
 2344              	.L177:
1157:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 2345              	 .loc 1 1157 0
 2346 0046 421C     	 add r2,r0,#1
 2347 0048 9B07     	 lsl r3,r3,#30
 2348 004a 00D4     	 bmi .L189
 2349              	.L163:
 2350              	.LVL280:
1160:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1161:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1162:../Libraries/XMCLib/src/xmc_vadc.c **** 
1163:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
1164:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2351              	 .loc 1 1164 0
 2352              	 
 2353 004c 7047     	 bx lr
 2354              	.LVL281:
 2355              	.L189:
 2356 004e 101C     	 mov r0,r2
 2357              	.LVL282:
 2358 0050 FCE7     	 b .L163
 2359              	.LVL283:
 2360              	.L188:
 2361 0052 101C     	 mov r0,r2
1157:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 2362              	 .loc 1 1157 0
 2363 0054 421C     	 add r2,r0,#1
 2364 0056 9B07     	 lsl r3,r3,#30
 2365 0058 F8D5     	 bpl .L163
 2366 005a F8E7     	 b .L189
 2367              	.L187:
 2368 005c 0A1C     	 mov r2,r1
 2369              	.LVL284:
1159:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 2370              	 .loc 1 1159 0
 2371 005e 5B08     	 lsr r3,r3,#1
 2372              	.LVL285:
 2373 0060 501C     	 add r0,r2,#1
 2374 0062 D907     	 lsl r1,r3,#31
 2375 0064 EFD4     	 bmi .L177
 2376 0066 F4E7     	 b .L188
 2377              	.L186:
 2378 0068 111C     	 mov r1,r2
 2379              	.LVL286:
 2380 006a 5B08     	 lsr r3,r3,#1
 2381              	.LVL287:
 2382 006c 4A1C     	 add r2,r1,#1
 2383 006e D807     	 lsl r0,r3,#31
 2384 0070 E5D4     	 bmi .L175
 2385 0072 F3E7     	 b .L187
 2386              	.L185:
 2387 0074 0A1C     	 mov r2,r1
 2388              	.LVL288:
 2389 0076 5B08     	 lsr r3,r3,#1
 2390              	.LVL289:
 2391 0078 511C     	 add r1,r2,#1
 2392 007a D807     	 lsl r0,r3,#31
 2393 007c DBD4     	 bmi .L173
 2394 007e F3E7     	 b .L186
 2395              	.L184:
 2396 0080 011C     	 mov r1,r0
 2397              	.LVL290:
 2398 0082 5B08     	 lsr r3,r3,#1
 2399              	.LVL291:
 2400 0084 4A1C     	 add r2,r1,#1
 2401 0086 D807     	 lsl r0,r3,#31
 2402 0088 D1D4     	 bmi .L171
 2403 008a F3E7     	 b .L185
 2404              	.L183:
 2405 008c 081C     	 mov r0,r1
 2406              	.LVL292:
 2407 008e 5B08     	 lsr r3,r3,#1
 2408              	.LVL293:
 2409 0090 411C     	 add r1,r0,#1
 2410 0092 DA07     	 lsl r2,r3,#31
 2411 0094 C7D4     	 bmi .L169
 2412 0096 F3E7     	 b .L184
 2413              	 .cfi_endproc
 2414              	.LFE162:
 2416              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 2417              	 .align 2
 2418              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 2419              	 .code 16
 2420              	 .thumb_func
 2422              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 2423              	.LFB163:
1165:../Libraries/XMCLib/src/xmc_vadc.c **** 
1166:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1167:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1168:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2424              	 .loc 1 1168 0
 2425              	 .cfi_startproc
 2426              	.LVL294:
1169:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1170:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2427              	 .loc 1 1170 0
 2428 0000 E022     	 mov r2,#224
1168:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
 2429              	 .loc 1 1168 0
 2430 0002 10B5     	 push {r4,lr}
 2431              	 .cfi_def_cfa_offset 8
 2432              	 .cfi_offset 4,-8
 2433              	 .cfi_offset 14,-4
1171:../Libraries/XMCLib/src/xmc_vadc.c **** 
1172:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1173:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1174:../Libraries/XMCLib/src/xmc_vadc.c **** 
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 2434              	 .loc 1 1175 0
 2435 0004 F024     	 mov r4,#240
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2436              	 .loc 1 1170 0
 2437 0006 5200     	 lsl r2,r2,#1
 2438 0008 8358     	 ldr r3,[r0,r2]
 2439              	.LVL295:
1176:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2440              	 .loc 1 1176 0
 2441 000a 0901     	 lsl r1,r1,#4
 2442              	.LVL296:
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2443              	 .loc 1 1175 0
 2444 000c A343     	 bic r3,r4
 2445              	.LVL297:
 2446              	 .loc 1 1176 0
 2447 000e 1943     	 orr r1,r3
 2448              	.LVL298:
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2449              	 .loc 1 1178 0
 2450 0010 8150     	 str r1,[r0,r2]
1179:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2451              	 .loc 1 1179 0
 2452              	 
 2453 0012 10BD     	 pop {r4,pc}
 2454              	 .cfi_endproc
 2455              	.LFE163:
 2457              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 2458              	 .align 2
 2459              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 2460              	 .code 16
 2461              	 .thumb_func
 2463              	XMC_VADC_GROUP_ScanRemoveChannel:
 2464              	.LFB164:
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1182:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1183:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2465              	 .loc 1 1183 0
 2466              	 .cfi_startproc
 2467              	.LVL299:
1184:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1185:../Libraries/XMCLib/src/xmc_vadc.c **** 
1186:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1187:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2468              	 .loc 1 1190 0
 2469 0000 0122     	 mov r2,#1
1183:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
 2470              	 .loc 1 1183 0
 2471 0002 10B5     	 push {r4,lr}
 2472              	 .cfi_def_cfa_offset 8
 2473              	 .cfi_offset 4,-8
 2474              	 .cfi_offset 14,-4
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2475              	 .loc 1 1189 0
 2476 0004 9424     	 mov r4,#148
 2477              	 .loc 1 1190 0
 2478 0006 8A40     	 lsl r2,r2,r1
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2479              	 .loc 1 1189 0
 2480 0008 6400     	 lsl r4,r4,#1
 2481 000a 0359     	 ldr r3,[r0,r4]
 2482              	.LVL300:
1191:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
1192:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2483              	 .loc 1 1192 0
 2484              	 
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2485              	 .loc 1 1190 0
 2486 000c 9343     	 bic r3,r2
 2487              	.LVL301:
1191:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2488              	 .loc 1 1191 0
 2489 000e 0351     	 str r3,[r0,r4]
 2490              	 .loc 1 1192 0
 2491 0010 10BD     	 pop {r4,pc}
 2492              	 .cfi_endproc
 2493              	.LFE164:
 2495 0012 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 2496              	 .align 2
 2497              	 .global XMC_VADC_GLOBAL_BackgroundInit
 2498              	 .code 16
 2499              	 .thumb_func
 2501              	XMC_VADC_GLOBAL_BackgroundInit:
 2502              	.LFB165:
1193:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GSCAN_AVAILABLE */
1194:../Libraries/XMCLib/src/xmc_vadc.c **** 
1195:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1196:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1197:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2503              	 .loc 1 1197 0
 2504              	 .cfi_startproc
 2505              	.LVL302:
 2506              	.LBB82:
 2507              	.LBB83:
2556:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2557:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2558:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2559:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2560:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2561:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2562:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2563:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2564:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2565:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2566:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2567:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2568:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2569:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2570:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2571:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2572:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2573:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2574:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2575:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2576:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2577:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2578:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2579:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2580:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2581:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2582:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2583:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2584:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2585:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2586:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2587:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2588:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2589:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2590:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2591:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2592:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2593:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2594:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2595:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2596:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2597:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2598:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2599:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2600:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2601:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2602:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2603:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2604:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2605:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2606:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2607:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2608:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2609:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2610:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2611:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2612:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2613:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2614:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2615:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2616:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2617:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2618:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2619:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2620:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2621:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2622:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2623:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2624:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2625:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2626:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2627:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2628:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2629:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2630:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2631:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2632:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2633:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2635:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2636:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2637:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2638:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2639:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2640:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2641:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2642:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2643:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2644:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2645:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2646:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2647:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2648:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2649:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2650:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2651:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2652:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2653:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2654:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2655:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2656:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2657:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2658:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2659:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2660:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2661:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2662:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2663:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2664:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2665:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2666:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2667:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2668:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2669:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2670:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2671:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2672:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2673:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2674:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2675:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2676:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2677:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2678:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2679:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2680:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2681:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2682:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2683:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2684:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2685:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2686:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2687:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2688:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2689:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2690:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2691:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2692:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2693:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2694:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2695:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2696:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2697:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2698:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2699:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2700:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2701:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2702:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2703:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2704:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2705:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2706:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2707:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2708:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2709:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2710:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2711:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2712:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2713:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2714:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2715:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2716:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2717:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2718:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2719:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2720:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2721:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2722:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2723:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2724:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2725:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2726:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2727:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2728:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2729:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2730:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2731:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2732:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2733:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2734:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2735:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2736:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2737:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2738:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2739:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2740:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2741:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2742:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2743:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2744:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2745:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2746:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2747:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2748:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2749:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2750:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2751:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2752:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2753:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2754:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2755:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2756:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2757:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2758:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2759:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2760:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2761:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2762:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2764:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2765:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2766:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2767:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2768:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2769:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2770:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2771:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2772:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2773:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2774:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2775:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2776:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2777:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2778:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2779:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2780:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2781:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2782:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2783:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2784:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2785:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2786:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2787:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2788:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2789:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2790:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2791:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2792:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2793:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2794:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2795:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2796:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2797:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2798:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2799:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2800:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2801:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2802:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2803:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2804:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2805:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2806:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2807:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2808:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2809:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2810:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2811:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2812:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2813:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2814:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2815:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2816:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2817:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2818:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2819:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2820:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2821:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2822:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2823:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2824:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2825:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2826:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2827:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2828:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2829:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2830:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2831:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2832:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2833:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2834:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2835:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2836:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2837:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2838:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2839:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2840:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2841:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2842:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
2843:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
2844:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2845:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2846:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2847:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
2848:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2849:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2850:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2851:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2852:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
2853:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2854:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2855:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2856:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2857:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2858:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
2859:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
2860:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2861:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2862:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
2863:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
2864:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
2865:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2866:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2867:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2868:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2869:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
2870:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2871:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2872:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
2873:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2874:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2875:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2876:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2877:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
2878:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2879:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2880:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2881:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2882:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
2883:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
2884:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2885:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
2886:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2887:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2888:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2889:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2890:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
2891:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2892:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2893:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2894:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2895:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2896:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2897:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2898:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
2899:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
2900:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
2901:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
2902:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2903:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2904:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
2905:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2906:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2907:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2908:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2909:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2910:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
2911:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2912:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2913:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2914:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2915:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2916:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2917:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2918:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2919:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
2920:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
2921:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
2922:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
2923:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
2924:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2925:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2926:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2927:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2928:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2929:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2930:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2931:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2932:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
2933:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2934:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2935:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2936:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2937:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
2938:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2939:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2940:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2941:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2942:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
2943:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
2944:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
2945:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
2946:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2947:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2948:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2949:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2950:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
2951:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2952:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2953:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2954:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
2955:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
2956:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2957:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2958:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
2959:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
2960:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
2961:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
2962:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
2963:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2964:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2965:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
2966:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
2967:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2968:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
2969:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2970:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2971:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2972:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
2973:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
2974:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2975:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2976:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2977:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2978:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2979:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
2980:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
2981:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
2982:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
2983:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
2984:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2985:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2986:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
2987:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2988:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
2989:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
2990:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
2991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
2992:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
2993:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
2994:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2995:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
2996:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
2997:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2998:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2999:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3000:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3001:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3002:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3003:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3004:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3005:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3006:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3007:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3008:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3009:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3010:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3011:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3012:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3013:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 2508              	 .loc 2 3013 0
 2509 0000 274B     	 ldr r3,.L197
 2510              	.LBE83:
 2511              	.LBE82:
 2512              	 .loc 1 1197 0
 2513 0002 F0B5     	 push {r4,r5,r6,r7,lr}
 2514              	 .cfi_def_cfa_offset 20
 2515              	 .cfi_offset 4,-20
 2516              	 .cfi_offset 5,-16
 2517              	 .cfi_offset 6,-12
 2518              	 .cfi_offset 7,-8
 2519              	 .cfi_offset 14,-4
 2520 0004 4646     	 mov r6,r8
 2521              	.LBB90:
 2522              	.LBB84:
 2523              	 .loc 2 3013 0
 2524 0006 9846     	 mov r8,r3
 2525 0008 8422     	 mov r2,#132
 2526              	.LBE84:
 2527              	.LBE90:
 2528              	 .loc 1 1197 0
 2529 000a 4F46     	 mov r7,r9
 2530              	.LBB91:
 2531              	.LBB85:
 2532              	 .loc 2 3013 0
 2533 000c 4446     	 mov r4,r8
 2534              	.LBE85:
 2535              	.LBE91:
 2536              	 .loc 1 1197 0
 2537 000e 8C46     	 mov ip,r1
 2538              	.LBB92:
 2539              	.LBB86:
 2540              	 .loc 2 3013 0
 2541 0010 9958     	 ldr r1,[r3,r2]
 2542              	.LVL303:
 2543 0012 244B     	 ldr r3,.L197+4
 2544              	.LBE86:
 2545              	.LBE92:
 2546              	 .loc 1 1197 0
 2547 0014 C0B4     	 push {r6,r7}
 2548              	 .cfi_def_cfa_offset 28
 2549              	 .cfi_offset 8,-28
 2550              	 .cfi_offset 9,-24
 2551              	.LBB93:
 2552              	.LBB87:
 2553              	 .loc 2 3013 0
 2554 0016 1940     	 and r1,r3
 2555 0018 A150     	 str r1,[r4,r2]
 2556              	.LVL304:
 2557 001a 2349     	 ldr r1,.L197+8
 2558              	.LBE87:
 2559              	.LBE93:
1198:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1199:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1200:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1205:../Libraries/XMCLib/src/xmc_vadc.c **** 
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1209:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 2560              	 .loc 1 1213 0
 2561 001c 0327     	 mov r7,#3
 2562              	.LBB94:
 2563              	.LBB88:
 2564              	 .loc 2 3013 0
 2565 001e 8C58     	 ldr r4,[r1,r2]
 2566              	.LBE88:
 2567              	.LBE94:
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1215:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1220:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
1221:../Libraries/XMCLib/src/xmc_vadc.c **** 
1222:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 2568              	 .loc 1 1222 0
 2569 0020 224E     	 ldr r6,.L197+12
 2570              	.LBB95:
 2571              	.LBB89:
 2572              	 .loc 2 3013 0
 2573 0022 2340     	 and r3,r4
 2574 0024 8B50     	 str r3,[r1,r2]
 2575              	.LVL305:
 2576              	.LBE89:
 2577              	.LBE95:
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2578              	 .loc 1 1213 0
 2579 0026 6346     	 mov r3,ip
 2580 0028 1B78     	 ldrb r3,[r3]
 2581              	 .loc 1 1222 0
 2582 002a B146     	 mov r9,r6
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2583              	 .loc 1 1213 0
 2584 002c 1F40     	 and r7,r3
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2585              	 .loc 1 1215 0
 2586 002e 3D1C     	 mov r5,r7
 2587 0030 6C1E     	 sub r4,r5,#1
 2588 0032 A541     	 sbc r5,r5,r4
1220:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2589              	 .loc 1 1220 0
 2590 0034 4446     	 mov r4,r8
 2591 0036 A458     	 ldr r4,[r4,r2]
1223:../Libraries/XMCLib/src/xmc_vadc.c **** 
1224:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 2592              	 .loc 1 1225 0
 2593 0038 1B07     	 lsl r3,r3,#28
1222:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2594              	 .loc 1 1222 0
 2595 003a 3440     	 and r4,r6
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
1229:../Libraries/XMCLib/src/xmc_vadc.c **** 
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 2596              	 .loc 1 1230 0
 2597 003c 4646     	 mov r6,r8
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   
 2598              	 .loc 1 1225 0
 2599 003e 9B0F     	 lsr r3,r3,#30
 2600 0040 1B02     	 lsl r3,r3,#8
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2601              	 .loc 1 1215 0
 2602 0042 ED02     	 lsl r5,r5,#11
 2603              	.LVL306:
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   
 2604              	 .loc 1 1225 0
 2605 0044 1C43     	 orr r4,r3
 2606              	.LVL307:
1228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2607              	 .loc 1 1228 0
 2608 0046 2C43     	 orr r4,r5
 2609              	.LVL308:
 2610              	 .loc 1 1230 0
 2611 0048 B450     	 str r4,[r6,r2]
 2612              	.LVL309:
1222:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2613              	 .loc 1 1222 0
 2614 004a 4E46     	 mov r6,r9
1220:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2615              	 .loc 1 1220 0
 2616 004c 8C58     	 ldr r4,[r1,r2]
 2617              	.LVL310:
1222:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2618              	 .loc 1 1222 0
 2619 004e 2640     	 and r6,r4
 2620              	.LVL311:
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   
 2621              	 .loc 1 1225 0
 2622 0050 3343     	 orr r3,r6
 2623              	.LVL312:
1228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2624              	 .loc 1 1228 0
 2625 0052 2B43     	 orr r3,r5
 2626              	.LVL313:
 2627              	 .loc 1 1230 0
 2628 0054 8B50     	 str r3,[r1,r2]
 2629              	.LVL314:
1231:../Libraries/XMCLib/src/xmc_vadc.c ****   
1232:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1233:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1234:../Libraries/XMCLib/src/xmc_vadc.c **** 
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 2630              	 .loc 1 1236 0
 2631 0056 6246     	 mov r2,ip
 2632 0058 154B     	 ldr r3,.L197+16
 2633              	.LVL315:
 2634 005a 5268     	 ldr r2,[r2,#4]
 2635 005c 1343     	 orr r3,r2
 2636 005e 8022     	 mov r2,#128
 2637 0060 9200     	 lsl r2,r2,#2
 2638 0062 8350     	 str r3,[r0,r2]
 2639              	.LVL316:
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 2640              	 .loc 1 1239 0
 2641 0064 6346     	 mov r3,ip
 2642 0066 0122     	 mov r2,#1
 2643 0068 9B68     	 ldr r3,[r3,#8]
 2644 006a 1343     	 orr r3,r2
 2645 006c 8122     	 mov r2,#129
 2646 006e 9200     	 lsl r2,r2,#2
 2647 0070 8350     	 str r3,[r0,r2]
1240:../Libraries/XMCLib/src/xmc_vadc.c ****   
1241:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2648              	 .loc 1 1242 0
 2649 0072 022F     	 cmp r7,#2
 2650 0074 0ED0     	 beq .L196
 2651              	.L194:
 2652              	.LVL317:
 2653              	.LBB96:
 2654              	.LBB97:
2991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 2655              	 .loc 2 2991 0 discriminator 1
 2656 0076 8423     	 mov r3,#132
 2657 0078 8020     	 mov r0,#128
 2658              	.LVL318:
 2659 007a 094A     	 ldr r2,.L197
 2660 007c C004     	 lsl r0,r0,#19
 2661 007e D158     	 ldr r1,[r2,r3]
 2662              	.LBE97:
 2663              	.LBE96:
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1244:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1246:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1247:../Libraries/XMCLib/src/xmc_vadc.c ****   
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1249:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1251:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   
1255:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2664              	 .loc 1 1255 0 discriminator 1
 2665              	 
 2666              	.LBB99:
 2667              	.LBB98:
2991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 2668              	 .loc 2 2991 0 discriminator 1
 2669 0080 0143     	 orr r1,r0
 2670 0082 D150     	 str r1,[r2,r3]
 2671              	.LVL319:
 2672 0084 0849     	 ldr r1,.L197+8
 2673 0086 CA58     	 ldr r2,[r1,r3]
 2674 0088 0243     	 orr r2,r0
 2675 008a CA50     	 str r2,[r1,r3]
 2676              	.LVL320:
 2677              	.LVL321:
 2678              	.LVL322:
 2679              	.LBE98:
 2680              	.LBE99:
 2681              	 .loc 1 1255 0 discriminator 1
 2682 008c 0CBC     	 pop {r2,r3}
 2683 008e 9046     	 mov r8,r2
 2684 0090 9946     	 mov r9,r3
 2685 0092 F0BD     	 pop {r4,r5,r6,r7,pc}
 2686              	.LVL323:
 2687              	.L196:
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2688              	 .loc 1 1244 0
 2689 0094 8021     	 mov r1,#128
 2690 0096 8358     	 ldr r3,[r0,r2]
 2691 0098 4902     	 lsl r1,r1,#9
 2692 009a 0B43     	 orr r3,r1
 2693 009c 8350     	 str r3,[r0,r2]
 2694 009e EAE7     	 b .L194
 2695              	.L198:
 2696              	 .align 2
 2697              	.L197:
 2698 00a0 00040348 	 .word 1208157184
 2699 00a4 FFFFFFFB 	 .word -67108865
 2700 00a8 00080348 	 .word 1208158208
 2701 00ac FFFCFFFF 	 .word -769
 2702 00b0 00808000 	 .word 8421376
 2703              	 .cfi_endproc
 2704              	.LFE165:
 2706              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 2707              	 .align 2
 2708              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 2709              	 .code 16
 2710              	 .thumb_func
 2712              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 2713              	.LFB166:
1256:../Libraries/XMCLib/src/xmc_vadc.c **** 
1257:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1258:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1259:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2714              	 .loc 1 1259 0
 2715              	 .cfi_startproc
 2716              	.LVL324:
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1261:../Libraries/XMCLib/src/xmc_vadc.c **** 
1262:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 2717              	 .loc 1 1266 0
 2718 0000 8022     	 mov r2,#128
 2719 0002 9200     	 lsl r2,r2,#2
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2720              	 .loc 1 1259 0
 2721 0004 10B5     	 push {r4,lr}
 2722              	 .cfi_def_cfa_offset 8
 2723              	 .cfi_offset 4,-8
 2724              	 .cfi_offset 14,-4
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 2725              	 .loc 1 1268 0
 2726 0006 054B     	 ldr r3,.L200
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 2727              	 .loc 1 1266 0
 2728 0008 8458     	 ldr r4,[r0,r2]
 2729              	.LVL325:
1269:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 2730              	 .loc 1 1269 0
 2731 000a 0902     	 lsl r1,r1,#8
 2732              	.LVL326:
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 2733              	 .loc 1 1268 0
 2734 000c 2340     	 and r3,r4
 2735 000e 8024     	 mov r4,#128
 2736              	.LVL327:
 2737 0010 2402     	 lsl r4,r4,#8
 2738 0012 2343     	 orr r3,r4
 2739              	.LVL328:
 2740              	 .loc 1 1269 0
 2741 0014 1943     	 orr r1,r3
 2742              	.LVL329:
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 2743              	 .loc 1 1270 0
 2744 0016 8150     	 str r1,[r0,r2]
1271:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2745              	 .loc 1 1271 0
 2746              	 
 2747 0018 10BD     	 pop {r4,pc}
 2748              	.L201:
 2749 001a C046     	 .align 2
 2750              	.L200:
 2751 001c FFF0FFFF 	 .word -3841
 2752              	 .cfi_endproc
 2753              	.LFE166:
 2755              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 2756              	 .align 2
 2757              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 2758              	 .code 16
 2759              	 .thumb_func
 2761              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 2762              	.LFB167:
1272:../Libraries/XMCLib/src/xmc_vadc.c **** 
1273:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1274:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1275:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1276:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2763              	 .loc 1 1276 0
 2764              	 .cfi_startproc
 2765              	.LVL330:
1277:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1278:../Libraries/XMCLib/src/xmc_vadc.c **** 
1279:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1280:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1281:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1282:../Libraries/XMCLib/src/xmc_vadc.c **** 
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 2766              	 .loc 1 1283 0
 2767 0000 8022     	 mov r2,#128
 2768 0002 9200     	 lsl r2,r2,#2
1276:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2769              	 .loc 1 1276 0
 2770 0004 10B5     	 push {r4,lr}
 2771              	 .cfi_def_cfa_offset 8
 2772              	 .cfi_offset 4,-8
 2773              	 .cfi_offset 14,-4
1284:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 2774              	 .loc 1 1285 0
 2775 0006 054B     	 ldr r3,.L203
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 2776              	 .loc 1 1283 0
 2777 0008 8458     	 ldr r4,[r0,r2]
 2778              	.LVL331:
1286:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 2779              	 .loc 1 1286 0
 2780 000a 4903     	 lsl r1,r1,#13
 2781              	.LVL332:
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 2782              	 .loc 1 1285 0
 2783 000c 2340     	 and r3,r4
 2784 000e 8024     	 mov r4,#128
 2785              	.LVL333:
 2786 0010 2402     	 lsl r4,r4,#8
 2787 0012 2343     	 orr r3,r4
 2788              	.LVL334:
 2789              	 .loc 1 1286 0
 2790 0014 1943     	 orr r1,r3
 2791              	.LVL335:
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 2792              	 .loc 1 1287 0
 2793 0016 8150     	 str r1,[r0,r2]
1288:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2794              	 .loc 1 1288 0
 2795              	 
 2796 0018 10BD     	 pop {r4,pc}
 2797              	.L204:
 2798 001a C046     	 .align 2
 2799              	.L203:
 2800 001c FF9FFFFF 	 .word -24577
 2801              	 .cfi_endproc
 2802              	.LFE167:
 2804              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 2805              	 .align 2
 2806              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 2807              	 .code 16
 2808              	 .thumb_func
 2810              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 2811              	.LFB168:
1289:../Libraries/XMCLib/src/xmc_vadc.c **** 
1290:../Libraries/XMCLib/src/xmc_vadc.c **** 
1291:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1292:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1293:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2812              	 .loc 1 1293 0
 2813              	 .cfi_startproc
 2814              	.LVL336:
1294:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1295:../Libraries/XMCLib/src/xmc_vadc.c **** 
1296:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 2815              	 .loc 1 1299 0
 2816 0000 8022     	 mov r2,#128
 2817 0002 9200     	 lsl r2,r2,#2
1293:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
 2818              	 .loc 1 1293 0
 2819 0004 10B5     	 push {r4,lr}
 2820              	 .cfi_def_cfa_offset 8
 2821              	 .cfi_offset 4,-8
 2822              	 .cfi_offset 14,-4
1300:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 2823              	 .loc 1 1301 0
 2824 0006 054B     	 ldr r3,.L206
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 2825              	 .loc 1 1299 0
 2826 0008 8458     	 ldr r4,[r0,r2]
 2827              	.LVL337:
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 2828              	 .loc 1 1302 0
 2829 000a 0904     	 lsl r1,r1,#16
 2830              	.LVL338:
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 2831              	 .loc 1 1301 0
 2832 000c 2340     	 and r3,r4
 2833 000e 8024     	 mov r4,#128
 2834              	.LVL339:
 2835 0010 2404     	 lsl r4,r4,#16
 2836 0012 2343     	 orr r3,r4
 2837              	.LVL340:
 2838              	 .loc 1 1302 0
 2839 0014 1943     	 orr r1,r3
 2840              	.LVL341:
1303:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 2841              	 .loc 1 1303 0
 2842 0016 8150     	 str r1,[r0,r2]
1304:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2843              	 .loc 1 1304 0
 2844              	 
 2845 0018 10BD     	 pop {r4,pc}
 2846              	.L207:
 2847 001a C046     	 .align 2
 2848              	.L206:
 2849 001c FFFFF0FF 	 .word -983041
 2850              	 .cfi_endproc
 2851              	.LFE168:
 2853              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 2854              	 .align 2
 2855              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 2856              	 .code 16
 2857              	 .thumb_func
 2859              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 2860              	.LFB169:
1305:../Libraries/XMCLib/src/xmc_vadc.c **** 
1306:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1307:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1308:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2861              	 .loc 1 1308 0
 2862              	 .cfi_startproc
 2863              	.LVL342:
1309:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1310:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1311:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1313:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1315:../Libraries/XMCLib/src/xmc_vadc.c **** 
1316:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 2864              	 .loc 1 1317 0
 2865 0000 8023     	 mov r3,#128
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
 2866              	 .loc 1 1308 0
 2867 0002 F0B5     	 push {r4,r5,r6,r7,lr}
 2868              	 .cfi_def_cfa_offset 20
 2869              	 .cfi_offset 4,-20
 2870              	 .cfi_offset 5,-16
 2871              	 .cfi_offset 6,-12
 2872              	 .cfi_offset 7,-8
 2873              	 .cfi_offset 14,-4
 2874 0004 4746     	 mov r7,r8
 2875              	 .loc 1 1317 0
 2876 0006 9B00     	 lsl r3,r3,#2
 2877 0008 C258     	 ldr r2,[r0,r3]
1318:../Libraries/XMCLib/src/xmc_vadc.c **** 
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
1320:../Libraries/XMCLib/src/xmc_vadc.c **** 
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1322:../Libraries/XMCLib/src/xmc_vadc.c **** 
1323:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1325:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1326:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 2878              	 .loc 1 1326 0
 2879 000a 1B49     	 ldr r1,.L213
1317:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2880              	 .loc 1 1317 0
 2881 000c 9046     	 mov r8,r2
 2882              	.LVL343:
1319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2883              	 .loc 1 1319 0
 2884 000e 1B4A     	 ldr r2,.L213+4
 2885              	.LVL344:
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
 2886              	 .loc 1 1308 0
 2887 0010 80B4     	 push {r7}
 2888              	 .cfi_def_cfa_offset 24
 2889              	 .cfi_offset 8,-24
1319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 2890              	 .loc 1 1319 0
 2891 0012 C250     	 str r2,[r0,r3]
 2892              	.LVL345:
 2893              	 .loc 1 1326 0
 2894 0014 7D3B     	 sub r3,r3,#125
 2895 0016 FF3B     	 sub r3,r3,#255
 2896 0018 CE58     	 ldr r6,[r1,r3]
 2897              	.LVL346:
 2898              	.LBB100:
 2899              	.LBB101:
 2900              	 .loc 2 3013 0
 2901 001a 194A     	 ldr r2,.L213+8
 2902 001c CD58     	 ldr r5,[r1,r3]
 2903              	.LBE101:
 2904              	.LBE100:
 2905              	 .loc 1 1326 0
 2906 001e 194F     	 ldr r7,.L213+12
 2907              	.LBB105:
 2908              	.LBB102:
 2909              	 .loc 2 3013 0
 2910 0020 1540     	 and r5,r2
 2911 0022 CD50     	 str r5,[r1,r3]
 2912              	.LVL347:
 2913              	.LBE102:
 2914              	.LBE105:
 2915              	 .loc 1 1326 0
 2916 0024 FD58     	 ldr r5,[r7,r3]
 2917              	.LBB106:
 2918              	.LBB103:
 2919              	 .loc 2 3013 0
 2920 0026 FC58     	 ldr r4,[r7,r3]
 2921              	.LBE103:
 2922              	.LBE106:
 2923              	 .loc 1 1326 0
 2924 0028 AD0E     	 lsr r5,r5,#26
 2925              	.LVL348:
 2926              	.LBB107:
 2927              	.LBB104:
 2928              	 .loc 2 3013 0
 2929 002a 2240     	 and r2,r4
 2930 002c FA50     	 str r2,[r7,r3]
 2931              	.LVL349:
 2932              	.LBE104:
 2933              	.LBE107:
1327:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
1328:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1329:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1330:../Libraries/XMCLib/src/xmc_vadc.c **** 
1331:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 2934              	 .loc 1 1332 0
 2935 002e 8127     	 mov r7,#129
 2936 0030 8024     	 mov r4,#128
 2937 0032 BF00     	 lsl r7,r7,#2
 2938 0034 C259     	 ldr r2,[r0,r7]
 2939 0036 6400     	 lsl r4,r4,#1
 2940 0038 2243     	 orr r2,r4
 2941 003a C251     	 str r2,[r0,r7]
 2942              	.LVL350:
1333:../Libraries/XMCLib/src/xmc_vadc.c **** 
1334:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1338:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 2943              	 .loc 1 1338 0
 2944 003c B20E     	 lsr r2,r6,#26
 2945 003e 012A     	 cmp r2,#1
 2946 0040 0AD0     	 beq .L211
 2947              	.LVL351:
 2948 0042 012D     	 cmp r5,#1
 2949 0044 0FD0     	 beq .L212
 2950              	.L210:
 2951              	.LVL352:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1340:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
1341:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1343:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1344:../Libraries/XMCLib/src/xmc_vadc.c **** 
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1346:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 2952              	 .loc 1 1346 0
 2953 0046 4246     	 mov r2,r8
 2954 0048 0C4B     	 ldr r3,.L213+4
1347:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2955              	 .loc 1 1347 0
 2956              	 
1346:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2957              	 .loc 1 1346 0
 2958 004a 1343     	 orr r3,r2
 2959 004c 8022     	 mov r2,#128
 2960 004e 9200     	 lsl r2,r2,#2
 2961 0050 8350     	 str r3,[r0,r2]
 2962              	.LVL353:
 2963              	 .loc 1 1347 0
 2964 0052 04BC     	 pop {r2}
 2965 0054 9046     	 mov r8,r2
 2966 0056 F0BD     	 pop {r4,r5,r6,r7,pc}
 2967              	.LVL354:
 2968              	.L211:
 2969              	.LBB108:
 2970              	.LBB109:
2991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 2971              	 .loc 2 2991 0
 2972 0058 8026     	 mov r6,#128
 2973 005a CA58     	 ldr r2,[r1,r3]
 2974 005c F604     	 lsl r6,r6,#19
 2975 005e 3243     	 orr r2,r6
 2976 0060 CA50     	 str r2,[r1,r3]
 2977              	.LVL355:
 2978              	.LBE109:
 2979              	.LBE108:
1338:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2980              	 .loc 1 1338 0
 2981 0062 012D     	 cmp r5,#1
 2982 0064 EFD1     	 bne .L210
 2983              	.LVL356:
 2984              	.L212:
 2985              	.LBB111:
 2986              	.LBB110:
2991:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 2987              	 .loc 2 2991 0
 2988 0066 8422     	 mov r2,#132
 2989 0068 8025     	 mov r5,#128
 2990 006a 0649     	 ldr r1,.L213+12
 2991 006c ED04     	 lsl r5,r5,#19
 2992 006e 8B58     	 ldr r3,[r1,r2]
 2993 0070 2B43     	 orr r3,r5
 2994 0072 8B50     	 str r3,[r1,r2]
 2995 0074 E7E7     	 b .L210
 2996              	.L214:
 2997 0076 C046     	 .align 2
 2998              	.L213:
 2999 0078 00040348 	 .word 1208157184
 3000 007c 00808000 	 .word 8421376
 3001 0080 FFFFFFFB 	 .word -67108865
 3002 0084 00080348 	 .word 1208158208
 3003              	.LBE110:
 3004              	.LBE111:
 3005              	 .cfi_endproc
 3006              	.LFE169:
 3008              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 3009              	 .align 2
 3010              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 3011              	 .code 16
 3012              	 .thumb_func
 3014              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 3015              	.LFB170:
1348:../Libraries/XMCLib/src/xmc_vadc.c **** 
1349:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1350:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1351:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3016              	 .loc 1 1351 0
 3017              	 .cfi_startproc
 3018              	.LVL357:
1352:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1356:../Libraries/XMCLib/src/xmc_vadc.c **** 
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1358:../Libraries/XMCLib/src/xmc_vadc.c **** 
1359:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1364:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 3019              	 .loc 1 1364 0
 3020 0000 C023     	 mov r3,#192
 3021 0002 5B00     	 lsl r3,r3,#1
 3022 0004 C258     	 ldr r2,[r0,r3]
1351:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 3023              	 .loc 1 1351 0
 3024 0006 10B5     	 push {r4,lr}
 3025              	 .cfi_def_cfa_offset 8
 3026              	 .cfi_offset 4,-8
 3027              	 .cfi_offset 14,-4
1359:../Libraries/XMCLib/src/xmc_vadc.c ****   
 3028              	 .loc 1 1359 0
 3029 0008 0023     	 mov r3,#0
 3030              	 .loc 1 1364 0
 3031 000a 002A     	 cmp r2,#0
 3032 000c 1AD0     	 beq .L216
1365:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1366:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
1367:../Libraries/XMCLib/src/xmc_vadc.c **** 
1368:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
1369:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1370:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 3033              	 .loc 1 1370 0
 3034 000e 0121     	 mov r1,#1
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3035              	 .loc 1 1366 0
 3036 0010 C133     	 add r3,r3,#193
 3037 0012 FF33     	 add r3,r3,#255
 3038 0014 C258     	 ldr r2,[r0,r3]
 3039              	.LVL358:
 3040              	 .loc 1 1370 0
 3041 0016 0B1C     	 mov r3,r1
1371:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1372:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
1373:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1374:../Libraries/XMCLib/src/xmc_vadc.c **** 
1375:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 3042              	 .loc 1 1375 0
 3043 0018 5408     	 lsr r4,r2,#1
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3044              	 .loc 1 1372 0
 3045 001a 0C40     	 and r4,r1
1370:../Libraries/XMCLib/src/xmc_vadc.c ****         {
 3046              	 .loc 1 1370 0
 3047 001c 1340     	 and r3,r2
 3048              	.LVL359:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3049              	 .loc 1 1372 0
 3050 001e 1B19     	 add r3,r3,r4
 3051              	.LVL360:
 3052              	 .loc 1 1375 0
 3053 0020 9408     	 lsr r4,r2,#2
 3054              	.LVL361:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3055              	 .loc 1 1372 0
 3056 0022 0C40     	 and r4,r1
 3057              	.LVL362:
 3058 0024 1B19     	 add r3,r3,r4
 3059              	.LVL363:
 3060              	 .loc 1 1375 0
 3061 0026 D408     	 lsr r4,r2,#3
 3062              	.LVL364:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3063              	 .loc 1 1372 0
 3064 0028 0C40     	 and r4,r1
 3065              	.LVL365:
 3066 002a 1B19     	 add r3,r3,r4
 3067              	.LVL366:
 3068              	 .loc 1 1375 0
 3069 002c 1409     	 lsr r4,r2,#4
 3070              	.LVL367:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3071              	 .loc 1 1372 0
 3072 002e 0C40     	 and r4,r1
 3073              	.LVL368:
 3074 0030 1B19     	 add r3,r3,r4
 3075              	.LVL369:
 3076              	 .loc 1 1375 0
 3077 0032 5409     	 lsr r4,r2,#5
 3078              	.LVL370:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3079              	 .loc 1 1372 0
 3080 0034 0C40     	 and r4,r1
 3081              	.LVL371:
 3082              	 .loc 1 1375 0
 3083 0036 9209     	 lsr r2,r2,#6
 3084              	.LVL372:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3085              	 .loc 1 1372 0
 3086 0038 1140     	 and r1,r2
 3087 003a 1B19     	 add r3,r3,r4
 3088              	.LVL373:
 3089 003c 9207     	 lsl r2,r2,#30
 3090              	.LVL374:
 3091 003e 5B18     	 add r3,r3,r1
 3092              	.LVL375:
 3093 0040 D20F     	 lsr r2,r2,#31
 3094 0042 9B18     	 add r3,r3,r2
 3095              	.LVL376:
 3096              	.L216:
1364:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3097              	 .loc 1 1364 0
 3098 0044 C222     	 mov r2,#194
 3099 0046 5200     	 lsl r2,r2,#1
 3100 0048 8258     	 ldr r2,[r0,r2]
 3101 004a 002A     	 cmp r2,#0
 3102 004c 1BD0     	 beq .L229
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3103              	 .loc 1 1366 0
 3104 004e E222     	 mov r2,#226
1370:../Libraries/XMCLib/src/xmc_vadc.c ****         {
 3105              	 .loc 1 1370 0
 3106 0050 0121     	 mov r1,#1
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3107              	 .loc 1 1366 0
 3108 0052 5200     	 lsl r2,r2,#1
 3109 0054 8258     	 ldr r2,[r0,r2]
 3110              	.LVL377:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3111              	 .loc 1 1372 0
 3112 0056 081C     	 mov r0,r1
 3113              	.LVL378:
 3114 0058 1040     	 and r0,r2
 3115 005a 1B18     	 add r3,r3,r0
 3116              	.LVL379:
 3117              	 .loc 1 1375 0
 3118 005c 5008     	 lsr r0,r2,#1
 3119              	.LVL380:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3120              	 .loc 1 1372 0
 3121 005e 0840     	 and r0,r1
 3122              	.LVL381:
 3123 0060 1B18     	 add r3,r3,r0
 3124              	.LVL382:
 3125              	 .loc 1 1375 0
 3126 0062 9008     	 lsr r0,r2,#2
 3127              	.LVL383:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3128              	 .loc 1 1372 0
 3129 0064 0840     	 and r0,r1
 3130              	.LVL384:
 3131 0066 1B18     	 add r3,r3,r0
 3132              	.LVL385:
 3133              	 .loc 1 1375 0
 3134 0068 D008     	 lsr r0,r2,#3
 3135              	.LVL386:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3136              	 .loc 1 1372 0
 3137 006a 0840     	 and r0,r1
 3138              	.LVL387:
 3139 006c 1B18     	 add r3,r3,r0
 3140              	.LVL388:
 3141              	 .loc 1 1375 0
 3142 006e 1009     	 lsr r0,r2,#4
 3143              	.LVL389:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3144              	 .loc 1 1372 0
 3145 0070 0840     	 and r0,r1
 3146              	.LVL390:
 3147 0072 1B18     	 add r3,r3,r0
 3148              	.LVL391:
 3149              	 .loc 1 1375 0
 3150 0074 5009     	 lsr r0,r2,#5
 3151              	.LVL392:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3152              	 .loc 1 1372 0
 3153 0076 0840     	 and r0,r1
 3154              	.LVL393:
 3155              	 .loc 1 1375 0
 3156 0078 9209     	 lsr r2,r2,#6
 3157              	.LVL394:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****         }
 3158              	 .loc 1 1372 0
 3159 007a 1140     	 and r1,r2
 3160 007c 1B18     	 add r3,r3,r0
 3161              	.LVL395:
 3162 007e 9207     	 lsl r2,r2,#30
 3163              	.LVL396:
 3164 0080 5B18     	 add r3,r3,r1
 3165              	.LVL397:
 3166 0082 D20F     	 lsr r2,r2,#31
 3167 0084 9B18     	 add r3,r3,r2
 3168              	.LVL398:
 3169              	.L229:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1377:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1378:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1379:../Libraries/XMCLib/src/xmc_vadc.c **** 
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
1381:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3170              	 .loc 1 1381 0 discriminator 2
 3171 0086 181C     	 mov r0,r3
 3172              	 
 3173 0088 10BD     	 pop {r4,pc}
 3174              	 .cfi_endproc
 3175              	.LFE170:
 3177 008a C046     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 3178              	 .align 2
 3179              	 .global XMC_VADC_GROUP_QueueInit
 3180              	 .code 16
 3181              	 .thumb_func
 3183              	XMC_VADC_GROUP_QueueInit:
 3184              	.LFB171:
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1384:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1385:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1386:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3185              	 .loc 1 1386 0
 3186              	 .cfi_startproc
 3187              	.LVL399:
 3188 0000 70B5     	 push {r4,r5,r6,lr}
 3189              	 .cfi_def_cfa_offset 16
 3190              	 .cfi_offset 4,-16
 3191              	 .cfi_offset 5,-12
 3192              	 .cfi_offset 6,-8
 3193              	 .cfi_offset 14,-4
 3194              	.LBB112:
 3195              	.LBB113:
3014:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3015:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3016:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3017:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3018:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3019:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3020:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3021:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3022:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3023:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3024:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3025:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3026:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3027:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3028:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3029:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3030:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3031:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3032:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3033:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3034:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3035:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3036:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3037:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3038:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3039:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3040:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3041:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3042:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3043:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3044:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3045:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3046:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3047:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3048:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3049:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3050:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3051:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3052:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3053:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3054:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3055:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3056:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3057:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3058:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3059:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3060:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3061:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3062:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3063:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3064:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3065:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3066:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3067:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3068:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3069:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3070:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3071:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3072:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3073:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3074:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3075:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3076:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3077:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3078:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3079:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3080:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3081:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3082:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3083:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3084:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3085:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3086:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3087:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3088:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3089:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3090:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3091:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3092:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3093:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3094:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3095:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3096:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3097:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3098:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3099:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3100:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3101:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3102:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3103:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3104:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3105:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3106:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3107:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3108:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3109:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3110:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3111:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3112:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3113:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3114:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3115:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3116:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3117:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3118:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3119:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3120:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3121:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3122:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3123:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3124:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3125:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3126:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3127:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3128:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3129:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3130:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3131:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3132:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3133:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3134:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3135:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3136:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3137:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3138:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3139:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3140:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3141:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3142:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3143:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3144:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3145:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3146:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3147:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3148:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3149:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3150:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3151:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3152:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3153:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3154:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3155:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3156:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3157:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3158:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3159:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3160:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3161:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3162:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3163:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3164:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3165:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3166:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3167:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3168:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3169:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3170:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3171:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3172:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3173:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3174:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3175:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3176:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3177:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3178:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3179:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3180:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3181:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3182:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3183:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3184:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3185:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3186:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3187:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3188:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3189:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3190:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3191:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3192:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3193:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3194:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3195:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3196:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3197:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3198:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3199:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3200:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3201:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3202:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3203:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3204:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3205:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3206:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3207:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3208:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3209:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3210:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3211:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3212:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3213:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3214:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3215:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3216:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3217:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3218:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3219:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3220:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3221:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3222:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3223:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3224:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3225:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3226:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3227:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3228:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3229:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3230:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3231:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3232:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3233:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3234:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3235:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3236:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3237:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3238:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3239:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3240:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3241:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3242:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3243:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3244:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3245:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3246:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3247:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3248:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3249:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3250:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3251:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3252:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3253:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3254:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3255:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3256:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3257:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3258:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3259:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3260:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3261:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3262:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3263:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3264:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3265:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3266:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3267:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3268:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3269:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3270:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3271:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3272:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3273:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3274:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3275:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3276:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3277:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3278:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3279:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3280:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3281:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3282:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3283:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3284:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3285:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3286:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3287:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3288:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3289:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3290:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3291:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3292:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3293:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3294:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3295:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3296:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3297:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3298:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3299:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3300:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3301:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3302:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3303:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3304:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3305:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3306:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3307:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3308:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3309:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3310:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3311:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3312:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3313:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3314:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3315:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3316:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3317:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3318:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3319:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3320:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3321:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3322:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3323:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3324:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3325:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3327:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3328:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3329:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3330:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3331:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3332:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3333:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3334:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3335:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3336:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3337:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3338:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3339:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3340:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3341:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3342:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3343:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3344:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3345:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3346:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3347:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3348:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3349:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3350:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3351:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3352:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3353:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3354:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3355:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3356:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3357:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3358:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3359:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3360:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3361:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3362:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3363:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3364:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3365:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3366:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3367:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3368:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3369:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3370:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3371:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Group Pointer", (global_ptr == 
3372:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3373:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3374:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3375:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3376:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3377:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3378:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3379:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3380:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3381:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3382:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3383:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3384:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3385:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3386:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3387:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3388:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3389:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3390:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3391:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3392:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3393:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Group Pointer", (global_ptr ==
3394:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3395:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3396:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3397:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3398:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3399:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3400:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3401:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3402:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3403:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3404:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3405:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3406:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3407:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3408:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3409:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3410:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3411:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3412:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3413:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3414:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3415:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3416:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3417:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3418:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3419:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3420:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3421:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3422:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3423:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3424:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3425:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3426:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3427:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3428:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3429:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3430:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3431:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3432:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3433:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3434:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3435:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3436:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3437:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3438:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3439:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3440:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3441:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3442:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3443:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3444:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3445:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3446:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3447:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3448:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3449:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3450:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3451:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3452:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3453:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3454:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3455:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3456:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3457:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3458:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3459:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 3196              	 .loc 2 3460 0
 3197 0002 8425     	 mov r5,#132
 3198              	.LBE113:
 3199              	.LBE112:
1387:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1388:../Libraries/XMCLib/src/xmc_vadc.c **** 
1389:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1390:../Libraries/XMCLib/src/xmc_vadc.c **** 
1391:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1393:../Libraries/XMCLib/src/xmc_vadc.c ****   
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
1395:../Libraries/XMCLib/src/xmc_vadc.c **** 
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 3200              	 .loc 1 1397 0
 3201 0004 0326     	 mov r6,#3
 3202              	.LBB116:
 3203              	.LBB114:
 3204              	 .loc 2 3460 0
 3205 0006 4259     	 ldr r2,[r0,r5]
 3206 0008 1B4B     	 ldr r3,.L264
 3207              	.LBE114:
 3208              	.LBE116:
1398:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3209              	 .loc 1 1398 0
 3210 000a 0C78     	 ldrb r4,[r1]
 3211              	.LBB117:
 3212              	.LBB115:
 3213              	 .loc 2 3460 0
 3214 000c 1340     	 and r3,r2
 3215 000e 4351     	 str r3,[r0,r5]
 3216              	.LBE115:
 3217              	.LBE117:
1394:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3218              	 .loc 1 1394 0
 3219 0010 4359     	 ldr r3,[r0,r5]
 3220              	.LVL400:
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3221              	 .loc 1 1397 0
 3222 0012 B343     	 bic r3,r6
 3223              	.LVL401:
 3224 0014 1A1C     	 mov r2,r3
 3225              	.LVL402:
 3226              	 .loc 1 1398 0
 3227 0016 2307     	 lsl r3,r4,#28
 3228 0018 9B0F     	 lsr r3,r3,#30
 3229 001a 1343     	 orr r3,r2
 3230              	.LVL403:
1399:../Libraries/XMCLib/src/xmc_vadc.c **** 
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3231              	 .loc 1 1401 0
 3232 001c 3440     	 and r4,r6
 3233 001e 1CD0     	 beq .L261
1402:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1403:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 3234              	 .loc 1 1403 0
 3235 0020 0822     	 mov r2,#8
 3236 0022 1343     	 orr r3,r2
 3237              	.LVL404:
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1405:../Libraries/XMCLib/src/xmc_vadc.c **** 
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3238              	 .loc 1 1406 0
 3239 0024 4351     	 str r3,[r0,r5]
1407:../Libraries/XMCLib/src/xmc_vadc.c **** 
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 3240              	 .loc 1 1409 0
 3241 0026 4A68     	 ldr r2,[r1,#4]
 3242 0028 144B     	 ldr r3,.L264+4
 3243              	.LVL405:
 3244 002a 1343     	 orr r3,r2
 3245 002c 8022     	 mov r2,#128
 3246 002e 5200     	 lsl r2,r2,#1
 3247 0030 8350     	 str r3,[r0,r2]
 3248              	.LVL406:
1410:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1411:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1412:../Libraries/XMCLib/src/xmc_vadc.c **** 
1413:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3249              	 .loc 1 1414 0
 3250 0032 8B68     	 ldr r3,[r1,#8]
 3251 0034 FF3A     	 sub r2,r2,#255
 3252 0036 1343     	 orr r3,r2
 3253 0038 0432     	 add r2,r2,#4
 3254 003a FF32     	 add r2,r2,#255
 3255 003c 8350     	 str r3,[r0,r2]
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 3256              	 .loc 1 1416 0
 3257 003e 022C     	 cmp r4,#2
 3258 0040 04D1     	 bne .L262
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1418:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 3259              	 .loc 1 1418 0
 3260 0042 8021     	 mov r1,#128
 3261              	.LVL407:
 3262 0044 8358     	 ldr r3,[r0,r2]
 3263 0046 4902     	 lsl r1,r1,#9
 3264 0048 0B43     	 orr r3,r1
 3265 004a 8350     	 str r3,[r0,r2]
 3266              	.L262:
 3267              	.LVL408:
 3268              	.LBB118:
 3269              	.LBB119:
3439:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 3270              	 .loc 2 3439 0
 3271 004c 8422     	 mov r2,#132
 3272 004e 8021     	 mov r1,#128
 3273 0050 8358     	 ldr r3,[r0,r2]
 3274 0052 4904     	 lsl r1,r1,#17
 3275 0054 0B43     	 orr r3,r1
 3276 0056 8350     	 str r3,[r0,r2]
 3277              	.LBE119:
 3278              	.LBE118:
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1420:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
1422:../Libraries/XMCLib/src/xmc_vadc.c **** 
1423:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3279              	 .loc 1 1423 0
 3280              	 
 3281 0058 70BD     	 pop {r4,r5,r6,pc}
 3282              	.LVL409:
 3283              	.L261:
1406:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3284              	 .loc 1 1406 0
 3285 005a 4351     	 str r3,[r0,r5]
1409:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
 3286              	 .loc 1 1409 0
 3287 005c 4A68     	 ldr r2,[r1,#4]
 3288 005e 074B     	 ldr r3,.L264+4
 3289              	.LVL410:
 3290 0060 1343     	 orr r3,r2
 3291 0062 8022     	 mov r2,#128
 3292 0064 5200     	 lsl r2,r2,#1
 3293 0066 8350     	 str r3,[r0,r2]
 3294              	.LVL411:
1414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3295              	 .loc 1 1414 0
 3296 0068 8B68     	 ldr r3,[r1,#8]
 3297 006a FF3A     	 sub r2,r2,#255
 3298 006c 1343     	 orr r3,r2
 3299 006e 0432     	 add r2,r2,#4
 3300 0070 FF32     	 add r2,r2,#255
 3301 0072 8350     	 str r3,[r0,r2]
 3302 0074 EAE7     	 b .L262
 3303              	.L265:
 3304 0076 C046     	 .align 2
 3305              	.L264:
 3306 0078 FFFFFFFE 	 .word -16777217
 3307 007c 00808080 	 .word -2139062272
 3308              	 .cfi_endproc
 3309              	.LFE171:
 3311              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 3312              	 .align 2
 3313              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 3314              	 .code 16
 3315              	 .thumb_func
 3317              	XMC_VADC_GROUP_QueueSelectTrigger:
 3318              	.LFB172:
1424:../Libraries/XMCLib/src/xmc_vadc.c **** 
1425:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1426:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1427:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1428:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3319              	 .loc 1 1428 0
 3320              	 .cfi_startproc
 3321              	.LVL412:
1429:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1430:../Libraries/XMCLib/src/xmc_vadc.c ****   
1431:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1433:../Libraries/XMCLib/src/xmc_vadc.c **** 
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1436:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3322              	 .loc 1 1436 0
 3323 0000 8022     	 mov r2,#128
 3324 0002 5200     	 lsl r2,r2,#1
1428:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
 3325              	 .loc 1 1428 0
 3326 0004 10B5     	 push {r4,lr}
 3327              	 .cfi_def_cfa_offset 8
 3328              	 .cfi_offset 4,-8
 3329              	 .cfi_offset 14,-4
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 3330              	 .loc 1 1438 0
 3331 0006 054B     	 ldr r3,.L267
1436:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3332              	 .loc 1 1436 0
 3333 0008 8458     	 ldr r4,[r0,r2]
 3334              	.LVL413:
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3335              	 .loc 1 1439 0
 3336 000a 0902     	 lsl r1,r1,#8
 3337              	.LVL414:
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3338              	 .loc 1 1438 0
 3339 000c 2340     	 and r3,r4
 3340 000e 8024     	 mov r4,#128
 3341              	.LVL415:
 3342 0010 2402     	 lsl r4,r4,#8
 3343 0012 2343     	 orr r3,r4
 3344              	.LVL416:
 3345              	 .loc 1 1439 0
 3346 0014 1943     	 orr r1,r3
 3347              	.LVL417:
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3348              	 .loc 1 1440 0
 3349 0016 8150     	 str r1,[r0,r2]
1441:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3350              	 .loc 1 1441 0
 3351              	 
 3352 0018 10BD     	 pop {r4,pc}
 3353              	.L268:
 3354 001a C046     	 .align 2
 3355              	.L267:
 3356 001c FFF0FFFF 	 .word -3841
 3357              	 .cfi_endproc
 3358              	.LFE172:
 3360              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 3361              	 .align 2
 3362              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 3363              	 .code 16
 3364              	 .thumb_func
 3366              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 3367              	.LFB173:
1442:../Libraries/XMCLib/src/xmc_vadc.c **** 
1443:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1444:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1445:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3368              	 .loc 1 1445 0
 3369              	 .cfi_startproc
 3370              	.LVL418:
1446:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1447:../Libraries/XMCLib/src/xmc_vadc.c **** 
1448:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3371              	 .loc 1 1452 0
 3372 0000 8022     	 mov r2,#128
 3373 0002 5200     	 lsl r2,r2,#1
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
 3374              	 .loc 1 1445 0
 3375 0004 10B5     	 push {r4,lr}
 3376              	 .cfi_def_cfa_offset 8
 3377              	 .cfi_offset 4,-8
 3378              	 .cfi_offset 14,-4
1453:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 3379              	 .loc 1 1454 0
 3380 0006 054B     	 ldr r3,.L270
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3381              	 .loc 1 1452 0
 3382 0008 8458     	 ldr r4,[r0,r2]
 3383              	.LVL419:
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3384              	 .loc 1 1455 0
 3385 000a 4903     	 lsl r1,r1,#13
 3386              	.LVL420:
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3387              	 .loc 1 1454 0
 3388 000c 2340     	 and r3,r4
 3389 000e 8024     	 mov r4,#128
 3390              	.LVL421:
 3391 0010 2402     	 lsl r4,r4,#8
 3392 0012 2343     	 orr r3,r4
 3393              	.LVL422:
 3394              	 .loc 1 1455 0
 3395 0014 1943     	 orr r1,r3
 3396              	.LVL423:
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3397              	 .loc 1 1456 0
 3398 0016 8150     	 str r1,[r0,r2]
1457:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3399              	 .loc 1 1457 0
 3400              	 
 3401 0018 10BD     	 pop {r4,pc}
 3402              	.L271:
 3403 001a C046     	 .align 2
 3404              	.L270:
 3405 001c FF9FFFFF 	 .word -24577
 3406              	 .cfi_endproc
 3407              	.LFE173:
 3409              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 3410              	 .align 2
 3411              	 .global XMC_VADC_GROUP_QueueSelectGating
 3412              	 .code 16
 3413              	 .thumb_func
 3415              	XMC_VADC_GROUP_QueueSelectGating:
 3416              	.LFB174:
1458:../Libraries/XMCLib/src/xmc_vadc.c **** 
1459:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1460:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1461:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3417              	 .loc 1 1461 0
 3418              	 .cfi_startproc
 3419              	.LVL424:
1462:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1463:../Libraries/XMCLib/src/xmc_vadc.c **** 
1464:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1466:../Libraries/XMCLib/src/xmc_vadc.c ****   
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3420              	 .loc 1 1468 0
 3421 0000 8022     	 mov r2,#128
 3422 0002 5200     	 lsl r2,r2,#1
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
 3423              	 .loc 1 1461 0
 3424 0004 10B5     	 push {r4,lr}
 3425              	 .cfi_def_cfa_offset 8
 3426              	 .cfi_offset 4,-8
 3427              	 .cfi_offset 14,-4
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 3428              	 .loc 1 1470 0
 3429 0006 054B     	 ldr r3,.L273
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 3430              	 .loc 1 1468 0
 3431 0008 8458     	 ldr r4,[r0,r2]
 3432              	.LVL425:
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3433              	 .loc 1 1471 0
 3434 000a 0904     	 lsl r1,r1,#16
 3435              	.LVL426:
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3436              	 .loc 1 1470 0
 3437 000c 2340     	 and r3,r4
 3438 000e 8024     	 mov r4,#128
 3439              	.LVL427:
 3440 0010 2404     	 lsl r4,r4,#16
 3441 0012 2343     	 orr r3,r4
 3442              	.LVL428:
 3443              	 .loc 1 1471 0
 3444 0014 1943     	 orr r1,r3
 3445              	.LVL429:
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3446              	 .loc 1 1472 0
 3447 0016 8150     	 str r1,[r0,r2]
1473:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3448              	 .loc 1 1473 0
 3449              	 
 3450 0018 10BD     	 pop {r4,pc}
 3451              	.L274:
 3452 001a C046     	 .align 2
 3453              	.L273:
 3454 001c FFFFF0FF 	 .word -983041
 3455              	 .cfi_endproc
 3456              	.LFE174:
 3458              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 3459              	 .align 2
 3460              	 .global XMC_VADC_GROUP_QueueGetLength
 3461              	 .code 16
 3462              	 .thumb_func
 3464              	XMC_VADC_GROUP_QueueGetLength:
 3465              	.LFB175:
1474:../Libraries/XMCLib/src/xmc_vadc.c **** 
1475:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1476:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1477:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3466              	 .loc 1 1477 0
 3467              	 .cfi_startproc
 3468              	.LVL430:
1478:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1479:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1480:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1481:../Libraries/XMCLib/src/xmc_vadc.c **** 
1482:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1483:../Libraries/XMCLib/src/xmc_vadc.c **** 
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 3469              	 .loc 1 1484 0
 3470 0000 8423     	 mov r3,#132
 3471 0002 5B00     	 lsl r3,r3,#1
 3472 0004 C258     	 ldr r2,[r0,r3]
 3473              	.LVL431:
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3474              	 .loc 1 1485 0
 3475 0006 0833     	 add r3,r3,#8
 3476 0008 C358     	 ldr r3,[r0,r3]
 3477              	.LVL432:
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1489:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 3478              	 .loc 1 1489 0
 3479 000a 0020     	 mov r0,#0
 3480              	.LVL433:
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3481              	 .loc 1 1487 0
 3482 000c 9106     	 lsl r1,r2,#26
 3483 000e 02D4     	 bmi .L276
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1493:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 3484              	 .loc 1 1493 0
 3485 0010 0F30     	 add r0,r0,#15
 3486 0012 1040     	 and r0,r2
 3487 0014 0130     	 add r0,r0,#1
 3488              	.LVL434:
 3489              	.L276:
1494:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 3490              	 .loc 1 1496 0
 3491 0016 DB05     	 lsl r3,r3,#23
 3492              	.LVL435:
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1498:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 3493              	 .loc 1 1498 0
 3494 0018 DB0F     	 lsr r3,r3,#31
 3495 001a C018     	 add r0,r0,r3
 3496              	.LVL436:
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1500:../Libraries/XMCLib/src/xmc_vadc.c **** 
1501:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
1502:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3497              	 .loc 1 1502 0
 3498              	 
 3499 001c 7047     	 bx lr
 3500              	 .cfi_endproc
 3501              	.LFE175:
 3503 001e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 3504              	 .align 2
 3505              	 .global XMC_VADC_GROUP_QueueAbortSequence
 3506              	 .code 16
 3507              	 .thumb_func
 3509              	XMC_VADC_GROUP_QueueAbortSequence:
 3510              	.LFB176:
1503:../Libraries/XMCLib/src/xmc_vadc.c **** 
1504:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1505:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1506:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3511              	 .loc 1 1506 0
 3512              	 .cfi_startproc
 3513              	.LVL437:
1507:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1508:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1509:../Libraries/XMCLib/src/xmc_vadc.c **** 
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1511:../Libraries/XMCLib/src/xmc_vadc.c **** 
1512:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 3514              	 .loc 1 1513 0
 3515 0000 8023     	 mov r3,#128
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3516              	 .loc 1 1515 0
 3517 0002 124A     	 ldr r2,.L285
1513:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3518              	 .loc 1 1513 0
 3519 0004 5B00     	 lsl r3,r3,#1
1506:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
 3520              	 .loc 1 1506 0
 3521 0006 30B5     	 push {r4,r5,lr}
 3522              	 .cfi_def_cfa_offset 12
 3523              	 .cfi_offset 4,-12
 3524              	 .cfi_offset 5,-8
 3525              	 .cfi_offset 14,-4
1513:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3526              	 .loc 1 1513 0
 3527 0008 C558     	 ldr r5,[r0,r3]
 3528              	.LVL438:
 3529              	 .loc 1 1515 0
 3530 000a C250     	 str r2,[r0,r3]
1516:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1519:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3531              	 .loc 1 1519 0
 3532 000c 7C3B     	 sub r3,r3,#124
 3533 000e C258     	 ldr r2,[r0,r3]
 3534              	.LBB120:
 3535              	.LBB121:
 3536              	 .loc 2 3460 0
 3537 0010 C158     	 ldr r1,[r0,r3]
 3538              	.LBE121:
 3539              	.LBE120:
 3540              	 .loc 1 1519 0
 3541 0012 D201     	 lsl r2,r2,#7
 3542 0014 D40F     	 lsr r4,r2,#31
 3543              	.LVL439:
 3544              	.LBB123:
 3545              	.LBB122:
 3546              	 .loc 2 3460 0
 3547 0016 0E4A     	 ldr r2,.L285+4
 3548 0018 0A40     	 and r2,r1
 3549 001a C250     	 str r2,[r0,r3]
 3550              	.LVL440:
 3551              	.LBE122:
 3552              	.LBE123:
 3553              	.LBB124:
 3554              	.LBB125:
3461:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3462:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3463:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3464:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3465:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3466:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3467:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3468:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3469:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3470:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3471:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3472:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3473:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3474:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3475:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3476:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3477:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3478:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3479:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3480:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3481:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3482:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3483:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3484:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3485:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3486:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3487:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3488:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3489:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3490:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3491:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3492:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3493:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3494:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3495:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3496:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3497:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3498:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3499:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3500:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3501:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3502:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3503:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3504:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3505:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3506:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3507:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3508:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3509:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3510:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3511:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3512:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3513:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3514:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3515:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3516:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3517:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3518:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3519:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3520:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3521:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3522:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3523:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3524:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3525:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3526:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3527:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3528:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3529:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3530:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3531:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3532:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3533:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3534:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3535:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3536:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3537:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3538:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3539:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3540:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3541:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3542:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3543:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3544:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3545:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3546:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3547:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3548:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3549:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3550:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3551:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3552:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3553:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3554:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3555:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3556:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3557:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3558:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3559:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3560:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3561:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3562:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3563:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI> The H/W generates a trigger needed for the queue request source.
3564:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI> The Conversion is triggered manually by calling this API.
3565:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3567:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3568:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3569:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3570:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3571:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3572:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3573:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
3574:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3575:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3576:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3577:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3578:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3579:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3580:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3581:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3582:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3583:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3584:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3585:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3586:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3587:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3588:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3589:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3590:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3591:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3592:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3593:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3594:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3595:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3596:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3597:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3598:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3599:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3600:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3601:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3602:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3603:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3604:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3605:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3606:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3607:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3608:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3609:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3610:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3611:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3612:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3613:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3614:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3615:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3616:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3617:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3618:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3619:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3620:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3621:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3622:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3623:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3624:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3625:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3626:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3627:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** {
3628:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3629:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 3555              	 .loc 2 3629 0
 3556 001c 8222     	 mov r2,#130
 3557 001e 8021     	 mov r1,#128
 3558 0020 5200     	 lsl r2,r2,#1
 3559 0022 8358     	 ldr r3,[r0,r2]
 3560 0024 C900     	 lsl r1,r1,#3
 3561 0026 0B43     	 orr r3,r1
3630:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
3631:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 3562              	 .loc 2 3631 0
 3563 0028 8421     	 mov r1,#132
3629:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** 
 3564              	 .loc 2 3629 0
 3565 002a 8350     	 str r3,[r0,r2]
 3566              	 .loc 2 3631 0
 3567 002c 4900     	 lsl r1,r1,#1
 3568 002e E43A     	 sub r2,r2,#228
 3569              	.L282:
 3570 0030 4358     	 ldr r3,[r0,r1]
 3571 0032 1A42     	 tst r2,r3
 3572 0034 FCD0     	 beq .L282
 3573              	.LBE125:
 3574              	.LBE124:
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1521:../Libraries/XMCLib/src/xmc_vadc.c ****    
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
1524:../Libraries/XMCLib/src/xmc_vadc.c ****   
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3575              	 .loc 1 1526 0
 3576 0036 8423     	 mov r3,#132
 3577 0038 C158     	 ldr r1,[r0,r3]
 3578 003a 2206     	 lsl r2,r4,#24
 3579 003c 0A43     	 orr r2,r1
 3580 003e C250     	 str r2,[r0,r3]
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3581              	 .loc 1 1529 0
 3582 0040 8022     	 mov r2,#128
1530:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3583              	 .loc 1 1530 0
 3584 0042 024B     	 ldr r3,.L285
1529:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3585              	 .loc 1 1529 0
 3586 0044 5200     	 lsl r2,r2,#1
 3587              	 .loc 1 1530 0
 3588 0046 2B43     	 orr r3,r5
1529:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3589              	 .loc 1 1529 0
 3590 0048 8350     	 str r3,[r0,r2]
1531:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3591              	 .loc 1 1531 0
 3592              	 
 3593              	.LVL441:
 3594              	.LVL442:
 3595 004a 30BD     	 pop {r4,r5,pc}
 3596              	.L286:
 3597              	 .align 2
 3598              	.L285:
 3599 004c 00808080 	 .word -2139062272
 3600 0050 FFFFFFFE 	 .word -16777217
 3601              	 .cfi_endproc
 3602              	.LFE176:
 3604              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 3605              	 .align 2
 3606              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 3607              	 .code 16
 3608              	 .thumb_func
 3610              	XMC_VADC_GROUP_QueueRemoveChannel:
 3611              	.LFB177:
1532:../Libraries/XMCLib/src/xmc_vadc.c **** 
1533:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1534:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1535:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3612              	 .loc 1 1535 0
 3613              	 .cfi_startproc
 3614              	.LVL443:
 3615 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 3616              	 .cfi_def_cfa_offset 20
 3617              	 .cfi_offset 4,-20
 3618              	 .cfi_offset 5,-16
 3619              	 .cfi_offset 6,-12
 3620              	 .cfi_offset 7,-8
 3621              	 .cfi_offset 14,-4
 3622 0002 4546     	 mov r5,r8
 3623 0004 4E46     	 mov r6,r9
 3624 0006 5746     	 mov r7,r10
 3625 0008 E0B4     	 push {r5,r6,r7}
 3626              	 .cfi_def_cfa_offset 32
 3627              	 .cfi_offset 8,-32
 3628              	 .cfi_offset 9,-28
 3629              	 .cfi_offset 10,-24
1536:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1538:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1539:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1540:../Libraries/XMCLib/src/xmc_vadc.c **** 
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 3630              	 .loc 1 1544 0
 3631 000a 8025     	 mov r5,#128
 3632 000c 6D00     	 lsl r5,r5,#1
 3633 000e 4359     	 ldr r3,[r0,r5]
 3634 0010 9846     	 mov r8,r3
 3635              	.LVL444:
1545:../Libraries/XMCLib/src/xmc_vadc.c **** 
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3636              	 .loc 1 1546 0
 3637 0012 304B     	 ldr r3,.L311
 3638              	.LVL445:
 3639 0014 4351     	 str r3,[r0,r5]
1547:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1548:../Libraries/XMCLib/src/xmc_vadc.c ****   
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1550:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3640              	 .loc 1 1550 0
 3641 0016 8423     	 mov r3,#132
 3642 0018 C458     	 ldr r4,[r0,r3]
 3643              	.LBB126:
 3644              	.LBB127:
3460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 3645              	 .loc 2 3460 0
 3646 001a C158     	 ldr r1,[r0,r3]
 3647              	.LBE127:
 3648              	.LBE126:
 3649              	 .loc 1 1550 0
 3650 001c E401     	 lsl r4,r4,#7
 3651 001e E20F     	 lsr r2,r4,#31
 3652 0020 9146     	 mov r9,r2
 3653              	.LVL446:
 3654              	.LBB129:
 3655              	.LBB128:
3460:C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc\xmc_vadc.h **** }
 3656              	 .loc 2 3460 0
 3657 0022 2D4A     	 ldr r2,.L311+4
 3658 0024 0A40     	 and r2,r1
 3659 0026 C250     	 str r2,[r0,r3]
 3660              	.LVL447:
 3661              	.LBE128:
 3662              	.LBE129:
 3663              	.LBB130:
 3664              	.LBB131:
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3665              	 .loc 1 1485 0
 3666 0028 8822     	 mov r2,#136
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3667              	 .loc 1 1484 0
 3668 002a 8433     	 add r3,r3,#132
 3669 002c C358     	 ldr r3,[r0,r3]
 3670              	.LVL448:
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3671              	 .loc 1 1485 0
 3672 002e 5200     	 lsl r2,r2,#1
 3673 0030 8258     	 ldr r2,[r0,r2]
 3674              	.LVL449:
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3675              	 .loc 1 1487 0
 3676 0032 9906     	 lsl r1,r3,#26
 3677 0034 45D4     	 bmi .L288
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3678              	 .loc 1 1493 0
 3679 0036 0F21     	 mov r1,#15
 3680 0038 0B40     	 and r3,r1
 3681              	.LVL450:
 3682 003a 591C     	 add r1,r3,#1
 3683              	.LVL451:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3684              	 .loc 1 1496 0
 3685 003c 2A42     	 tst r2,r5
 3686 003e 00D0     	 beq .L289
 3687 0040 991C     	 add r1,r3,#2
 3688              	.LVL452:
 3689              	.L289:
 3690              	.LBE131:
 3691              	.LBE130:
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
1552:../Libraries/XMCLib/src/xmc_vadc.c **** 
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
1554:../Libraries/XMCLib/src/xmc_vadc.c **** 
1555:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1557:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1558:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 3692              	 .loc 1 1558 0
 3693 0042 8222     	 mov r2,#130
 3694              	.LVL453:
 3695 0044 8025     	 mov r5,#128
 3696 0046 5200     	 lsl r2,r2,#1
 3697 0048 8358     	 ldr r3,[r0,r2]
 3698 004a 6D00     	 lsl r5,r5,#1
 3699 004c 2B43     	 orr r3,r5
 3700 004e 8350     	 str r3,[r0,r2]
 3701              	.LVL454:
 3702              	.LBB133:
 3703              	.LBB134:
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3704              	 .loc 1 1484 0
 3705 0050 8423     	 mov r3,#132
 3706 0052 5B00     	 lsl r3,r3,#1
 3707 0054 C258     	 ldr r2,[r0,r3]
 3708              	.LVL455:
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3709              	 .loc 1 1485 0
 3710 0056 0833     	 add r3,r3,#8
 3711 0058 C558     	 ldr r5,[r0,r3]
 3712              	.LVL456:
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3713              	 .loc 1 1489 0
 3714 005a 0023     	 mov r3,#0
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3715              	 .loc 1 1487 0
 3716 005c 9406     	 lsl r4,r2,#26
 3717 005e 34D5     	 bpl .L310
 3718              	.L290:
 3719              	.LVL457:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3720              	 .loc 1 1496 0
 3721 0060 8022     	 mov r2,#128
 3722              	.LVL458:
 3723 0062 5200     	 lsl r2,r2,#1
 3724 0064 1540     	 and r5,r2
 3725              	.LVL459:
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3726              	 .loc 1 1498 0
 3727 0066 6E1E     	 sub r6,r5,#1
 3728 0068 B541     	 sbc r5,r5,r6
 3729              	.LBE134:
 3730              	.LBE133:
 3731              	.LBB137:
 3732              	.LBB138:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3733              	 .loc 1 1493 0
 3734 006a 0F24     	 mov r4,#15
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3735              	 .loc 1 1484 0
 3736 006c 8427     	 mov r7,#132
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3737              	 .loc 1 1485 0
 3738 006e 8826     	 mov r6,#136
 3739              	.LBE138:
 3740              	.LBE137:
 3741              	.LBB141:
 3742              	.LBB135:
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3743              	 .loc 1 1498 0
 3744 0070 5B19     	 add r3,r3,r5
 3745              	.LVL460:
 3746              	.LBE135:
 3747              	.LBE141:
 3748              	.LBB142:
 3749              	.LBB139:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3750              	 .loc 1 1493 0
 3751 0072 A446     	 mov ip,r4
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3752              	 .loc 1 1487 0
 3753 0074 2025     	 mov r5,#32
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3754              	 .loc 1 1496 0
 3755 0076 9246     	 mov r10,r2
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3756              	 .loc 1 1484 0
 3757 0078 7F00     	 lsl r7,r7,#1
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3758              	 .loc 1 1485 0
 3759 007a 7600     	 lsl r6,r6,#1
 3760              	.L294:
 3761              	.LVL461:
 3762              	.LBE139:
 3763              	.LBE142:
1559:../Libraries/XMCLib/src/xmc_vadc.c **** 
1560:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
1561:../Libraries/XMCLib/src/xmc_vadc.c **** 
1562:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 3764              	 .loc 1 1563 0
 3765 007c 8B42     	 cmp r3,r1
 3766 007e 0FD1     	 bne .L296
 3767              	.LVL462:
 3768              	.LBB143:
 3769              	.LBB140:
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3770              	 .loc 1 1484 0
 3771 0080 C359     	 ldr r3,[r0,r7]
 3772              	.LVL463:
1485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3773              	 .loc 1 1485 0
 3774 0082 8459     	 ldr r4,[r0,r6]
 3775              	.LVL464:
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3776              	 .loc 1 1487 0
 3777 0084 1D42     	 tst r5,r3
 3778 0086 07D1     	 bne .L293
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3779              	 .loc 1 1493 0
 3780 0088 6246     	 mov r2,ip
 3781 008a 1340     	 and r3,r2
 3782              	.LVL465:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3783              	 .loc 1 1496 0
 3784 008c 5246     	 mov r2,r10
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3785              	 .loc 1 1493 0
 3786 008e 0133     	 add r3,r3,#1
 3787              	.LVL466:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3788              	 .loc 1 1496 0
 3789 0090 1442     	 tst r4,r2
 3790 0092 F3D0     	 beq .L294
 3791              	.LVL467:
 3792              	.L301:
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3793              	 .loc 1 1498 0
 3794 0094 0133     	 add r3,r3,#1
 3795              	.LVL468:
 3796 0096 F1E7     	 b .L294
 3797              	.LVL469:
 3798              	.L293:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3799              	 .loc 1 1496 0
 3800 0098 5246     	 mov r2,r10
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3801              	 .loc 1 1489 0
 3802 009a 0023     	 mov r3,#0
 3803              	.LVL470:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3804              	 .loc 1 1496 0
 3805 009c 1442     	 tst r4,r2
 3806 009e F9D1     	 bne .L301
 3807              	.LVL471:
 3808              	.L296:
 3809              	.LBE140:
 3810              	.LBE143:
1564:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1565:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1567:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1568:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1569:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3811              	 .loc 1 1569 0
 3812 00a0 8422     	 mov r2,#132
 3813 00a2 4946     	 mov r1,r9
 3814 00a4 8358     	 ldr r3,[r0,r2]
 3815 00a6 0C06     	 lsl r4,r1,#24
 3816 00a8 1C43     	 orr r4,r3
 3817 00aa 8450     	 str r4,[r0,r2]
1570:../Libraries/XMCLib/src/xmc_vadc.c ****   
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1573:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3818              	 .loc 1 1573 0
 3819 00ac 4246     	 mov r2,r8
 3820 00ae 094B     	 ldr r3,.L311
1574:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3821              	 .loc 1 1574 0
 3822              	 
1573:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3823              	 .loc 1 1573 0
 3824 00b0 1343     	 orr r3,r2
1572:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3825              	 .loc 1 1572 0
 3826 00b2 8022     	 mov r2,#128
 3827 00b4 5200     	 lsl r2,r2,#1
 3828 00b6 8350     	 str r3,[r0,r2]
 3829              	.LVL472:
 3830              	.LVL473:
 3831              	 .loc 1 1574 0
 3832 00b8 1CBC     	 pop {r2,r3,r4}
 3833 00ba 9046     	 mov r8,r2
 3834 00bc 9946     	 mov r9,r3
 3835 00be A246     	 mov r10,r4
 3836 00c0 F0BD     	 pop {r4,r5,r6,r7,pc}
 3837              	.LVL474:
 3838              	.L288:
 3839              	.LBB144:
 3840              	.LBB132:
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3841              	 .loc 1 1496 0
 3842 00c2 2A42     	 tst r2,r5
 3843 00c4 ECD0     	 beq .L296
 3844 00c6 0121     	 mov r1,#1
 3845              	.LVL475:
 3846 00c8 BBE7     	 b .L289
 3847              	.LVL476:
 3848              	.L310:
 3849              	.LBE132:
 3850              	.LBE144:
 3851              	.LBB145:
 3852              	.LBB136:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3853              	 .loc 1 1493 0
 3854 00ca 0F33     	 add r3,r3,#15
 3855 00cc 1340     	 and r3,r2
 3856 00ce 0133     	 add r3,r3,#1
 3857              	.LVL477:
 3858 00d0 C6E7     	 b .L290
 3859              	.L312:
 3860 00d2 C046     	 .align 2
 3861              	.L311:
 3862 00d4 00808080 	 .word -2139062272
 3863 00d8 FFFFFFFE 	 .word -16777217
 3864              	.LBE136:
 3865              	.LBE145:
 3866              	 .cfi_endproc
 3867              	.LFE177:
 3869              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 3870              	 .align 2
 3871              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 3872              	 .code 16
 3873              	 .thumb_func
 3875              	XMC_VADC_GROUP_QueueGetNextChannel:
 3876              	.LFB178:
1575:../Libraries/XMCLib/src/xmc_vadc.c **** 
1576:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1577:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1578:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3877              	 .loc 1 1578 0
 3878              	 .cfi_startproc
 3879              	.LVL478:
1579:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1580:../Libraries/XMCLib/src/xmc_vadc.c **** 
1581:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1582:../Libraries/XMCLib/src/xmc_vadc.c ****   
1583:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1584:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1585:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1586:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 3880              	 .loc 1 1587 0
 3881 0000 8822     	 mov r2,#136
 3882 0002 8023     	 mov r3,#128
 3883 0004 5200     	 lsl r2,r2,#1
 3884 0006 8158     	 ldr r1,[r0,r2]
 3885 0008 5B00     	 lsl r3,r3,#1
 3886 000a 1942     	 tst r1,r3
 3887 000c 04D1     	 bne .L317
1588:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1589:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 3888              	 .loc 1 1591 0
 3889 000e 8622     	 mov r2,#134
 3890 0010 5200     	 lsl r2,r2,#1
 3891 0012 8158     	 ldr r1,[r0,r2]
 3892 0014 1942     	 tst r1,r3
 3893 0016 03D0     	 beq .L316
 3894              	.L317:
1592:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1593:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 3895              	 .loc 1 1593 0
 3896 0018 8358     	 ldr r3,[r0,r2]
 3897 001a 1F20     	 mov r0,#31
 3898              	.LVL479:
 3899 001c 1840     	 and r0,r3
 3900              	.LVL480:
 3901              	.L315:
1594:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1597:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1598:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1600:../Libraries/XMCLib/src/xmc_vadc.c **** 
1601:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
1602:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3902              	 .loc 1 1602 0
 3903              	 
 3904 001e 7047     	 bx lr
 3905              	.LVL481:
 3906              	.L316:
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3907              	 .loc 1 1598 0
 3908 0020 0120     	 mov r0,#1
 3909              	.LVL482:
 3910 0022 4042     	 neg r0,r0
 3911 0024 FBE7     	 b .L315
 3912              	 .cfi_endproc
 3913              	.LFE178:
 3915 0026 C046     	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 3916              	 .align 2
 3917              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 3918              	 .code 16
 3919              	 .thumb_func
 3921              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 3922              	.LFB179:
1603:../Libraries/XMCLib/src/xmc_vadc.c **** 
1604:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1605:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1606:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3923              	 .loc 1 1606 0
 3924              	 .cfi_startproc
 3925              	.LVL483:
1607:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1608:../Libraries/XMCLib/src/xmc_vadc.c **** 
1609:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1610:../Libraries/XMCLib/src/xmc_vadc.c ****   
1611:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 3926              	 .loc 1 1611 0
 3927 0000 8823     	 mov r3,#136
 3928 0002 5B00     	 lsl r3,r3,#1
 3929 0004 C258     	 ldr r2,[r0,r3]
 3930 0006 D205     	 lsl r2,r2,#23
 3931 0008 03D5     	 bpl .L320
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1613:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 3932              	 .loc 1 1613 0
 3933 000a C358     	 ldr r3,[r0,r3]
 3934 000c 1F20     	 mov r0,#31
 3935              	.LVL484:
 3936 000e 1840     	 and r0,r3
 3937              	.LVL485:
 3938              	.L319:
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1616:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1617:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1618:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1620:../Libraries/XMCLib/src/xmc_vadc.c **** 
1621:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
1622:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3939              	 .loc 1 1622 0
 3940              	 
 3941 0010 7047     	 bx lr
 3942              	.LVL486:
 3943              	.L320:
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3944              	 .loc 1 1618 0
 3945 0012 0120     	 mov r0,#1
 3946              	.LVL487:
 3947 0014 4042     	 neg r0,r0
 3948 0016 FBE7     	 b .L319
 3949              	 .cfi_endproc
 3950              	.LFE179:
 3952              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 3953              	 .align 2
 3954              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 3955              	 .code 16
 3956              	 .thumb_func
 3958              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 3959              	.LFB180:
1623:../Libraries/XMCLib/src/xmc_vadc.c **** 
1624:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1625:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1626:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3960              	 .loc 1 1626 0
 3961              	 .cfi_startproc
 3962              	.LVL488:
1627:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1630:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3963              	 .loc 1 1632 0
 3964 0000 E022     	 mov r2,#224
1626:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
 3965              	 .loc 1 1626 0
 3966 0002 10B5     	 push {r4,lr}
 3967              	 .cfi_def_cfa_offset 8
 3968              	 .cfi_offset 4,-8
 3969              	 .cfi_offset 14,-4
1633:../Libraries/XMCLib/src/xmc_vadc.c **** 
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 3970              	 .loc 1 1634 0
 3971 0004 0F24     	 mov r4,#15
1632:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3972              	 .loc 1 1632 0
 3973 0006 5200     	 lsl r2,r2,#1
 3974 0008 8358     	 ldr r3,[r0,r2]
 3975              	.LVL489:
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
1638:../Libraries/XMCLib/src/xmc_vadc.c **** 
1639:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3976              	 .loc 1 1639 0
 3977              	 
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 3978              	 .loc 1 1634 0
 3979 000a A343     	 bic r3,r4
 3980              	.LVL490:
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 3981              	 .loc 1 1635 0
 3982 000c 1943     	 orr r1,r3
 3983              	.LVL491:
1637:../Libraries/XMCLib/src/xmc_vadc.c **** 
 3984              	 .loc 1 1637 0
 3985 000e 8150     	 str r1,[r0,r2]
 3986              	 .loc 1 1639 0
 3987 0010 10BD     	 pop {r4,pc}
 3988              	 .cfi_endproc
 3989              	.LFE180:
 3991 0012 C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 3992              	 .align 2
 3993              	 .global XMC_VADC_GROUP_ChannelInit
 3994              	 .code 16
 3995              	 .thumb_func
 3997              	XMC_VADC_GROUP_ChannelInit:
 3998              	.LFB181:
1640:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_QUEUE_AVAILABLE*/
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1643:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1644:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1645:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1646:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3999              	 .loc 1 1646 0
 4000              	 .cfi_startproc
 4001              	.LVL492:
 4002 0000 70B5     	 push {r4,r5,r6,lr}
 4003              	 .cfi_def_cfa_offset 16
 4004              	 .cfi_offset 4,-16
 4005              	 .cfi_offset 5,-12
 4006              	 .cfi_offset 6,-8
 4007              	 .cfi_offset 14,-4
1647:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1648:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1649:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1650:../Libraries/XMCLib/src/xmc_vadc.c **** 
1651:../Libraries/XMCLib/src/xmc_vadc.c **** 
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1653:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1654:../Libraries/XMCLib/src/xmc_vadc.c ****   
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
1656:../Libraries/XMCLib/src/xmc_vadc.c **** 
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
1659:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4008              	 .loc 1 1659 0
 4009 0002 0124     	 mov r4,#1
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4010              	 .loc 1 1658 0
 4011 0004 8825     	 mov r5,#136
 4012              	 .loc 1 1659 0
 4013 0006 8C40     	 lsl r4,r4,r1
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4014              	 .loc 1 1658 0
 4015 0008 4359     	 ldr r3,[r0,r5]
 4016              	.LVL493:
 4017              	 .loc 1 1659 0
 4018 000a A343     	 bic r3,r4
 4019              	.LVL494:
1655:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4020              	 .loc 1 1655 0
 4021 000c 147B     	 ldrb r4,[r2,#12]
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 4022              	 .loc 1 1660 0
 4023 000e 8C40     	 lsl r4,r4,r1
 4024 0010 2343     	 orr r3,r4
 4025              	.LVL495:
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 4026              	 .loc 1 1661 0
 4027 0012 4351     	 str r3,[r0,r5]
 4028              	.LVL496:
1662:../Libraries/XMCLib/src/xmc_vadc.c **** 
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 4029              	 .loc 1 1664 0
 4030 0014 537B     	 ldrb r3,[r2,#13]
 4031              	.LVL497:
 4032 0016 5CB2     	 sxtb r4,r3
 4033 0018 002C     	 cmp r4,#0
 4034 001a 0CDB     	 blt .L323
 4035              	.LVL498:
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1666:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
1667:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 4036              	 .loc 1 1667 0
 4037 001c 0129     	 cmp r1,#1
 4038 001e 21D0     	 beq .L327
1668:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1669:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
1670:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1672:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 4039              	 .loc 1 1672 0
 4040 0020 0029     	 cmp r1,#0
 4041 0022 17D0     	 beq .L328
 4042 0024 1C1C     	 mov r4,r3
 4043 0026 0023     	 mov r3,#0
 4044              	.LVL499:
 4045              	.L325:
1673:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1674:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
1675:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1677:../Libraries/XMCLib/src/xmc_vadc.c **** 
1678:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 4046              	 .loc 1 1678 0
 4047 0028 64B2     	 sxtb r4,r4
 4048 002a 9C40     	 lsl r4,r4,r3
 4049 002c B026     	 mov r6,#176
 4050 002e 231C     	 mov r3,r4
 4051 0030 8559     	 ldr r5,[r0,r6]
 4052 0032 2B43     	 orr r3,r5
 4053 0034 8351     	 str r3,[r0,r6]
 4054              	.L323:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 4055              	 .loc 1 1681 0
 4056 0036 C824     	 mov r4,#200
 4057 0038 5568     	 ldr r5,[r2,#4]
 4058 003a 0359     	 ldr r3,[r0,r4]
1682:../Libraries/XMCLib/src/xmc_vadc.c **** 
1683:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
1685:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1686:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 4059              	 .loc 1 1687 0
 4060 003c 8031     	 add r1,r1,#128
 4061              	.LVL500:
1681:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4062              	 .loc 1 1681 0
 4063 003e 2B43     	 orr r3,r5
 4064 0040 0351     	 str r3,[r0,r4]
1684:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 4065              	 .loc 1 1684 0
 4066 0042 0834     	 add r4,r4,#8
 4067 0044 9568     	 ldr r5,[r2,#8]
 4068 0046 0359     	 ldr r3,[r0,r4]
 4069              	 .loc 1 1687 0
 4070 0048 8900     	 lsl r1,r1,#2
 4071              	.LVL501:
1684:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 4072              	 .loc 1 1684 0
 4073 004a 2B43     	 orr r3,r5
 4074 004c 0351     	 str r3,[r0,r4]
 4075              	 .loc 1 1687 0
 4076 004e 1368     	 ldr r3,[r2]
1688:../Libraries/XMCLib/src/xmc_vadc.c **** 
1689:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4077              	 .loc 1 1689 0
 4078              	 
1687:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4079              	 .loc 1 1687 0
 4080 0050 0B50     	 str r3,[r1,r0]
 4081              	 .loc 1 1689 0
 4082 0052 70BD     	 pop {r4,r5,r6,pc}
 4083              	.LVL502:
 4084              	.L328:
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 4085              	 .loc 1 1675 0
 4086 0054 B024     	 mov r4,#176
 4087 0056 1F25     	 mov r5,#31
 4088              	.LVL503:
 4089 0058 0359     	 ldr r3,[r0,r4]
 4090 005a AB43     	 bic r3,r5
 4091 005c 0351     	 str r3,[r0,r4]
 4092              	.LVL504:
 4093 005e 547B     	 ldrb r4,[r2,#13]
 4094 0060 0023     	 mov r3,#0
 4095 0062 E1E7     	 b .L325
 4096              	.LVL505:
 4097              	.L327:
1670:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 4098              	 .loc 1 1670 0
 4099 0064 B024     	 mov r4,#176
 4100 0066 034B     	 ldr r3,.L329
 4101 0068 0559     	 ldr r5,[r0,r4]
 4102              	.LVL506:
 4103 006a 2B40     	 and r3,r5
 4104 006c 0351     	 str r3,[r0,r4]
 4105              	.LVL507:
 4106 006e 547B     	 ldrb r4,[r2,#13]
 4107 0070 0823     	 mov r3,#8
 4108 0072 D9E7     	 b .L325
 4109              	.L330:
 4110              	 .align 2
 4111              	.L329:
 4112 0074 FFE0FFFF 	 .word -7937
 4113              	 .cfi_endproc
 4114              	.LFE181:
 4116              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 4117              	 .align 2
 4118              	 .global XMC_VADC_GROUP_SetChannelAlias
 4119              	 .code 16
 4120              	 .thumb_func
 4122              	XMC_VADC_GROUP_SetChannelAlias:
 4123              	.LFB182:
1690:../Libraries/XMCLib/src/xmc_vadc.c **** 
1691:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1692:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1693:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1694:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1695:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4124              	 .loc 1 1695 0
 4125              	 .cfi_startproc
 4126              	.LVL508:
1696:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1697:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1698:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1699:../Libraries/XMCLib/src/xmc_vadc.c **** 
1700:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1702:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1703:../Libraries/XMCLib/src/xmc_vadc.c **** 
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 4127              	 .loc 1 1704 0
 4128 0000 B023     	 mov r3,#176
1695:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
 4129              	 .loc 1 1695 0
 4130 0002 10B5     	 push {r4,lr}
 4131              	 .cfi_def_cfa_offset 8
 4132              	 .cfi_offset 4,-8
 4133              	 .cfi_offset 14,-4
 4134              	 .loc 1 1704 0
 4135 0004 C458     	 ldr r4,[r0,r3]
 4136              	.LVL509:
1705:../Libraries/XMCLib/src/xmc_vadc.c **** 
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 4137              	 .loc 1 1706 0
 4138 0006 002A     	 cmp r2,#0
 4139 0008 07D0     	 beq .L333
 4140 000a 0822     	 mov r2,#8
 4141              	.LVL510:
 4142 000c 054B     	 ldr r3,.L334
 4143              	.L332:
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1708:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
1709:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1711:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1713:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
1714:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
1717:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4144              	 .loc 1 1717 0
 4145 000e 9140     	 lsl r1,r1,r2
 4146              	.LVL511:
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4147              	 .loc 1 1716 0
 4148 0010 2340     	 and r3,r4
 4149              	.LVL512:
 4150              	 .loc 1 1717 0
 4151 0012 1943     	 orr r1,r3
 4152              	.LVL513:
1718:../Libraries/XMCLib/src/xmc_vadc.c **** 
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 4153              	 .loc 1 1719 0
 4154 0014 B023     	 mov r3,#176
1720:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4155              	 .loc 1 1720 0
 4156              	 
1719:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4157              	 .loc 1 1719 0
 4158 0016 C150     	 str r1,[r0,r3]
 4159              	 .loc 1 1720 0
 4160 0018 10BD     	 pop {r4,pc}
 4161              	.LVL514:
 4162              	.L333:
 4163 001a 2023     	 mov r3,#32
 4164 001c 0022     	 mov r2,#0
 4165              	.LVL515:
 4166 001e 5B42     	 neg r3,r3
 4167 0020 F5E7     	 b .L332
 4168              	.L335:
 4169 0022 C046     	 .align 2
 4170              	.L334:
 4171 0024 FFE0FFFF 	 .word -7937
 4172              	 .cfi_endproc
 4173              	.LFE182:
 4175              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 4176              	 .align 2
 4177              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 4178              	 .code 16
 4179              	 .thumb_func
 4181              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 4182              	.LFB183:
1721:../Libraries/XMCLib/src/xmc_vadc.c **** 
1722:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1723:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1724:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4183              	 .loc 1 1724 0
 4184              	 .cfi_startproc
 4185              	.LVL516:
1725:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1726:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1727:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1728:../Libraries/XMCLib/src/xmc_vadc.c **** 
1729:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1731:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1732:../Libraries/XMCLib/src/xmc_vadc.c **** 
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1735:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1736:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1739:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4186              	 .loc 1 1739 0
 4187 0000 0B1C     	 mov r3,r1
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
1741:../Libraries/XMCLib/src/xmc_vadc.c **** 
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 4188              	 .loc 1 1743 0
 4189 0002 C022     	 mov r2,#192
1739:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4190              	 .loc 1 1739 0
 4191 0004 8033     	 add r3,r3,#128
 4192 0006 9B00     	 lsl r3,r3,#2
 4193 0008 1B58     	 ldr r3,[r3,r0]
 4194              	.LVL517:
 4195              	 .loc 1 1743 0
 4196 000a 5200     	 lsl r2,r2,#1
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4197              	 .loc 1 1740 0
 4198 000c 9B05     	 lsl r3,r3,#22
 4199              	.LVL518:
 4200 000e 9B0F     	 lsr r3,r3,#30
1744:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
1745:../Libraries/XMCLib/src/xmc_vadc.c **** 
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
1748:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4201              	 .loc 1 1748 0
 4202 0010 013B     	 sub r3,r3,#1
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 4203              	 .loc 1 1743 0
 4204 0012 8258     	 ldr r2,[r0,r2]
 4205              	.LVL519:
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 4206              	 .loc 1 1733 0
 4207 0014 0020     	 mov r0,#0
 4208              	.LVL520:
1747:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4209              	 .loc 1 1747 0
 4210 0016 012B     	 cmp r3,#1
 4211 0018 06D8     	 bhi .L337
1744:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4212              	 .loc 1 1744 0
 4213 001a 0123     	 mov r3,#1
 4214 001c 8B40     	 lsl r3,r3,r1
 4215 001e 1A40     	 and r2,r3
 4216              	.LVL521:
 4217 0020 101C     	 mov r0,r2
 4218              	 .loc 1 1748 0
 4219 0022 411E     	 sub r1,r0,#1
 4220 0024 8841     	 sbc r0,r0,r1
 4221              	.LVL522:
 4222 0026 C0B2     	 uxtb r0,r0
 4223              	.L337:
 4224              	.LVL523:
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1750:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1752:../Libraries/XMCLib/src/xmc_vadc.c **** 
1753:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
1754:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4225              	 .loc 1 1754 0
 4226              	 
 4227 0028 7047     	 bx lr
 4228              	 .cfi_endproc
 4229              	.LFE183:
 4231 002a C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 4232              	 .align 2
 4233              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 4234              	 .code 16
 4235              	 .thumb_func
 4237              	XMC_VADC_GROUP_ChannelSetInputReference:
 4238              	.LFB184:
1755:../Libraries/XMCLib/src/xmc_vadc.c **** 
1756:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1757:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1758:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1759:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1760:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4239              	 .loc 1 1760 0
 4240              	 .cfi_startproc
 4241              	.LVL524:
 4242 0000 8900     	 lsl r1,r1,#2
 4243              	.LVL525:
 4244 0002 4118     	 add r1,r0,r1
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1762:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1763:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1765:../Libraries/XMCLib/src/xmc_vadc.c **** 
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4245              	 .loc 1 1766 0
 4246 0004 8020     	 mov r0,#128
 4247              	.LVL526:
1760:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
 4248              	 .loc 1 1760 0
 4249 0006 10B5     	 push {r4,lr}
 4250              	 .cfi_def_cfa_offset 8
 4251              	 .cfi_offset 4,-8
 4252              	 .cfi_offset 14,-4
 4253              	 .loc 1 1766 0
 4254 0008 8000     	 lsl r0,r0,#2
 4255 000a 0C58     	 ldr r4,[r1,r0]
 4256              	.LVL527:
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4257              	 .loc 1 1767 0
 4258 000c 024B     	 ldr r3,.L340
1768:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 4259              	 .loc 1 1768 0
 4260 000e D202     	 lsl r2,r2,#11
 4261              	.LVL528:
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4262              	 .loc 1 1767 0
 4263 0010 2340     	 and r3,r4
 4264              	.LVL529:
 4265              	 .loc 1 1768 0
 4266 0012 1A43     	 orr r2,r3
 4267              	.LVL530:
1769:../Libraries/XMCLib/src/xmc_vadc.c **** 
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4268              	 .loc 1 1770 0
 4269 0014 0A50     	 str r2,[r1,r0]
1771:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4270              	 .loc 1 1771 0
 4271              	 
 4272 0016 10BD     	 pop {r4,pc}
 4273              	.L341:
 4274              	 .align 2
 4275              	.L340:
 4276 0018 FFF7FFFF 	 .word -2049
 4277              	 .cfi_endproc
 4278              	.LFE184:
 4280              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 4281              	 .align 2
 4282              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 4283              	 .code 16
 4284              	 .thumb_func
 4286              	XMC_VADC_GROUP_ChannelSetResultRegister:
 4287              	.LFB185:
1772:../Libraries/XMCLib/src/xmc_vadc.c **** 
1773:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1774:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1775:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1776:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1777:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4288              	 .loc 1 1777 0
 4289              	 .cfi_startproc
 4290              	.LVL531:
 4291 0000 8900     	 lsl r1,r1,#2
 4292              	.LVL532:
 4293 0002 4118     	 add r1,r0,r1
1778:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1779:../Libraries/XMCLib/src/xmc_vadc.c **** 
1780:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1782:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1784:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1785:../Libraries/XMCLib/src/xmc_vadc.c **** 
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4294              	 .loc 1 1786 0
 4295 0004 8020     	 mov r0,#128
 4296              	.LVL533:
1777:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
 4297              	 .loc 1 1777 0
 4298 0006 10B5     	 push {r4,lr}
 4299              	 .cfi_def_cfa_offset 8
 4300              	 .cfi_offset 4,-8
 4301              	 .cfi_offset 14,-4
 4302              	 .loc 1 1786 0
 4303 0008 8000     	 lsl r0,r0,#2
 4304 000a 0C58     	 ldr r4,[r1,r0]
 4305              	.LVL534:
1787:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4306              	 .loc 1 1787 0
 4307 000c 024B     	 ldr r3,.L343
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 4308              	 .loc 1 1788 0
 4309 000e 1204     	 lsl r2,r2,#16
 4310              	.LVL535:
1787:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4311              	 .loc 1 1787 0
 4312 0010 2340     	 and r3,r4
 4313              	.LVL536:
 4314              	 .loc 1 1788 0
 4315 0012 1A43     	 orr r2,r3
 4316              	.LVL537:
1789:../Libraries/XMCLib/src/xmc_vadc.c **** 
1790:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4317              	 .loc 1 1790 0
 4318 0014 0A50     	 str r2,[r1,r0]
1791:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4319              	 .loc 1 1791 0
 4320              	 
 4321 0016 10BD     	 pop {r4,pc}
 4322              	.L344:
 4323              	 .align 2
 4324              	.L343:
 4325 0018 FFFFF0FF 	 .word -983041
 4326              	 .cfi_endproc
 4327              	.LFE185:
 4329              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 4330              	 .align 2
 4331              	 .global XMC_VADC_GROUP_ChannelSetIclass
 4332              	 .code 16
 4333              	 .thumb_func
 4335              	XMC_VADC_GROUP_ChannelSetIclass:
 4336              	.LFB186:
1792:../Libraries/XMCLib/src/xmc_vadc.c **** 
1793:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1794:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1795:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1796:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1797:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4337              	 .loc 1 1797 0
 4338              	 .cfi_startproc
 4339              	.LVL538:
 4340 0000 8900     	 lsl r1,r1,#2
 4341              	.LVL539:
 4342 0002 4118     	 add r1,r0,r1
1798:../Libraries/XMCLib/src/xmc_vadc.c **** 
1799:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1800:../Libraries/XMCLib/src/xmc_vadc.c **** 
1801:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1803:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1805:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1806:../Libraries/XMCLib/src/xmc_vadc.c **** 
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4343              	 .loc 1 1807 0
 4344 0004 8020     	 mov r0,#128
 4345              	.LVL540:
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4346              	 .loc 1 1797 0
 4347 0006 10B5     	 push {r4,lr}
 4348              	 .cfi_def_cfa_offset 8
 4349              	 .cfi_offset 4,-8
 4350              	 .cfi_offset 14,-4
1808:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4351              	 .loc 1 1808 0
 4352 0008 0324     	 mov r4,#3
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4353              	 .loc 1 1807 0
 4354 000a 8000     	 lsl r0,r0,#2
 4355 000c 0B58     	 ldr r3,[r1,r0]
 4356              	.LVL541:
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
1810:../Libraries/XMCLib/src/xmc_vadc.c **** 
1811:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
1812:../Libraries/XMCLib/src/xmc_vadc.c **** 
1813:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4357              	 .loc 1 1813 0
 4358              	 
1808:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4359              	 .loc 1 1808 0
 4360 000e A343     	 bic r3,r4
 4361              	.LVL542:
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4362              	 .loc 1 1809 0
 4363 0010 1A43     	 orr r2,r3
 4364              	.LVL543:
1811:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4365              	 .loc 1 1811 0
 4366 0012 0A50     	 str r2,[r1,r0]
 4367              	 .loc 1 1813 0
 4368 0014 10BD     	 pop {r4,pc}
 4369              	 .cfi_endproc
 4370              	.LFE186:
 4372 0016 C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 4373              	 .align 2
 4374              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 4375              	 .code 16
 4376              	 .thumb_func
 4378              	XMC_VADC_GROUP_ChannelGetResultRegister:
 4379              	.LFB187:
1814:../Libraries/XMCLib/src/xmc_vadc.c **** 
1815:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1816:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1817:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4380              	 .loc 1 1817 0
 4381              	 .cfi_startproc
 4382              	.LVL544:
1818:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1819:../Libraries/XMCLib/src/xmc_vadc.c **** 
1820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1821:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1822:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1823:../Libraries/XMCLib/src/xmc_vadc.c **** 
1824:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 4383              	 .loc 1 1824 0
 4384 0000 8031     	 add r1,r1,#128
 4385              	.LVL545:
 4386 0002 8900     	 lsl r1,r1,#2
 4387              	.LVL546:
 4388 0004 0858     	 ldr r0,[r1,r0]
 4389              	.LVL547:
1825:../Libraries/XMCLib/src/xmc_vadc.c **** 
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
1827:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4390              	 .loc 1 1827 0
 4391              	 
1824:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4392              	 .loc 1 1824 0
 4393 0006 0003     	 lsl r0,r0,#12
 4394              	.LVL548:
1826:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4395              	 .loc 1 1826 0
 4396 0008 000F     	 lsr r0,r0,#28
 4397              	 .loc 1 1827 0
 4398 000a 7047     	 bx lr
 4399              	 .cfi_endproc
 4400              	.LFE187:
 4402              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 4403              	 .align 2
 4404              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 4405              	 .code 16
 4406              	 .thumb_func
 4408              	XMC_VADC_GROUP_ChannelTriggerEvent:
 4409              	.LFB188:
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1830:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1831:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4410              	 .loc 1 1831 0
 4411              	 .cfi_startproc
 4412              	.LVL549:
1832:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1835:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4413              	 .loc 1 1838 0
 4414 0000 0122     	 mov r2,#1
 4415 0002 8A40     	 lsl r2,r2,r1
1831:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
 4416              	 .loc 1 1831 0
 4417 0004 10B5     	 push {r4,lr}
 4418              	 .cfi_def_cfa_offset 8
 4419              	 .cfi_offset 4,-8
 4420              	 .cfi_offset 14,-4
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4421              	 .loc 1 1837 0
 4422 0006 C024     	 mov r4,#192
 4423              	 .loc 1 1838 0
 4424 0008 111C     	 mov r1,r2
 4425              	.LVL550:
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4426              	 .loc 1 1837 0
 4427 000a 6400     	 lsl r4,r4,#1
 4428 000c 0359     	 ldr r3,[r0,r4]
 4429              	.LVL551:
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
1840:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4430              	 .loc 1 1840 0
 4431              	 
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4432              	 .loc 1 1838 0
 4433 000e 1943     	 orr r1,r3
 4434              	.LVL552:
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4435              	 .loc 1 1839 0
 4436 0010 0151     	 str r1,[r0,r4]
 4437              	 .loc 1 1840 0
 4438 0012 10BD     	 pop {r4,pc}
 4439              	 .cfi_endproc
 4440              	.LFE188:
 4442              	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 4443              	 .align 2
 4444              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 4445              	 .code 16
 4446              	 .thumb_func
 4448              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 4449              	.LFB189:
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1843:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1844:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1845:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1846:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4450              	 .loc 1 1846 0
 4451              	 .cfi_startproc
 4452              	.LVL553:
 4453 0000 30B5     	 push {r4,r5,lr}
 4454              	 .cfi_def_cfa_offset 12
 4455              	 .cfi_offset 4,-12
 4456              	 .cfi_offset 5,-8
 4457              	 .cfi_offset 14,-4
1847:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1848:../Libraries/XMCLib/src/xmc_vadc.c **** 
1849:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1851:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1853:../Libraries/XMCLib/src/xmc_vadc.c **** 
1854:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4458              	 .loc 1 1855 0
 4459 0002 0F24     	 mov r4,#15
1854:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4460              	 .loc 1 1854 0
 4461 0004 D025     	 mov r5,#208
 4462              	 .loc 1 1855 0
 4463 0006 8900     	 lsl r1,r1,#2
 4464              	.LVL554:
 4465 0008 8C40     	 lsl r4,r4,r1
1856:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4466              	 .loc 1 1856 0
 4467 000a 8A40     	 lsl r2,r2,r1
 4468              	.LVL555:
1854:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4469              	 .loc 1 1854 0
 4470 000c 6D00     	 lsl r5,r5,#1
 4471 000e 4359     	 ldr r3,[r0,r5]
 4472              	.LVL556:
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
1858:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4473              	 .loc 1 1858 0
 4474              	 
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4475              	 .loc 1 1855 0
 4476 0010 A343     	 bic r3,r4
 4477              	.LVL557:
1856:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4478              	 .loc 1 1856 0
 4479 0012 1343     	 orr r3,r2
 4480              	.LVL558:
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 4481              	 .loc 1 1857 0
 4482 0014 4351     	 str r3,[r0,r5]
 4483              	 .loc 1 1858 0
 4484 0016 30BD     	 pop {r4,r5,pc}
 4485              	 .cfi_endproc
 4486              	.LFE189:
 4488              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 4489              	 .align 2
 4490              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 4491              	 .code 16
 4492              	 .thumb_func
 4494              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 4495              	.LFB190:
1859:../Libraries/XMCLib/src/xmc_vadc.c **** 
1860:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1861:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1862:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1863:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1864:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4496              	 .loc 1 1864 0
 4497              	 .cfi_startproc
 4498              	.LVL559:
 4499 0000 8900     	 lsl r1,r1,#2
 4500              	.LVL560:
 4501 0002 4118     	 add r1,r0,r1
1865:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1866:../Libraries/XMCLib/src/xmc_vadc.c **** 
1867:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1869:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1871:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1872:../Libraries/XMCLib/src/xmc_vadc.c **** 
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4502              	 .loc 1 1873 0
 4503 0004 8020     	 mov r0,#128
 4504              	.LVL561:
1864:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
 4505              	 .loc 1 1864 0
 4506 0006 10B5     	 push {r4,lr}
 4507              	 .cfi_def_cfa_offset 8
 4508              	 .cfi_offset 4,-8
 4509              	 .cfi_offset 14,-4
 4510              	 .loc 1 1873 0
 4511 0008 8000     	 lsl r0,r0,#2
 4512 000a 0C58     	 ldr r4,[r1,r0]
 4513              	.LVL562:
1874:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4514              	 .loc 1 1874 0
 4515 000c 024B     	 ldr r3,.L350
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 4516              	 .loc 1 1875 0
 4517 000e 1202     	 lsl r2,r2,#8
 4518              	.LVL563:
1874:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4519              	 .loc 1 1874 0
 4520 0010 2340     	 and r3,r4
 4521              	.LVL564:
 4522              	 .loc 1 1875 0
 4523 0012 1A43     	 orr r2,r3
 4524              	.LVL565:
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4525              	 .loc 1 1876 0
 4526 0014 0A50     	 str r2,[r1,r0]
1877:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4527              	 .loc 1 1877 0
 4528              	 
 4529 0016 10BD     	 pop {r4,pc}
 4530              	.L351:
 4531              	 .align 2
 4532              	.L350:
 4533 0018 FFFCFFFF 	 .word -769
 4534              	 .cfi_endproc
 4535              	.LFE190:
 4537              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 4538              	 .align 2
 4539              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 4540              	 .code 16
 4541              	 .thumb_func
 4543              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 4544              	.LFB191:
1878:../Libraries/XMCLib/src/xmc_vadc.c **** 
1879:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1880:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1881:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1882:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1883:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1884:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4545              	 .loc 1 1884 0
 4546              	 .cfi_startproc
 4547              	.LVL566:
 4548 0000 30B5     	 push {r4,r5,lr}
 4549              	 .cfi_def_cfa_offset 12
 4550              	 .cfi_offset 4,-12
 4551              	 .cfi_offset 5,-8
 4552              	 .cfi_offset 14,-4
1885:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1886:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1887:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1888:../Libraries/XMCLib/src/xmc_vadc.c **** 
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 4553              	 .loc 1 1889 0
 4554 0002 3025     	 mov r5,#48
 4555 0004 9540     	 lsl r5,r5,r2
1890:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4556              	 .loc 1 1890 0
 4557 0006 0432     	 add r2,r2,#4
 4558              	.LVL567:
 4559 0008 9340     	 lsl r3,r3,r2
 4560              	.LVL568:
 4561 000a 8900     	 lsl r1,r1,#2
 4562              	.LVL569:
 4563 000c 4118     	 add r1,r0,r1
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4564              	 .loc 1 1889 0
 4565 000e 8020     	 mov r0,#128
 4566              	.LVL570:
 4567              	 .loc 1 1890 0
 4568 0010 1A1C     	 mov r2,r3
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4569              	 .loc 1 1889 0
 4570 0012 8000     	 lsl r0,r0,#2
 4571 0014 0C58     	 ldr r4,[r1,r0]
1891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4572              	 .loc 1 1891 0
 4573              	 
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4574              	 .loc 1 1889 0
 4575 0016 AC43     	 bic r4,r5
 4576 0018 0C50     	 str r4,[r1,r0]
1890:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4577              	 .loc 1 1890 0
 4578 001a 0C58     	 ldr r4,[r1,r0]
 4579 001c 2243     	 orr r2,r4
 4580 001e 0A50     	 str r2,[r1,r0]
 4581              	 .loc 1 1891 0
 4582 0020 30BD     	 pop {r4,r5,pc}
 4583              	 .cfi_endproc
 4584              	.LFE191:
 4586 0022 C046     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 4587              	 .align 2
 4588              	 .global XMC_VADC_GROUP_AddResultToFifo
 4589              	 .code 16
 4590              	 .thumb_func
 4592              	XMC_VADC_GROUP_AddResultToFifo:
 4593              	.LFB192:
1892:../Libraries/XMCLib/src/xmc_vadc.c **** 
1893:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1894:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1895:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4594              	 .loc 1 1895 0
 4595              	 .cfi_startproc
 4596              	.LVL571:
1896:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1897:../Libraries/XMCLib/src/xmc_vadc.c **** 
1898:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1899:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1902:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 4597              	 .loc 1 1902 0
 4598 0000 A022     	 mov r2,#160
 4599 0002 8900     	 lsl r1,r1,#2
 4600              	.LVL572:
 4601 0004 4118     	 add r1,r0,r1
 4602 0006 9200     	 lsl r2,r2,#2
 4603 0008 8858     	 ldr r0,[r1,r2]
 4604              	.LVL573:
1903:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 4605              	 .loc 1 1903 0
 4606 000a 034B     	 ldr r3,.L354
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1905:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
1907:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4607              	 .loc 1 1907 0
 4608              	 
1903:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 4609              	 .loc 1 1903 0
 4610 000c 0340     	 and r3,r0
 4611              	.LVL574:
1905:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 4612              	 .loc 1 1905 0
 4613 000e 8020     	 mov r0,#128
 4614 0010 8004     	 lsl r0,r0,#18
 4615 0012 0343     	 orr r3,r0
 4616              	.LVL575:
1906:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4617              	 .loc 1 1906 0
 4618 0014 8B50     	 str r3,[r1,r2]
 4619              	 .loc 1 1907 0
 4620 0016 7047     	 bx lr
 4621              	.L355:
 4622              	 .align 2
 4623              	.L354:
 4624 0018 FFFFFFF9 	 .word -100663297
 4625              	 .cfi_endproc
 4626              	.LFE192:
 4628              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 4629              	 .align 2
 4630              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 4631              	 .code 16
 4632              	 .thumb_func
 4634              	XMC_VADC_GROUP_SetResultFastCompareValue:
 4635              	.LFB193:
1908:../Libraries/XMCLib/src/xmc_vadc.c **** 
1909:../Libraries/XMCLib/src/xmc_vadc.c **** 
1910:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1911:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1912:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1913:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1914:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4636              	 .loc 1 1914 0
 4637              	 .cfi_startproc
 4638              	.LVL576:
 4639 0000 8900     	 lsl r1,r1,#2
 4640              	.LVL577:
 4641 0002 4118     	 add r1,r0,r1
1915:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 4642              	 .loc 1 1915 0
 4643 0004 C020     	 mov r0,#192
 4644              	.LVL578:
 4645 0006 8000     	 lsl r0,r0,#2
 4646 0008 0B58     	 ldr r3,[r1,r0]
 4647              	.LVL579:
1916:../Libraries/XMCLib/src/xmc_vadc.c **** 
1917:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1918:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1919:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1920:../Libraries/XMCLib/src/xmc_vadc.c **** 
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
1922:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 4648              	 .loc 1 1922 0
 4649 000a 9200     	 lsl r2,r2,#2
 4650              	.LVL580:
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 4651              	 .loc 1 1921 0
 4652 000c 1B0C     	 lsr r3,r3,#16
 4653              	.LVL581:
 4654 000e 1B04     	 lsl r3,r3,#16
 4655              	.LVL582:
 4656              	 .loc 1 1922 0
 4657 0010 1A43     	 orr r2,r3
 4658              	.LVL583:
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 4659              	 .loc 1 1923 0
 4660 0012 0A50     	 str r2,[r1,r0]
1924:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4661              	 .loc 1 1924 0
 4662              	 
 4663 0014 7047     	 bx lr
 4664              	 .cfi_endproc
 4665              	.LFE193:
 4667 0016 C046     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 4668              	 .align 2
 4669              	 .global XMC_VADC_GROUP_GetFastCompareResult
 4670              	 .code 16
 4671              	 .thumb_func
 4673              	XMC_VADC_GROUP_GetFastCompareResult:
 4674              	.LFB194:
1925:../Libraries/XMCLib/src/xmc_vadc.c **** 
1926:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1927:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1928:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4675              	 .loc 1 1928 0
 4676              	 .cfi_startproc
 4677              	.LVL584:
1929:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1930:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1931:../Libraries/XMCLib/src/xmc_vadc.c **** 
1932:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1933:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1934:../Libraries/XMCLib/src/xmc_vadc.c **** 
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 4678              	 .loc 1 1935 0
 4679 0000 C031     	 add r1,r1,#192
 4680              	.LVL585:
 4681 0002 8900     	 lsl r1,r1,#2
 4682              	.LVL586:
 4683 0004 0B58     	 ldr r3,[r1,r0]
 4684              	.LVL587:
1936:../Libraries/XMCLib/src/xmc_vadc.c **** 
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1939:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1942:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1943:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 4685              	 .loc 1 1943 0
 4686 0006 0220     	 mov r0,#2
 4687              	.LVL588:
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4688              	 .loc 1 1937 0
 4689 0008 002B     	 cmp r3,#0
 4690 000a 00DB     	 blt .L360
 4691              	.LVL589:
 4692              	.L358:
1944:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1945:../Libraries/XMCLib/src/xmc_vadc.c **** 
1946:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
1947:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4693              	 .loc 1 1947 0
 4694              	 
 4695 000c 7047     	 bx lr
 4696              	.LVL590:
 4697              	.L360:
1939:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 4698              	 .loc 1 1939 0
 4699 000e 5B00     	 lsl r3,r3,#1
 4700              	.LVL591:
 4701 0010 D80F     	 lsr r0,r3,#31
 4702              	.LVL592:
 4703 0012 FBE7     	 b .L358
 4704              	 .cfi_endproc
 4705              	.LFE194:
 4707              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 4708              	 .align 2
 4709              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 4710              	 .code 16
 4711              	 .thumb_func
 4713              	XMC_VADC_GROUP_SetResultSubtractionValue:
 4714              	.LFB195:
1948:../Libraries/XMCLib/src/xmc_vadc.c **** 
1949:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1950:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1951:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1952:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4715              	 .loc 1 1952 0
 4716              	 .cfi_startproc
 4717              	.LVL593:
1953:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1954:../Libraries/XMCLib/src/xmc_vadc.c **** 
1955:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1956:../Libraries/XMCLib/src/xmc_vadc.c **** 
1957:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 4718              	 .loc 1 1957 0
 4719 0000 C022     	 mov r2,#192
 4720 0002 9200     	 lsl r2,r2,#2
 4721 0004 8358     	 ldr r3,[r0,r2]
 4722              	.LVL594:
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
1959:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
1961:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4723              	 .loc 1 1961 0
 4724              	 
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 4725              	 .loc 1 1958 0
 4726 0006 1B0C     	 lsr r3,r3,#16
 4727              	.LVL595:
 4728 0008 1B04     	 lsl r3,r3,#16
 4729              	.LVL596:
1959:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 4730              	 .loc 1 1959 0
 4731 000a 1943     	 orr r1,r3
 4732              	.LVL597:
1960:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4733              	 .loc 1 1960 0
 4734 000c 8150     	 str r1,[r0,r2]
 4735              	 .loc 1 1961 0
 4736 000e 7047     	 bx lr
 4737              	 .cfi_endproc
 4738              	.LFE195:
 4740              	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 4741              	 .align 2
 4742              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 4743              	 .code 16
 4744              	 .thumb_func
 4746              	XMC_VADC_GROUP_SetResultInterruptNode:
 4747              	.LFB196:
1962:../Libraries/XMCLib/src/xmc_vadc.c **** 
1963:../Libraries/XMCLib/src/xmc_vadc.c **** 
1964:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1965:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1966:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1967:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1968:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4748              	 .loc 1 1968 0
 4749              	 .cfi_startproc
 4750              	.LVL598:
 4751 0000 30B5     	 push {r4,r5,lr}
 4752              	 .cfi_def_cfa_offset 12
 4753              	 .cfi_offset 4,-12
 4754              	 .cfi_offset 5,-8
 4755              	 .cfi_offset 14,-4
1969:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1970:../Libraries/XMCLib/src/xmc_vadc.c **** 
1971:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1972:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1973:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1974:../Libraries/XMCLib/src/xmc_vadc.c **** 
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 4756              	 .loc 1 1975 0
 4757 0002 0729     	 cmp r1,#7
 4758 0004 0ED9     	 bls .L366
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1977:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
1978:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
1979:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
1980:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1982:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1983:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1984:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 4759              	 .loc 1 1984 0
 4760 0006 DA25     	 mov r5,#218
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 4761              	 .loc 1 1985 0
 4762 0008 084C     	 ldr r4,.L367
1984:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 4763              	 .loc 1 1984 0
 4764 000a 6D00     	 lsl r5,r5,#1
 4765              	 .loc 1 1985 0
 4766 000c A446     	 mov ip,r4
1984:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 4767              	 .loc 1 1984 0
 4768 000e 4359     	 ldr r3,[r0,r5]
 4769              	.LVL599:
 4770              	 .loc 1 1985 0
 4771 0010 6144     	 add r1,r1,ip
 4772              	.LVL600:
 4773              	.L365:
 4774 0012 8900     	 lsl r1,r1,#2
 4775 0014 0F24     	 mov r4,#15
1986:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 4776              	 .loc 1 1986 0
 4777 0016 8A40     	 lsl r2,r2,r1
 4778              	.LVL601:
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 4779              	 .loc 1 1985 0
 4780 0018 8C40     	 lsl r4,r4,r1
 4781              	 .loc 1 1986 0
 4782 001a 111C     	 mov r1,r2
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 4783              	 .loc 1 1985 0
 4784 001c A343     	 bic r3,r4
 4785              	.LVL602:
 4786              	 .loc 1 1986 0
 4787 001e 1943     	 orr r1,r3
 4788              	.LVL603:
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 4789              	 .loc 1 1987 0
 4790 0020 4151     	 str r1,[r0,r5]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1989:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4791              	 .loc 1 1989 0
 4792              	 
 4793 0022 30BD     	 pop {r4,r5,pc}
 4794              	.LVL604:
 4795              	.L366:
1977:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 4796              	 .loc 1 1977 0
 4797 0024 D825     	 mov r5,#216
 4798 0026 6D00     	 lsl r5,r5,#1
 4799 0028 4359     	 ldr r3,[r0,r5]
 4800              	.LVL605:
 4801 002a F2E7     	 b .L365
 4802              	.L368:
 4803              	 .align 2
 4804              	.L367:
 4805 002c F8FFFF3F 	 .word 1073741816
 4806              	 .cfi_endproc
 4807              	.LFE196:
 4809              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 4810              	 .align 2
 4811              	 .global XMC_VADC_GROUP_GetResultFifoTail
 4812              	 .code 16
 4813              	 .thumb_func
 4815              	XMC_VADC_GROUP_GetResultFifoTail:
 4816              	.LFB197:
1990:../Libraries/XMCLib/src/xmc_vadc.c **** 
1991:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1992:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1993:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4817              	 .loc 1 1993 0
 4818              	 .cfi_startproc
 4819              	.LVL606:
 4820 0000 8B00     	 lsl r3,r1,#2
 4821 0002 C318     	 add r3,r0,r3
 4822 0004 30B5     	 push {r4,r5,lr}
 4823              	 .cfi_def_cfa_offset 12
 4824              	 .cfi_offset 4,-12
 4825              	 .cfi_offset 5,-8
 4826              	 .cfi_offset 14,-4
 4827              	 .loc 1 1993 0
 4828 0006 021C     	 mov r2,r0
 4829              	.LBB146:
 4830              	.LBB147:
1994:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
1995:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
1996:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
1998:../Libraries/XMCLib/src/xmc_vadc.c **** 
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2001:../Libraries/XMCLib/src/xmc_vadc.c **** 
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
2004:../Libraries/XMCLib/src/xmc_vadc.c **** 
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2007:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2009:../Libraries/XMCLib/src/xmc_vadc.c **** 
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
2012:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2013:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2017:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2018:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
2019:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2020:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
2021:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
2022:../Libraries/XMCLib/src/xmc_vadc.c **** 
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
2024:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
2026:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2027:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2028:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
2029:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
2030:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2031:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2032:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2033:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2034:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2035:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
2036:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
2037:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2038:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
2039:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2040:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2042:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2043:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2044:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
2045:../Libraries/XMCLib/src/xmc_vadc.c **** }
2046:../Libraries/XMCLib/src/xmc_vadc.c **** 
2047:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2048:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2049:../Libraries/XMCLib/src/xmc_vadc.c **** {
2050:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2051:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2052:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2053:../Libraries/XMCLib/src/xmc_vadc.c **** 
2054:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2056:../Libraries/XMCLib/src/xmc_vadc.c **** 
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2059:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2061:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2063:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
2064:../Libraries/XMCLib/src/xmc_vadc.c **** 
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
2066:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
2068:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
2069:../Libraries/XMCLib/src/xmc_vadc.c **** 
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
2071:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2072:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2073:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
2074:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
2075:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2076:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2077:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2078:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
2079:../Libraries/XMCLib/src/xmc_vadc.c **** }
2080:../Libraries/XMCLib/src/xmc_vadc.c **** 
2081:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2082:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2083:../Libraries/XMCLib/src/xmc_vadc.c **** {
2084:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2085:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2086:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2087:../Libraries/XMCLib/src/xmc_vadc.c **** 
2088:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2090:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2091:../Libraries/XMCLib/src/xmc_vadc.c **** 
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 4831              	 .loc 1 2094 0
 4832 0008 9F24     	 mov r4,#159
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4833              	 .loc 1 2092 0
 4834 000a A020     	 mov r0,#160
 4835              	.LVL607:
 4836              	 .loc 1 2094 0
 4837 000c A400     	 lsl r4,r4,#2
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4838              	 .loc 1 2092 0
 4839 000e 8000     	 lsl r0,r0,#2
 4840 0010 1858     	 ldr r0,[r3,r0]
 4841              	.LVL608:
 4842              	 .loc 1 2094 0
 4843 0012 1C59     	 ldr r4,[r3,r4]
 4844              	.LVL609:
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 4845              	 .loc 1 2093 0
 4846 0014 C023     	 mov r3,#192
 4847 0016 DB04     	 lsl r3,r3,#19
 4848              	 .loc 1 2094 0
 4849 0018 4D1E     	 sub r5,r1,#1
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
2096:../Libraries/XMCLib/src/xmc_vadc.c **** 
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 4850              	 .loc 1 2097 0
 4851 001a 1842     	 tst r0,r3
 4852 001c 01D1     	 bne .L370
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2099:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 4853              	 .loc 1 2101 0
 4854 001e 1C42     	 tst r4,r3
 4855 0020 18D1     	 bne .L388
 4856              	.LVL610:
 4857              	.L370:
 4858              	.LBE147:
 4859              	.LBE146:
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 4860              	 .loc 1 2013 0
 4861 0022 0020     	 mov r0,#0
 4862              	.LVL611:
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4863              	 .loc 1 2011 0
 4864 0024 0029     	 cmp r1,#0
 4865 0026 09D0     	 beq .L384
 4866              	.LVL612:
2018:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4867              	 .loc 1 2018 0
 4868 0028 08DB     	 blt .L384
2020:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4869              	 .loc 1 2020 0
 4870 002a 0B1C     	 mov r3,r1
2021:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4871              	 .loc 1 2021 0
 4872 002c C020     	 mov r0,#192
2020:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4873              	 .loc 1 2020 0
 4874 002e A033     	 add r3,r3,#160
 4875 0030 9B00     	 lsl r3,r3,#2
 4876 0032 9B58     	 ldr r3,[r3,r2]
 4877              	.LVL613:
2021:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4878              	 .loc 1 2021 0
 4879 0034 C004     	 lsl r0,r0,#19
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        {
 4880              	 .loc 1 2023 0
 4881 0036 0342     	 tst r3,r0
 4882 0038 03D1     	 bne .L375
 4883              	.LVL614:
 4884              	.L373:
2035:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 4885              	 .loc 1 2035 0
 4886 003a 481C     	 add r0,r1,#1
 4887              	.LVL615:
 4888              	.L384:
2045:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4889              	 .loc 1 2045 0
 4890              	 
 4891              	.LVL616:
 4892              	.LVL617:
 4893 003c 30BD     	 pop {r4,r5,pc}
 4894              	.LVL618:
 4895              	.L389:
2025:../Libraries/XMCLib/src/xmc_vadc.c ****          {
 4896              	 .loc 1 2025 0
 4897 003e 0029     	 cmp r1,#0
 4898 0040 0AD0     	 beq .L379
 4899              	.LVL619:
 4900              	.L375:
2018:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4901              	 .loc 1 2018 0
 4902 0042 0139     	 sub r1,r1,#1
 4903 0044 08D3     	 bcc .L379
 4904              	.LVL620:
2020:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4905              	 .loc 1 2020 0
 4906 0046 0B1C     	 mov r3,r1
 4907 0048 A033     	 add r3,r3,#160
 4908 004a 9B00     	 lsl r3,r3,#2
 4909 004c 9B58     	 ldr r3,[r3,r2]
 4910              	.LVL621:
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        {
 4911              	 .loc 1 2023 0
 4912 004e 0342     	 tst r3,r0
 4913 0050 F3D0     	 beq .L373
 4914 0052 F4E7     	 b .L389
 4915              	.LVL622:
 4916              	.L388:
2007:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 4917              	 .loc 1 2007 0
 4918 0054 291C     	 mov r1,r5
 4919              	.LVL623:
 4920 0056 E4E7     	 b .L370
 4921              	.LVL624:
 4922              	.L379:
2028:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 4923              	 .loc 1 2028 0
 4924 0058 0020     	 mov r0,#0
 4925              	.LVL625:
 4926 005a EFE7     	 b .L384
 4927              	 .cfi_endproc
 4928              	.LFE197:
 4930              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 4931              	 .align 2
 4932              	 .global XMC_VADC_GROUP_GetResultFifoHead
 4933              	 .code 16
 4934              	 .thumb_func
 4936              	XMC_VADC_GROUP_GetResultFifoHead:
 4937              	.LFB198:
2049:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
 4938              	 .loc 1 2049 0
 4939              	 .cfi_startproc
 4940              	.LVL626:
 4941 0000 30B5     	 push {r4,r5,lr}
 4942              	 .cfi_def_cfa_offset 12
 4943              	 .cfi_offset 4,-12
 4944              	 .cfi_offset 5,-8
 4945              	 .cfi_offset 14,-4
 4946              	.LBB148:
 4947              	.LBB149:
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4948              	 .loc 1 2092 0
 4949 0002 A023     	 mov r3,#160
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4950              	 .loc 1 2094 0
 4951 0004 9F24     	 mov r4,#159
 4952 0006 8A00     	 lsl r2,r1,#2
 4953 0008 8218     	 add r2,r0,r2
 4954 000a A400     	 lsl r4,r4,#2
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4955              	 .loc 1 2092 0
 4956 000c 9B00     	 lsl r3,r3,#2
 4957 000e D358     	 ldr r3,[r2,r3]
 4958              	.LVL627:
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4959              	 .loc 1 2094 0
 4960 0010 1559     	 ldr r5,[r2,r4]
 4961              	.LVL628:
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 4962              	 .loc 1 2093 0
 4963 0012 C024     	 mov r4,#192
 4964 0014 E404     	 lsl r4,r4,#19
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4965              	 .loc 1 2097 0
 4966 0016 2342     	 tst r3,r4
 4967 0018 03D1     	 bne .L395
 4968              	 .loc 1 2101 0
 4969 001a 0B1C     	 mov r3,r1
 4970              	.LVL629:
 4971 001c 2542     	 tst r5,r4
 4972 001e 00D0     	 beq .LCB4622
 4973 0020 97E0     	 b .L392
 4974              	.LCB4622:
 4975              	.L395:
 4976              	.LVL630:
 4977              	.LBE149:
 4978              	.LBE148:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4979              	 .loc 1 2065 0 discriminator 1
 4980 0022 0F29     	 cmp r1,#15
 4981 0024 00D9     	 bls .LCB4630
 4982 0026 96E0     	 b .L414
 4983              	.LCB4630:
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 4984              	 .loc 1 2067 0
 4985 0028 A023     	 mov r3,#160
 4986 002a 9B00     	 lsl r3,r3,#2
 4987 002c D358     	 ldr r3,[r2,r3]
 4988              	.LVL631:
2068:../Libraries/XMCLib/src/xmc_vadc.c **** 
 4989              	 .loc 1 2068 0
 4990 002e C022     	 mov r2,#192
 4991 0030 D204     	 lsl r2,r2,#19
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4992              	 .loc 1 2070 0
 4993 0032 1342     	 tst r3,r2
 4994 0034 00D1     	 bne .LCB4639
 4995 0036 90E0     	 b .L460
 4996              	.LCB4639:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4997              	 .loc 1 2065 0
 4998 0038 4B1C     	 add r3,r1,#1
 4999              	.LVL632:
 5000 003a 102B     	 cmp r3,#16
 5001 003c 00D1     	 bne .LCB4646
 5002 003e 8AE0     	 b .L414
 5003              	.LCB4646:
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5004              	 .loc 1 2067 0
 5005 0040 0C1C     	 mov r4,r1
 5006 0042 A134     	 add r4,r4,#161
 5007 0044 A400     	 lsl r4,r4,#2
 5008 0046 2458     	 ldr r4,[r4,r0]
 5009              	.LVL633:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5010              	 .loc 1 2070 0
 5011 0048 1442     	 tst r4,r2
 5012 004a 00D1     	 bne .LCB4655
 5013 004c 81E0     	 b .L392
 5014              	.LCB4655:
 5015              	.LVL634:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5016              	 .loc 1 2065 0
 5017 004e 8B1C     	 add r3,r1,#2
 5018              	.LVL635:
 5019 0050 102B     	 cmp r3,#16
 5020 0052 00D1     	 bne .LCB4663
 5021 0054 7FE0     	 b .L414
 5022              	.LCB4663:
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5023              	 .loc 1 2067 0
 5024 0056 0C1C     	 mov r4,r1
 5025 0058 A234     	 add r4,r4,#162
 5026 005a A400     	 lsl r4,r4,#2
 5027 005c 2458     	 ldr r4,[r4,r0]
 5028              	.LVL636:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5029              	 .loc 1 2070 0
 5030 005e 1442     	 tst r4,r2
 5031 0060 77D0     	 beq .L392
 5032              	.LVL637:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5033              	 .loc 1 2065 0
 5034 0062 CB1C     	 add r3,r1,#3
 5035              	.LVL638:
 5036 0064 102B     	 cmp r3,#16
 5037 0066 00D1     	 bne .LCB4680
 5038 0068 75E0     	 b .L414
 5039              	.LCB4680:
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5040              	 .loc 1 2067 0
 5041 006a 0C1C     	 mov r4,r1
 5042 006c A334     	 add r4,r4,#163
 5043 006e A400     	 lsl r4,r4,#2
 5044 0070 2458     	 ldr r4,[r4,r0]
 5045              	.LVL639:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5046              	 .loc 1 2070 0
 5047 0072 1442     	 tst r4,r2
 5048 0074 6DD0     	 beq .L392
 5049              	.LVL640:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5050              	 .loc 1 2065 0
 5051 0076 0B1D     	 add r3,r1,#4
 5052              	.LVL641:
 5053 0078 102B     	 cmp r3,#16
 5054 007a 00D1     	 bne .LCB4697
 5055 007c 6BE0     	 b .L414
 5056              	.LCB4697:
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5057              	 .loc 1 2067 0
 5058 007e 0C1C     	 mov r4,r1
 5059 0080 A434     	 add r4,r4,#164
 5060 0082 A400     	 lsl r4,r4,#2
 5061 0084 2458     	 ldr r4,[r4,r0]
 5062              	.LVL642:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5063              	 .loc 1 2070 0
 5064 0086 1442     	 tst r4,r2
 5065 0088 63D0     	 beq .L392
 5066              	.LVL643:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5067              	 .loc 1 2065 0
 5068 008a 4B1D     	 add r3,r1,#5
 5069              	.LVL644:
 5070 008c 102B     	 cmp r3,#16
 5071 008e 62D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5072              	 .loc 1 2067 0
 5073 0090 0A1C     	 mov r2,r1
 5074 0092 A532     	 add r2,r2,#165
 5075 0094 9200     	 lsl r2,r2,#2
 5076 0096 1458     	 ldr r4,[r2,r0]
 5077              	.LVL645:
2068:../Libraries/XMCLib/src/xmc_vadc.c **** 
 5078              	 .loc 1 2068 0
 5079 0098 C022     	 mov r2,#192
 5080 009a D204     	 lsl r2,r2,#19
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5081              	 .loc 1 2070 0
 5082 009c 1442     	 tst r4,r2
 5083 009e 58D0     	 beq .L392
 5084              	.LVL646:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5085              	 .loc 1 2065 0
 5086 00a0 8B1D     	 add r3,r1,#6
 5087              	.LVL647:
 5088 00a2 102B     	 cmp r3,#16
 5089 00a4 57D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5090              	 .loc 1 2067 0
 5091 00a6 0C1C     	 mov r4,r1
 5092 00a8 A634     	 add r4,r4,#166
 5093 00aa A400     	 lsl r4,r4,#2
 5094 00ac 2458     	 ldr r4,[r4,r0]
 5095              	.LVL648:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5096              	 .loc 1 2070 0
 5097 00ae 1442     	 tst r4,r2
 5098 00b0 4FD0     	 beq .L392
 5099              	.LVL649:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5100              	 .loc 1 2065 0
 5101 00b2 CB1D     	 add r3,r1,#7
 5102              	.LVL650:
 5103 00b4 102B     	 cmp r3,#16
 5104 00b6 4ED0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5105              	 .loc 1 2067 0
 5106 00b8 0C1C     	 mov r4,r1
 5107 00ba A734     	 add r4,r4,#167
 5108 00bc A400     	 lsl r4,r4,#2
 5109 00be 2458     	 ldr r4,[r4,r0]
 5110              	.LVL651:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5111              	 .loc 1 2070 0
 5112 00c0 1442     	 tst r4,r2
 5113 00c2 46D0     	 beq .L392
 5114              	.LVL652:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5115              	 .loc 1 2065 0
 5116 00c4 0133     	 add r3,r3,#1
 5117 00c6 102B     	 cmp r3,#16
 5118 00c8 45D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5119              	 .loc 1 2067 0
 5120 00ca 0C1C     	 mov r4,r1
 5121 00cc A834     	 add r4,r4,#168
 5122 00ce A400     	 lsl r4,r4,#2
 5123 00d0 2458     	 ldr r4,[r4,r0]
 5124              	.LVL653:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5125              	 .loc 1 2070 0
 5126 00d2 1442     	 tst r4,r2
 5127 00d4 3DD0     	 beq .L392
 5128              	.LVL654:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5129              	 .loc 1 2065 0
 5130 00d6 0133     	 add r3,r3,#1
 5131 00d8 102B     	 cmp r3,#16
 5132 00da 3CD0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5133              	 .loc 1 2067 0
 5134 00dc 0C1C     	 mov r4,r1
 5135 00de A934     	 add r4,r4,#169
 5136 00e0 A400     	 lsl r4,r4,#2
 5137 00e2 2458     	 ldr r4,[r4,r0]
 5138              	.LVL655:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5139              	 .loc 1 2070 0
 5140 00e4 1442     	 tst r4,r2
 5141 00e6 34D0     	 beq .L392
 5142              	.LVL656:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5143              	 .loc 1 2065 0
 5144 00e8 0133     	 add r3,r3,#1
 5145 00ea 102B     	 cmp r3,#16
 5146 00ec 33D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5147              	 .loc 1 2067 0
 5148 00ee 0A1C     	 mov r2,r1
 5149 00f0 AA32     	 add r2,r2,#170
 5150 00f2 9200     	 lsl r2,r2,#2
 5151 00f4 1458     	 ldr r4,[r2,r0]
 5152              	.LVL657:
2068:../Libraries/XMCLib/src/xmc_vadc.c **** 
 5153              	 .loc 1 2068 0
 5154 00f6 C022     	 mov r2,#192
 5155 00f8 D204     	 lsl r2,r2,#19
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5156              	 .loc 1 2070 0
 5157 00fa 1442     	 tst r4,r2
 5158 00fc 29D0     	 beq .L392
 5159              	.LVL658:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5160              	 .loc 1 2065 0
 5161 00fe 0133     	 add r3,r3,#1
 5162 0100 102B     	 cmp r3,#16
 5163 0102 28D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5164              	 .loc 1 2067 0
 5165 0104 0C1C     	 mov r4,r1
 5166 0106 AB34     	 add r4,r4,#171
 5167 0108 A400     	 lsl r4,r4,#2
 5168 010a 2458     	 ldr r4,[r4,r0]
 5169              	.LVL659:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5170              	 .loc 1 2070 0
 5171 010c 1442     	 tst r4,r2
 5172 010e 20D0     	 beq .L392
 5173              	.LVL660:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5174              	 .loc 1 2065 0
 5175 0110 0133     	 add r3,r3,#1
 5176 0112 102B     	 cmp r3,#16
 5177 0114 1FD0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5178              	 .loc 1 2067 0
 5179 0116 0C1C     	 mov r4,r1
 5180 0118 AC34     	 add r4,r4,#172
 5181 011a A400     	 lsl r4,r4,#2
 5182 011c 2458     	 ldr r4,[r4,r0]
 5183              	.LVL661:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5184              	 .loc 1 2070 0
 5185 011e 1442     	 tst r4,r2
 5186 0120 17D0     	 beq .L392
 5187              	.LVL662:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5188              	 .loc 1 2065 0
 5189 0122 0133     	 add r3,r3,#1
 5190 0124 102B     	 cmp r3,#16
 5191 0126 16D0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5192              	 .loc 1 2067 0
 5193 0128 0C1C     	 mov r4,r1
 5194 012a AD34     	 add r4,r4,#173
 5195 012c A400     	 lsl r4,r4,#2
 5196 012e 2458     	 ldr r4,[r4,r0]
 5197              	.LVL663:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5198              	 .loc 1 2070 0
 5199 0130 1442     	 tst r4,r2
 5200 0132 0ED0     	 beq .L392
 5201              	.LVL664:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5202              	 .loc 1 2065 0
 5203 0134 0133     	 add r3,r3,#1
 5204 0136 102B     	 cmp r3,#16
 5205 0138 0DD0     	 beq .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5206              	 .loc 1 2067 0
 5207 013a 0C1C     	 mov r4,r1
 5208 013c AE34     	 add r4,r4,#174
 5209 013e A400     	 lsl r4,r4,#2
 5210 0140 2458     	 ldr r4,[r4,r0]
 5211              	.LVL665:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5212              	 .loc 1 2070 0
 5213 0142 1442     	 tst r4,r2
 5214 0144 05D0     	 beq .L392
 5215              	.LVL666:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5216              	 .loc 1 2065 0
 5217 0146 0029     	 cmp r1,#0
 5218 0148 05D1     	 bne .L414
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5219              	 .loc 1 2067 0
 5220 014a AF23     	 mov r3,#175
 5221 014c 9B00     	 lsl r3,r3,#2
 5222 014e C358     	 ldr r3,[r0,r3]
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5223              	 .loc 1 2070 0
 5224 0150 0F23     	 mov r3,#15
 5225              	.LVL667:
 5226              	.L392:
2079:../Libraries/XMCLib/src/xmc_vadc.c **** 
 5227              	 .loc 1 2079 0
 5228 0152 181C     	 mov r0,r3
 5229              	.LVL668:
 5230              	 
 5231              	.LVL669:
 5232 0154 30BD     	 pop {r4,r5,pc}
 5233              	.LVL670:
 5234              	.L414:
2063:../Libraries/XMCLib/src/xmc_vadc.c **** 
 5235              	 .loc 1 2063 0
 5236 0156 0F23     	 mov r3,#15
 5237 0158 FBE7     	 b .L392
 5238              	.LVL671:
 5239              	.L460:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 5240              	 .loc 1 2070 0
 5241 015a 0B1C     	 mov r3,r1
 5242              	.LVL672:
2074:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 5243              	 .loc 1 2074 0
 5244 015c F9E7     	 b .L392
 5245              	 .cfi_endproc
 5246              	.LFE198:
 5248 015e C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 5249              	 .align 2
 5250              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 5251              	 .code 16
 5252              	 .thumb_func
 5254              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 5255              	.LFB199:
2083:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
 5256              	 .loc 1 2083 0
 5257              	 .cfi_startproc
 5258              	.LVL673:
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5259              	 .loc 1 2092 0
 5260 0000 A023     	 mov r3,#160
 5261 0002 8900     	 lsl r1,r1,#2
 5262              	.LVL674:
 5263 0004 4118     	 add r1,r0,r1
 5264 0006 9B00     	 lsl r3,r3,#2
 5265 0008 CA58     	 ldr r2,[r1,r3]
 5266              	.LVL675:
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5267              	 .loc 1 2094 0
 5268 000a 043B     	 sub r3,r3,#4
 5269 000c C958     	 ldr r1,[r1,r3]
 5270              	.LVL676:
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 5271              	 .loc 1 2093 0
 5272 000e C023     	 mov r3,#192
 5273 0010 DB04     	 lsl r3,r3,#19
2099:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 5274              	 .loc 1 2099 0
 5275 0012 0020     	 mov r0,#0
 5276              	.LVL677:
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 5277              	 .loc 1 2097 0
 5278 0014 1A42     	 tst r2,r3
 5279 0016 03D1     	 bne .L462
2095:../Libraries/XMCLib/src/xmc_vadc.c **** 
 5280              	 .loc 1 2095 0
 5281 0018 0B40     	 and r3,r1
 5282              	 .loc 1 2101 0
 5283 001a 581E     	 sub r0,r3,#1
 5284 001c 8341     	 sbc r3,r3,r0
 5285 001e D8B2     	 uxtb r0,r3
 5286              	.L462:
 5287              	.LVL678:
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2103:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2107:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2109:../Libraries/XMCLib/src/xmc_vadc.c **** 
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
2111:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5288              	 .loc 1 2111 0
 5289              	 
 5290 0020 7047     	 bx lr
 5291              	 .cfi_endproc
 5292              	.LFE199:
 5294 0022 C046     	 .text
 5295              	.Letext0:
 5296              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5297              	 .file 4 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5298              	 .file 5 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 5299              	 .file 6 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc/xmc1_scu.h"
 5300              	 .file 7 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/XMCLib/inc/xmc_scu.h"
 5301              	 .file 8 "C:/Users/choeoliv/Desktop/IFKOR FOC DRIVE/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:23     .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:50     .text.XMC_VADC_GLOBAL_EnableModule:00000010 $d
    {standard input}:55     .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:60     .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:79     .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:84     .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:157    .text.XMC_VADC_GLOBAL_Init:00000040 $d
    {standard input}:162    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:167    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:205    .text.XMC_VADC_GLOBAL_InputClassInit:0000001c $d
    {standard input}:211    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:216    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:270    .text.XMC_VADC_GLOBAL_StartupCalibration:00000040 $d
    {standard input}:276    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:281    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:302    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:307    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:361    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000024 $d
    {standard input}:366    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:371    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:400    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:405    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:438    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:443    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:491    .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:496    .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:535    .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000020 $d
    {standard input}:540    .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:545    .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:582    .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:587    .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:825    .text.XMC_VADC_GROUP_Init:000000c8 $d
    {standard input}:832    .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:837    .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:933    .text.XMC_VADC_GROUP_InputClassInit:0000004c $d
    {standard input}:940    .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:945    .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:978    .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:983    .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1023   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1028   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1053   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1058   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1079   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1084   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1105   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1110   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1143   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1148   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1179   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000001c $d
    {standard input}:1184   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1189   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:1211   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:1216   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:1252   .text.XMC_VADC_GROUP_SetBoundaries:00000014 $d
    {standard input}:1257   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:1262   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:1316   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000024 $d
    {standard input}:1321   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:1326   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:1360   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:1365   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:1405   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:1410   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:1448   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:1453   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:1492   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:1497   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:1534   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:1539   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:1583   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000024 $d
    {standard input}:1588   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:1593   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:1652   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:1657   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:1692   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:1697   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:1731   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:1736   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:1781   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:1786   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:1840   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:1845   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:1882   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000001c $d
    {standard input}:1887   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:1892   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:2018   .text.XMC_VADC_GROUP_ScanInit:00000080 $d
    {standard input}:2024   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:2029   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:2068   .text.XMC_VADC_GROUP_ScanSelectTrigger:0000001c $d
    {standard input}:2073   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:2078   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:2117   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:0000001c $d
    {standard input}:2122   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:2127   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:2166   .text.XMC_VADC_GROUP_ScanSelectGating:0000001c $d
    {standard input}:2171   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:2176   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:2267   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000004c $d
    {standard input}:2273   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:2278   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:2417   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2422   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:2458   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:2463   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:2496   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:2501   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:2698   .text.XMC_VADC_GLOBAL_BackgroundInit:000000a0 $d
    {standard input}:2707   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:2712   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:2751   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:0000001c $d
    {standard input}:2756   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:2761   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:2800   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:0000001c $d
    {standard input}:2805   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:2810   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:2849   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:0000001c $d
    {standard input}:2854   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:2859   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:2999   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000078 $d
    {standard input}:3009   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:3014   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:3178   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:3183   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:3306   .text.XMC_VADC_GROUP_QueueInit:00000078 $d
    {standard input}:3312   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:3317   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:3356   .text.XMC_VADC_GROUP_QueueSelectTrigger:0000001c $d
    {standard input}:3361   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:3366   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:3405   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:0000001c $d
    {standard input}:3410   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:3415   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:3454   .text.XMC_VADC_GROUP_QueueSelectGating:0000001c $d
    {standard input}:3459   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:3464   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:3504   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:3509   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:3599   .text.XMC_VADC_GROUP_QueueAbortSequence:0000004c $d
    {standard input}:3605   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:3610   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:3862   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000d4 $d
    {standard input}:3870   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:3875   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:3916   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:3921   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:3953   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3958   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:3992   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:3997   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:4112   .text.XMC_VADC_GROUP_ChannelInit:00000074 $d
    {standard input}:4117   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:4122   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:4171   .text.XMC_VADC_GROUP_SetChannelAlias:00000024 $d
    {standard input}:4176   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:4181   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:4232   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:4237   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:4276   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000018 $d
    {standard input}:4281   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:4286   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:4325   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000018 $d
    {standard input}:4330   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:4335   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:4373   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:4378   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:4403   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:4408   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:4443   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:4448   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:4489   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:4494   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:4533   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000018 $d
    {standard input}:4538   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:4543   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:4587   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:4592   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:4624   .text.XMC_VADC_GROUP_AddResultToFifo:00000018 $d
    {standard input}:4629   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:4634   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:4668   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:4673   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:4708   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:4713   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:4741   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:4746   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:4805   .text.XMC_VADC_GROUP_SetResultInterruptNode:0000002c $d
    {standard input}:4810   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:4815   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:4931   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:4936   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:5249   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
    {standard input}:5254   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
